// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/ulex/lib/automaton"

import(
  "moonbitlang/ulex/lib/regex"
  "moonbitlang/ulex/lib/util/eof_char_set"
)

// Values
fn get_regex_captures(@regex.Regex, @regex.Regex) -> Array[(String, (VarType, (StaticKnownTagPosition?, StaticKnownTagPosition?)))]

// Errors

// Types and methods
pub(all) struct DFA {
  graph : Array[Array[(@eof_char_set.EofCharSet, Int)]]
  mut start_node : Int
  tag_actions : Map[Int, TagAction]
  end_nodes : Map[Int, (Int, Array[(DFACapturePosition, DFACapturePosition)])]
  pattern_captures : Array[(Array[(String, VarType)], String?)]
  mut node_count : Int
}
fn DFA::from_patterns(Array[(@regex.Regex, String?)], encoding? : @regex.Encoding) -> Self
impl Show for DFA

pub(all) enum DFACapturePosition {
  Dynamic_dfa((Int, Int))
  Static_dfa(StaticKnownTagPosition)
}
impl Eq for DFACapturePosition
impl Show for DFACapturePosition

pub(all) enum Input {
  Eps
  EpsWithTag(Int)
  EChar(@eof_char_set.EofCharSet)
}
impl Eq for Input
impl Hash for Input
impl Show for Input

pub(all) struct NFA {
  graph : Array[NFANode]
  end_nodes : Map[Int, Int]
  pattern_captures : Array[(Array[((String, VarType), (NFACapturePosition, NFACapturePosition))], String?)]
  mut start_node : Int
  mut node_count : Int
  mut tag_count : Int
}
fn NFA::from_patterns(Array[(@regex.Regex, String?)], encoding? : @regex.Encoding) -> Self
impl Show for NFA

pub(all) enum NFACapturePosition {
  Dynamic_nfa(Int)
  Static_nfa(StaticKnownTagPosition)
}
impl Show for NFACapturePosition

pub(all) struct NFANode {
  num : Int
  mut eps : Array[NFANode]
  mut tagged_eps : Array[(NFANode, Int)]
  mut trans : Array[(@eof_char_set.EofCharSet, NFANode)]
}
impl Compare for NFANode
impl Eq for NFANode
impl Hash for NFANode
impl Show for NFANode

pub(all) enum StaticKnownTagPosition {
  RelativeToStart(Int)
  RelativeToEnd(Int)
}
impl Eq for StaticKnownTagPosition
impl Show for StaticKnownTagPosition

pub(all) struct TagAction(Array[TagOp])
fn TagAction::inner(Self) -> Array[TagOp]
impl Compare for TagAction
impl Eq for TagAction
impl Show for TagAction

pub(all) enum TagOp {
  Set(dest~ : (Int, Int))
  Copy(dest~ : (Int, Int), src~ : (Int, Int))
}
impl Compare for TagOp
impl Eq for TagOp
impl Show for TagOp

pub(all) enum VarType {
  Char
  String
}
impl Show for VarType

// Type aliases
pub typealias Int as DFANode

pub typealias Int as TagRank

pub typealias (Int, Int) as TagVar

// Traits

