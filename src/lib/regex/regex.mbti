// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/ulex/lib/regex"

import(
  "moonbitlang/core/immut/sorted_map"
  "moonbitlang/ulex/lib/util/char_set"
)

// Values
fn alt(Regex, Regex) -> Regex

fn bind(Regex, String) -> Regex

fn char_class(@char_set.CharSet, as_bytes? : Encoding) -> Regex

let eof : Regex

let epsilon : Regex

fn get_capture_vars(Regex) -> @sorted_map.T[String, RegexClass]

fn lower(Regex, encoding~ : Encoding?) -> Regex

fn opt(Regex) -> Regex

fn plus(Regex) -> Regex

fn repeat(Regex, min_times~ : Int, max_times? : Int) -> Regex

fn seq(Regex, Regex) -> Regex

fn star(Regex) -> Regex

// Errors

// Types and methods
pub(all) enum Encoding {
  Ascii
  Latin1
  Utf8
  Utf16
}
impl Eq for Encoding
impl Show for Encoding
impl ToJson for Encoding

pub struct Regex {
  desc : RegexDesc
  class_ : RegexClass
  len : Int?
}
fn Regex::check_legal(Self) -> Bool
impl Eq for Regex
impl Show for Regex
impl ToJson for Regex

pub enum RegexClass {
  Char
  String
}
impl Eq for RegexClass
impl Show for RegexClass
impl ToJson for RegexClass

pub enum RegexDesc {
  EOF
  Character(@char_set.CharSet)
  Repetition(Regex)
  Epsilon
  Alter(Regex, Regex)
  Concat(Regex, Regex)
  Capture(Regex, String)
}
impl Eq for RegexDesc
impl Show for RegexDesc
impl ToJson for RegexDesc

// Type aliases
pub typealias Regex as T

// Traits

