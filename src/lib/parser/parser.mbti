// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/ulex/lib/parser"

import(
  "moonbitlang/ulex/lib/regex"
  "moonbitlang/ulex/lib/type"
)

// Values
fn lex_eoi(() -> (Token, Int, Int), Int) -> ((Context) -> @type.Lex) raise ParseError

fn parse_lex_from_string(String) -> @type.Lex raise ParseError

fn parse_regex_from_string(String) -> @regex.Regex raise ParseError

fn regex_eoi(() -> (Token, Int, Int), Int) -> ((Context) -> @regex.Regex) raise ParseError

// Errors
pub suberror ParseError {
  UnexpectedToken(Token, (Int, Int), Array[TokenKind])
}
impl Show for ParseError

// Types and methods
type Context

pub(all) enum Token {
  EOI
  EOF
  PARSE_LBRACE
  REGEX
  AS
  UNDERSCORE
  RBRACE
  LPAREN
  RPAREN
  LBRACKET
  RBRACKET
  EQ
  SEMICOLON
  FAT_ARROW
  BAR
  STAR
  PLUS
  QUESTION
  MINUS
  CARET
  BACKSLASH
  RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE((String, String))
  LBRACE_CODE_RBRACE(String)
  LC_IDENT(String)
  CHAR(Char)
  STRING(String)
}
fn Token::kind(Self) -> TokenKind
impl Eq for Token
impl Show for Token
impl ToJson for Token

pub(all) enum TokenKind {
  TK_EOI
  TK_EOF
  TK_PARSE_LBRACE
  TK_REGEX
  TK_AS
  TK_UNDERSCORE
  TK_RBRACE
  TK_LPAREN
  TK_RPAREN
  TK_LBRACKET
  TK_RBRACKET
  TK_EQ
  TK_SEMICOLON
  TK_FAT_ARROW
  TK_BAR
  TK_STAR
  TK_PLUS
  TK_QUESTION
  TK_MINUS
  TK_CARET
  TK_BACKSLASH
  TK_RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE
  TK_LBRACE_CODE_RBRACE
  TK_LC_IDENT
  TK_CHAR
  TK_STRING
}
impl Show for TokenKind

// Type aliases

// Traits

