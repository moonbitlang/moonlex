fn parse_integer(input : @bytes.View) -> Int {
  loop 0, input {
    acc, [] => acc
    acc, ['0'..='9' as c, .. rest] =>
      continue acc * 10 + (c.to_int() - '0'), rest
    _, _ => panic()
  }
}

fn eval(input : Bytes) -> Int {
  const DIGIT : BytesRegex = "[0-9]"
  const NUMBER : BytesRegex = "\{DIGIT}+"

  let stack : Array[Int] = []
  let x = input[:]
  lex x {
    [] => { break }
    [" ", .. y] => { continue y }
    [NUMBER as t, .. y] => { 
      stack.push(parse_integer(t))
      continue y
    }
    ["\\+", .. y] => {
      let arg2 = stack.unsafe_pop()
      let arg1 = stack.unsafe_pop()
      stack.push(arg1 + arg2)
      continue y
    }
    ["-", .. y] => {
      let arg2 = stack.unsafe_pop()
      let arg1 = stack.unsafe_pop()
      stack.push(arg1 - arg2)
      continue y
    }
  }
  stack.unsafe_pop()
}
