{
pub type! MalformedUtf8Error
}

rule lex_utf8[T](lexbuf : @lexbuf.T[T, Byte, @bytes.View, Int], buf : StringBuilder) -> Unit!MalformedUtf8Error {
  parse {
    eof => { () }
    ['\x00'-'\x7f'] as t => { 
      let c = Char::from_int(t.to_int())
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    }
    (['\xc2'-'\xdf'] as t1) (['\x80'-'\xbf'] as t2) => {
      let c = Char::from_int((t1.to_int() & 0x1f) << 6 | (t2.to_int() & 0x3f))
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    }
    (['\xe0'-'\xef'] as t1) (['\x80'-'\xbf'] as t2) (['\x80'-'\xbf'] as t3) => {
      let c = Char::from_int((t1.to_int() & 0x0f) << 12 | (t2.to_int() & 0x3f) << 6 | (t3.to_int() & 0x3f))
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    }
    (['\xf0'-'\xf4'] as t1) (['\x80'-'\xbf'] as t2) (['\x80'-'\xbf'] as t3) (['\x80'-'\xbf'] as t4) => {
      let c = Char::from_int((t1.to_int() & 0x07) << 18 | (t2.to_int() & 0x3f) << 12 | (t3.to_int() & 0x3f) << 6 | (t4.to_int() & 0x3f))
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    }
    _ => { raise MalformedUtf8Error }
  }
}

{
fn utf8_decode(bytes : Bytes) -> String!MalformedUtf8Error {
  let buf = StringBuilder::new()
  let lexbuf = @lexbuf.from_bytes(bytes)
  lex_utf8!(lexbuf, buf)
  buf.to_string()
}
}
