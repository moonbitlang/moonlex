
pub type! MalformedUtf8Error


let lex_utf8_tag_action_row_0 : Array[Int] = []
let lex_utf8_tag_action_row_2 : Array[Int] = [-1]
let lex_utf8_tag_action_row_1 : Array[Int] = [0]

let lex_utf8_tag_action_0 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_4 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_5 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_8 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_10 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2]
let lex_utf8_tag_action_3 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_7 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_9 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_2 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_6 : Array[Array[Int]] = [lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]
let lex_utf8_tag_action_1 : Array[Array[Int]] = [lex_utf8_tag_action_row_1, lex_utf8_tag_action_row_2, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0, lex_utf8_tag_action_row_0]

fn lex_utf8_state_0(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    -1 => (3, lex_utf8_tag_action_0)
    0..=127 => (1, lex_utf8_tag_action_1)
    128..=193 => (2, lex_utf8_tag_action_0)
    194..=223 => (5, lex_utf8_tag_action_2)
    224..=239 => (6, lex_utf8_tag_action_3)
    240..=244 => (4, lex_utf8_tag_action_4)
    245..=1114111 => (2, lex_utf8_tag_action_0)
    _ => (-1, [])
  }
}
fn lex_utf8_state_1(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    _ => (-1, [])
  }
}
fn lex_utf8_state_2(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    _ => (-1, [])
  }
}
fn lex_utf8_state_3(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    _ => (-1, [])
  }
}
fn lex_utf8_state_4(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    128..=191 => (7, lex_utf8_tag_action_5)
    _ => (-1, [])
  }
}
fn lex_utf8_state_5(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    128..=191 => (8, lex_utf8_tag_action_6)
    _ => (-1, [])
  }
}
fn lex_utf8_state_6(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    128..=191 => (9, lex_utf8_tag_action_7)
    _ => (-1, [])
  }
}
fn lex_utf8_state_7(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    128..=191 => (10, lex_utf8_tag_action_8)
    _ => (-1, [])
  }
}
fn lex_utf8_state_8(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    _ => (-1, [])
  }
}
fn lex_utf8_state_9(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    128..=191 => (11, lex_utf8_tag_action_9)
    _ => (-1, [])
  }
}
fn lex_utf8_state_10(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    128..=191 => (12, lex_utf8_tag_action_10)
    _ => (-1, [])
  }
}
fn lex_utf8_state_11(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    _ => (-1, [])
  }
}
fn lex_utf8_state_12(input : Int) -> (Int, Array[Array[Int]]) {
  match input {
    _ => (-1, [])
  }
}

let __mbtlex_engine_lex_utf8: @lexengine.T = { graph: [lex_utf8_state_0, lex_utf8_state_1, lex_utf8_state_2, lex_utf8_state_3, lex_utf8_state_4, lex_utf8_state_5, lex_utf8_state_6, lex_utf8_state_7, lex_utf8_state_8, lex_utf8_state_9, lex_utf8_state_10, lex_utf8_state_11, lex_utf8_state_12, ], end_nodes: [None, Some((1, [((0, 0), (1, 0))])), Some((5, [])), Some((0, [])), Some((5, [])), Some((5, [])), Some((5, [])), None, Some((2, [((2, 0), (3, 0)), ((4, 0), (5, 0))])), None, None, Some((3, [((6, 0), (7, 0)), ((8, 0), (9, 0)), ((10, 0), (11, 0))])), Some((4, [((12, 0), (13, 0)), ((14, 0), (15, 0)), ((16, 0), (17, 0)), ((18, 0), (19, 0))]))], start_tags: [0, 2, 6, 12], code_blocks_n: 6 }
fn lex_utf8[T](lexbuf : @lexbuf.T[T, Byte, @bytes.View, Int], buf : StringBuilder) -> Unit!MalformedUtf8Error  {
  match __mbtlex_engine_lex_utf8.run(lexbuf) {
    (0, __mbtlex_captures) => {
 () 
    }
    (1, __mbtlex_captures) => {
  let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
  let t = lexbuf.unsafe_get(_start_pos_of_t)
  
 
      let c = Char::from_int(t.to_int())
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    
    }
    (2, __mbtlex_captures) => {
  let (_start_pos_of_t1, _end_pos_of_t1) = __mbtlex_captures[0]
  let t1 = lexbuf.unsafe_get(_start_pos_of_t1)
  
  let (_start_pos_of_t2, _end_pos_of_t2) = __mbtlex_captures[1]
  let t2 = lexbuf.unsafe_get(_start_pos_of_t2)
  

      let c = Char::from_int((t1.to_int() & 0x1f) << 6 | (t2.to_int() & 0x3f))
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    
    }
    (3, __mbtlex_captures) => {
  let (_start_pos_of_t1, _end_pos_of_t1) = __mbtlex_captures[0]
  let t1 = lexbuf.unsafe_get(_start_pos_of_t1)
  
  let (_start_pos_of_t2, _end_pos_of_t2) = __mbtlex_captures[1]
  let t2 = lexbuf.unsafe_get(_start_pos_of_t2)
  
  let (_start_pos_of_t3, _end_pos_of_t3) = __mbtlex_captures[2]
  let t3 = lexbuf.unsafe_get(_start_pos_of_t3)
  

      let c = Char::from_int((t1.to_int() & 0x0f) << 12 | (t2.to_int() & 0x3f) << 6 | (t3.to_int() & 0x3f))
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    
    }
    (4, __mbtlex_captures) => {
  let (_start_pos_of_t1, _end_pos_of_t1) = __mbtlex_captures[0]
  let t1 = lexbuf.unsafe_get(_start_pos_of_t1)
  
  let (_start_pos_of_t2, _end_pos_of_t2) = __mbtlex_captures[1]
  let t2 = lexbuf.unsafe_get(_start_pos_of_t2)
  
  let (_start_pos_of_t3, _end_pos_of_t3) = __mbtlex_captures[2]
  let t3 = lexbuf.unsafe_get(_start_pos_of_t3)
  
  let (_start_pos_of_t4, _end_pos_of_t4) = __mbtlex_captures[3]
  let t4 = lexbuf.unsafe_get(_start_pos_of_t4)
  

      let c = Char::from_int((t1.to_int() & 0x07) << 18 | (t2.to_int() & 0x3f) << 12 | (t3.to_int() & 0x3f) << 6 | (t4.to_int() & 0x3f))
      buf.write_char(c)
      lex_utf8!(lexbuf, buf)
    
    }
    (5, __mbtlex_captures) => {
 raise MalformedUtf8Error 
    }
    _ => abort("lex: fail to match")
  }
}


fn utf8_decode(bytes : Bytes) -> String!MalformedUtf8Error {
  let buf = StringBuilder::new()
  let lexbuf = @lexbuf.from_bytes(bytes)
  lex_utf8!(lexbuf, buf)
  buf.to_string()
}
