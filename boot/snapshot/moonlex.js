const $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$EOF = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Repetition(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Repetition.prototype.$tag = 2;
const $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Epsilon = { $tag: 3 };
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Alter(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Alter.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Concat(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Concat.prototype.$tag = 5;
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Capture(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Capture.prototype.$tag = 6;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTES(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTES.prototype.$tag = 3;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FLOAT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FLOAT.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING.prototype.$tag = 5;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_STRING.prototype.$tag = 6;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_INTERP(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_INTERP.prototype.$tag = 7;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INTERP(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INTERP.prototype.$tag = 8;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ATTRIBUTE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ATTRIBUTE.prototype.$tag = 9;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT.prototype.$tag = 10;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT.prototype.$tag = 11;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT_LEX = { $tag: 12 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT_REGEX = { $tag: 13 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$POST_LABEL(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$POST_LABEL.prototype.$tag = 14;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT.prototype.$tag = 15;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$NEWLINE = { $tag: 16 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1.prototype.$tag = 17;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2.prototype.$tag = 18;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3.prototype.$tag = 19;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX4(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX4.prototype.$tag = 20;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AUGMENTED_ASSIGNMENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AUGMENTED_ASSIGNMENT.prototype.$tag = 21;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EOF = { $tag: 22 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FALSE = { $tag: 23 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRUE = { $tag: 24 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PUB = { $tag: 25 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PRIV = { $tag: 26 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$READONLY = { $tag: 27 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPORT = { $tag: 28 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXTERN = { $tag: 29 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BREAK = { $tag: 30 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONTINUE = { $tag: 31 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRUCT = { $tag: 32 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ENUM = { $tag: 33 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAIT = { $tag: 34 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DERIVE = { $tag: 35 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPL = { $tag: 36 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WITH = { $tag: 37 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RAISE = { $tag: 38 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THROW = { $tag: 39 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRY = { $tag: 40 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CATCH = { $tag: 41 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ASYNC = { $tag: 42 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPEALIAS = { $tag: 43 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAITALIAS = { $tag: 44 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FNALIAS = { $tag: 45 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EQUAL = { $tag: 46 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LPAREN = { $tag: 47 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RPAREN = { $tag: 48 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMA = { $tag: 49 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MINUS = { $tag: 50 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$QUESTION = { $tag: 51 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXCLAMATION = { $tag: 52 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LIDENT.prototype.$tag = 53;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_UIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_UIDENT.prototype.$tag = 54;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_INT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_INT.prototype.$tag = 55;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LPAREN = { $tag: 56 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLONCOLON = { $tag: 57 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLON = { $tag: 58 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI.prototype.$tag = 59;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACKET = { $tag: 60 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PLUS = { $tag: 61 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACKET = { $tag: 62 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UNDERSCORE = { $tag: 63 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BAR = { $tag: 64 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACE = { $tag: 65 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACE = { $tag: 66 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPERAMPER = { $tag: 67 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPER = { $tag: 68 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CARET = { $tag: 69 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BARBAR = { $tag: 70 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PACKAGE_NAME(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PACKAGE_NAME.prototype.$tag = 71;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AS = { $tag: 72 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PIPE = { $tag: 73 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELSE = { $tag: 74 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FN = { $tag: 75 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IF = { $tag: 76 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LET = { $tag: 77 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONST = { $tag: 78 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MATCH = { $tag: 79 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MUTABLE = { $tag: 80 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPE = { $tag: 81 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FAT_ARROW = { $tag: 82 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THIN_ARROW = { $tag: 83 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WHILE = { $tag: 84 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RETURN = { $tag: 85 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOTDOT = { $tag: 86 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_INCLUSIVE = { $tag: 87 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_EXCLUSIVE = { $tag: 88 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELLIPSIS = { $tag: 89 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TEST = { $tag: 90 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LOOP = { $tag: 91 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$GUARD = { $tag: 92 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FOR = { $tag: 93 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IN = { $tag: 94 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IS = { $tag: 95 };
const $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$0$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$0$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$1$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$1$.prototype.$tag = 1;
class $PanicError extends Error {}
function $panic() {
  throw new $PanicError();
}
function $bound_check(arr, index) {
  if (index < 0 || index >= arr.length) throw new Error("Index out of bounds");
}
function $compare_int(a, b) {
  return (a >= b) - (a <= b);
}
function $make_array_len_and_init(a, b) {
  const arr = new Array(a);
  for (let i = 0; i < a; i++) {
    arr[i] = b;
  }
  return arr;
}
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$.prototype.$tag = 1;
function Result$Err$7$(param0) {
  this._0 = param0;
}
Result$Err$7$.prototype.$tag = 0;
function Result$Ok$7$(param0) {
  this._0 = param0;
}
Result$Ok$7$.prototype.$tag = 1;
const Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void = { $tag: 49 };
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Int__Int__$46$YYObj__Int__Int__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Int__Int__$46$YYObj__Int__Int__.prototype.$tag = 48;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Char__String_$46$YYObj__Char__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Char__String_$46$YYObj__Char__String_.prototype.$tag = 47;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 46;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T.prototype.$tag = 45;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex.prototype.$tag = 44;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char.prototype.$tag = 43;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Bool$46$YYObj_Bool(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Bool$46$YYObj_Bool.prototype.$tag = 42;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Int$46$YYObj_Int(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Int$46$YYObj_Int.prototype.$tag = 41;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Comment$46$YYObj_Comment(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Comment$46$YYObj_Comment.prototype.$tag = 40;
const Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void = { $tag: 39 };
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral.prototype.$tag = 38;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral.prototype.$tag = 37;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 36;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral.prototype.$tag = 35;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Program$46$YYObj__ast_Program(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Program$46$YYObj__ast_Program.prototype.$tag = 34;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_.prototype.$tag = 33;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Code$46$YYObj__ast_Code(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Code$46$YYObj__ast_Code.prototype.$tag = 32;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_.prototype.$tag = 31;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexCase$46$YYObj__ast_LexCase(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexCase$46$YYObj__ast_LexCase.prototype.$tag = 30;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem.prototype.$tag = 29;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_.prototype.$tag = 28;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex.prototype.$tag = 27;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Array__ast_Term_$46$YYObj_Array__ast_Term_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Array__ast_Term_$46$YYObj_Array__ast_Term_.prototype.$tag = 26;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_.prototype.$tag = 25;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern.prototype.$tag = 24;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident.prototype.$tag = 23;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___.prototype.$tag = 22;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_.prototype.$tag = 21;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term.prototype.$tag = 20;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit.prototype.$tag = 19;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 18;
const Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void = { $tag: 17 };
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_.prototype.$tag = 16;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex.prototype.$tag = 15;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context.prototype.$tag = 14;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T__type_Rule_$46$YYObj__Context______list_T__type_Rule_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T__type_Rule_$46$YYObj__Context______list_T__type_Rule_.prototype.$tag = 13;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Rule$46$YYObj__Context______type_Rule(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Rule$46$YYObj__Context______type_Rule.prototype.$tag = 12;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__.prototype.$tag = 11;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Char$46$YYObj_Char(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Char$46$YYObj_Char.prototype.$tag = 10;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_______type_Regex__String____type_CodeBlock_$46$YYObj__Context_______type_Regex__String____type_CodeBlock_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_______type_Regex__String____type_CodeBlock_$46$YYObj__Context_______type_Regex__String____type_CodeBlock_.prototype.$tag = 9;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T.prototype.$tag = 8;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 7;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex.prototype.$tag = 6;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 5;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedEndOfInput(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedEndOfInput.prototype.$tag = 4;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 3;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedEndOfInput(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedEndOfInput.prototype.$tag = 2;
function Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError.prototype.$tag = 1;
function Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError.prototype.$tag = 0;
function Result$Err$8$(param0) {
  this._0 = param0;
}
Result$Err$8$.prototype.$tag = 0;
function Result$Ok$8$(param0) {
  this._0 = param0;
}
Result$Ok$8$.prototype.$tag = 1;
function Result$Err$9$(param0) {
  this._0 = param0;
}
Result$Err$9$.prototype.$tag = 0;
function Result$Ok$9$(param0) {
  this._0 = param0;
}
Result$Ok$9$.prototype.$tag = 1;
function Result$Err$10$(param0) {
  this._0 = param0;
}
Result$Err$10$.prototype.$tag = 0;
function Result$Ok$10$(param0) {
  this._0 = param0;
}
Result$Ok$10$.prototype.$tag = 1;
const $9223372036854775807L = { hi: 2147483647, lo: -1 };
const $10L = { hi: 0, lo: 10 };
const $1L = { hi: 0, lo: 1 };
const $16L = { hi: 0, lo: 16 };
const $_9223372036854775808L = { hi: -2147483648, lo: 0 };
const $0L = { hi: 0, lo: 0 };
function $makebytes(a, b) {
  const arr = new Uint8Array(a);
  for (let i = 0; i < a; i++) {
    arr[i] = b;
  }
  return arr;
}
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$11$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$11$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$11$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$.prototype.$tag = 1;
const Option$None$20$ = { $tag: 0 };
function Option$Some$20$(param0) {
  this._0 = param0;
}
Option$Some$20$.prototype.$tag = 1;
function $unsafe_make_string(a, b) {
  return String.fromCodePoint(b).repeat(a);
}
const Option$None$21$ = { $tag: 0 };
function Option$Some$21$(param0) {
  this._0 = param0;
}
Option$Some$21$.prototype.$tag = 1;
const moonbitlang$core$builtin$$JSArray$push = (arr, val) => { arr.push(val); };
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$22$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$22$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$22$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$22$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$22$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$22$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$22$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$22$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$22$.prototype.$tag = 4;
const $bytes_literal$0 = new Uint8Array();
const moonbitlang$core$builtin$$get_int64_wasm_helper = function f() {
  if (f._exports) return f._exports;
  return f._exports = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
};
const moonbitlang$core$builtin$$MyInt64$compare = (a, b) => {
  const ahi = a.hi;
  const bhi = b.hi;
  if (ahi < bhi) {
    return -1;
  }
  if (ahi > bhi) {
    return 1;
  }
  const alo = a.lo >>> 0;
  const blo = b.lo >>> 0;
  if (alo < blo) {
    return -1;
  }
  if (alo > blo) {
    return 1;
  }
  return 0;
};
const moonbitlang$core$builtin$$JSArray$pop = (arr) => arr.pop();
const moonbitlang$core$builtin$$JSArray$set_length = (arr, len) => { arr.length = len; };
const moonbitlang$core$builtin$$JSArray$splice1 = (arr, idx, cnt, val) => arr.splice(idx, cnt, val);
const $64$moonbitlang$47$core$47$list$46$T$Empty$23$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$23$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$23$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$24$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$24$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$24$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$25$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$25$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$25$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$26$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$26$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$26$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$27$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$27$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$27$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$28$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$28$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$28$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$29$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$29$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$29$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$30$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$30$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$30$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$31$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$31$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$31$.prototype.$tag = 1;
const $64$moonbitlang$47$x$47$encoding$46$Decode$End = { $tag: 0 };
function $64$moonbitlang$47$x$47$encoding$46$Decode$Refill(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$Decode$Refill.prototype.$tag = 1;
function $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$Decode$Malformed.prototype.$tag = 2;
function $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$Decode$Uchar.prototype.$tag = 3;
function $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$Hi(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$UTF16Decode$Hi.prototype.$tag = 0;
function $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Malformed(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Malformed.prototype.$tag = 1;
function $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Uchar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Uchar.prototype.$tag = 2;
function $bytes_equal(a, b) {
    if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$32$(param0) {
  this._0 = param0;
}
Result$Err$32$.prototype.$tag = 0;
function Result$Ok$32$(param0) {
  this._0 = param0;
}
Result$Ok$32$.prototype.$tag = 1;
function Result$Err$33$(param0) {
  this._0 = param0;
}
Result$Err$33$.prototype.$tag = 0;
function Result$Ok$33$(param0) {
  this._0 = param0;
}
Result$Ok$33$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOI = { $tag: 0 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOF = { $tag: 1 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PARSE_LBRACE = { $tag: 2 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$REGEX = { $tag: 3 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$AS = { $tag: 4 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$UNDERSCORE = { $tag: 5 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACE = { $tag: 6 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LPAREN = { $tag: 7 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RPAREN = { $tag: 8 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACKET = { $tag: 9 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACKET = { $tag: 10 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EQ = { $tag: 11 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$SEMICOLON = { $tag: 12 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$FAT_ARROW = { $tag: 13 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BAR = { $tag: 14 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STAR = { $tag: 15 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PLUS = { $tag: 16 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$QUESTION = { $tag: 17 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$MINUS = { $tag: 18 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CARET = { $tag: 19 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BACKSLASH = { $tag: 20 };
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE.prototype.$tag = 21;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE.prototype.$tag = 22;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LC_IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LC_IDENT.prototype.$tag = 23;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR.prototype.$tag = 24;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STRING.prototype.$tag = 25;
function Result$Err$34$(param0) {
  this._0 = param0;
}
Result$Err$34$.prototype.$tag = 0;
function Result$Ok$34$(param0) {
  this._0 = param0;
}
Result$Ok$34$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char.prototype.$tag = 1;
function $i32_ctz(a) {
  a >>>= 0;
  if (a === 0) return 32;
  a &= -a;
  return 31 - Math.clz32(a);
}
const $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Empty$35$ = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$36$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$36$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$36$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$36$.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPosOf.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPosOf.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPos = { $tag: 2 };
const $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPos = { $tag: 3 };
function $64$Yoorkin$47$ArgParser$46$Spec$Unit(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Unit.prototype.$tag = 0;
function $64$Yoorkin$47$ArgParser$46$Spec$String(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$String.prototype.$tag = 1;
function $64$Yoorkin$47$ArgParser$46$Spec$Set_string(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set_string.prototype.$tag = 2;
function $64$Yoorkin$47$ArgParser$46$Spec$Set(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set.prototype.$tag = 3;
function $64$Yoorkin$47$ArgParser$46$Spec$Clear(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Clear.prototype.$tag = 4;
const moonbitlang$x$sys$internal$ffi$$get_cli_args_internal = function() {
  return process.argv.slice(1);
 };
const moonbitlang$x$fs$$read_file_ffi = function(path) {
   var fs = require('fs');
   try {
     const content = fs.readFileSync(path);
     globalThis.fileContent = content;
     return 0;
   } catch (error) {
     globalThis.errorMessage = error.message;
     return -1;
   }
 };
const moonbitlang$x$fs$$write_file_ffi = function(path, content) {
   var fs = require('fs');
   try {
     fs.writeFileSync(path, Buffer.from(content));
     return 0;
   } catch (error) {
     globalThis.errorMessage = error.message;
     return -1;
   }
 };
const moonbitlang$x$fs$$get_file_content_ffi = function() {
   return globalThis.fileContent;
 };
const moonbitlang$x$fs$$get_error_message_ffi = function() {
   return globalThis.errorMessage || '';
 };
function Result$Err$37$(param0) {
  this._0 = param0;
}
Result$Err$37$.prototype.$tag = 0;
function Result$Ok$37$(param0) {
  this._0 = param0;
}
Result$Ok$37$.prototype.$tag = 1;
function Result$Err$38$(param0) {
  this._0 = param0;
}
Result$Err$38$.prototype.$tag = 0;
function Result$Ok$38$(param0) {
  this._0 = param0;
}
Result$Ok$38$.prototype.$tag = 1;
function Result$Err$39$(param0) {
  this._0 = param0;
}
Result$Err$39$.prototype.$tag = 0;
function Result$Ok$39$(param0) {
  this._0 = param0;
}
Result$Ok$39$.prototype.$tag = 1;
const moonbitlang$ulex$main$util$$ffi_exit = (code) => { process.exit(code); };
const moonbitlang$ulex$main$util$$println_to_stderr = (msg) => { console.error("%s", msg); };
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$40$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$40$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$40$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$40$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$40$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$40$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$40$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$40$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$40$.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter.prototype.$tag = 0;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString = { $tag: 1 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedStringInVariableInterploation = { $tag: 2 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidMultilineString = { $tag: 3 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidComment = { $tag: 4 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidAttribute = { $tag: 5 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpMissingExpression = { $tag: 6 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence.prototype.$tag = 7;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidDotInt(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidDotInt.prototype.$tag = 8;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidByteLiteral(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidByteLiteral.prototype.$tag = 9;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$Reserved_keyword(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$Reserved_keyword.prototype.$tag = 10;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpSource(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpSource.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$InlineTrailing = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$Ownline(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$Ownline.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$NamedRegex(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$NamedRegex.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$LexDef(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$LexDef.prototype.$tag = 3;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$GeneratedCode(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$GeneratedCode.prototype.$tag = 4;
const Option$None$41$ = { $tag: 0 };
function Option$Some$41$(param0) {
  this._0 = param0;
}
Option$Some$41$.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Literal(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Literal.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Interp(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Interp.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Named(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Named.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$Regex(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$Regex.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$RegexAs(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$RegexAs.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$42$(param0) {
  this._0 = param0;
}
Result$Err$42$.prototype.$tag = 0;
function Result$Ok$42$(param0) {
  this._0 = param0;
}
Result$Ok$42$.prototype.$tag = 1;
function Result$Err$43$(param0) {
  this._0 = param0;
}
Result$Err$43$.prototype.$tag = 0;
function Result$Ok$43$(param0) {
  this._0 = param0;
}
Result$Ok$43$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$44$(param0) {
  this._0 = param0;
}
Result$Err$44$.prototype.$tag = 0;
function Result$Ok$44$(param0) {
  this._0 = param0;
}
Result$Ok$44$.prototype.$tag = 1;
function Result$Err$45$(param0) {
  this._0 = param0;
}
Result$Err$45$.prototype.$tag = 0;
function Result$Ok$45$(param0) {
  this._0 = param0;
}
Result$Ok$45$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$EOF = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE.prototype.$tag = 2;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOT = { $tag: 3 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOLLAR = { $tag: 4 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LBRACKET = { $tag: 5 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RBRACKET = { $tag: 6 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CARET = { $tag: 7 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$MINUS = { $tag: 8 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$STAR = { $tag: 9 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$PLUS = { $tag: 10 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$QUESTION = { $tag: 11 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT.prototype.$tag = 12;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LPAREN = { $tag: 13 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RPAREN = { $tag: 14 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$BAR = { $tag: 15 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN.prototype.$tag = 16;
const moonbitlang$core$strconv$$base_err_str = "invalid base";
const moonbitlang$core$strconv$$range_err_str = "value out of range";
const moonbitlang$core$strconv$$syntax_err_str = "invalid syntax";
const moonbitlang$core$strconv$$parse_int64$46$42$bind$124$628 = "";
const moonbitlang$core$int$$max_value = 2147483647;
const moonbitlang$x$encoding$$utf_8_len = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const moonbitlang$ulex$lib$regex$$eof = { desc: $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$EOF, class_: 1, len: undefined };
const moonbitlang$ulex$lib$regex$$epsilon = { desc: $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Epsilon, class_: 1, len: 0 };
const moonbitlang$ulex$lib$util$immut_map$$rand_state = { val: 1 };
const moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$334 = "(";
const moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$330 = "[";
const moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$324 = "]";
const moonbitlang$ulex$lib$codegen$$codegen_lex$46$42$bind$124$346 = "\n";
const moonbitlang$ulex$lib$codegen$$codegen_lex$46$42$bind$124$347 = "\n\n";
const moonbitlang$ulex$main$$array_to_or_list$46$42$bind$124$44 = ", ";
const moonbitlang$ulex$main$$_init$42$46$usage$124$1 = "Usage: moonlex [options] <input-file>";
const moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf = moonbitlang$core$builtin$$StringBuilder$new(0);
const moonbitlang$ulex$lib$new_frontend$lexer$$reserved_keyword_table = moonbitlang$core$hashset$$from_array$0$(["module", "move", "ref", "static", "super", "unsafe", "use", "where", "await", "dyn", "abstract", "do", "final", "macro", "override", "typeof", "virtual", "yield", "local", "method", "alias", "assert"]);
const moonbitlang$ulex$lib$new_frontend$lexer$$keyword_table = moonbitlang$core$hashmap$$from_array$1$([{ _0: "as", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AS }, { _0: "else", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELSE }, { _0: "extern", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXTERN }, { _0: "fn", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FN }, { _0: "fnalias", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FNALIAS }, { _0: "if", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IF }, { _0: "let", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LET }, { _0: "const", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONST }, { _0: "match", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MATCH }, { _0: "mut", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MUTABLE }, { _0: "type", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPE }, { _0: "typealias", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPEALIAS }, { _0: "struct", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRUCT }, { _0: "enum", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ENUM }, { _0: "trait", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAIT }, { _0: "traitalias", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAITALIAS }, { _0: "derive", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DERIVE }, { _0: "while", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WHILE }, { _0: "break", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BREAK }, { _0: "continue", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONTINUE }, { _0: "import", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPORT }, { _0: "return", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RETURN }, { _0: "throw", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THROW }, { _0: "raise", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RAISE }, { _0: "try", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRY }, { _0: "catch", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CATCH }, { _0: "pub", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PUB }, { _0: "priv", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PRIV }, { _0: "readonly", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$READONLY }, { _0: "true", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRUE }, { _0: "false", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FALSE }, { _0: "_", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UNDERSCORE }, { _0: "test", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TEST }, { _0: "loop", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LOOP }, { _0: "for", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FOR }, { _0: "in", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IN }, { _0: "impl", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPL }, { _0: "with", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WITH }, { _0: "guard", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$GUARD }, { _0: "async", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ASYNC }, { _0: "is", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IS }, { _0: "lex", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT_LEX }]);
const moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf = moonbitlang$core$builtin$$StringBuilder$new(0);
const moonbitlang$ulex$lib$new_frontend$lexer$$string_interps = moonbitlang$core$ref$$new$2$([]);
const moonbitlang$ulex$lib$util$char_set$$empty = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
const moonbitlang$ulex$lib$util$char_set$$any = moonbitlang$ulex$lib$util$char_set$$range(0, 1114111);
const moonbitlang$ulex$lib$util$eof_char_set$$empty = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
const moonbitlang$ulex$lib$util$eof_char_set$$eof = moonbitlang$ulex$lib$util$diet$$singleton$3$(-1);
function moonbitlang$core$abort$$abort$4$(msg) {
  $panic();
}
function moonbitlang$core$abort$$abort$5$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$0$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$6$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$7$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$8$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$9$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$10$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$11$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$12$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$13$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$14$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$15$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$16$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$17$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$18$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$19$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$20$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$21$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$22$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$23$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$24$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$25$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$26$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$27$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$28$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$29$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$30$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$31$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$32$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$33$(msg) {
  return $panic();
}
function moonbitlang$core$ref$$new$0$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$34$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$35$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$2$(x) {
  return { val: x };
}
function moonbitlang$core$array$$ArrayView$rev_inplace$26$(self) {
  const mid_len = self.len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (self.len - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$26$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$rev_inplace$27$(self) {
  const mid_len = self.len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (self.len - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$27$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$iter$0$(self) {
  const _p = (yield_) => {
    const _len = self.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self.buf[self.start + _i | 0];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$makei$36$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = moonbitlang$core$array$$Array$make$37$(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        moonbitlang$core$array$$Array$op_set$37$(array, i, value(i));
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$ArrayView$join(self, separator) {
  if (self.len === 0) {
    return "";
  } else {
    const _hd = self.buf[self.start];
    const _bind = self.buf;
    const _bind$2 = 1 + self.start | 0;
    const _some = self.len;
    const _bind$3 = _some - 1 | 0;
    const _x = { buf: _bind, start: _bind$2, len: _bind$3 };
    let size_hint = _hd.length;
    const _len = _x.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const s = _bind[_bind$2 + _i | 0];
        size_hint = size_hint + (s.length + (separator.end - separator.start | 0) | 0) | 0;
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    size_hint = size_hint << 1;
    const buf = moonbitlang$core$builtin$$StringBuilder$new(size_hint);
    moonbitlang$core$builtin$$Logger$write_string$38$(buf, _hd);
    if (moonbitlang$core$string$$String$char_length_eq(separator.str, 0, separator.start, separator.end)) {
      const _len$2 = _x.len;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _bind[_bind$2 + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    } else {
      const _len$2 = _x.len;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _bind[_bind$2 + _i | 0];
          moonbitlang$core$builtin$$Logger$write_substring$38$(buf, separator.str, separator.start, separator.end - separator.start | 0);
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    }
    return buf.val;
  }
}
function moonbitlang$core$array$$get_limit(len) {
  let len$2 = len;
  let limit = 0;
  while (true) {
    if (len$2 > 0) {
      len$2 = len$2 / 2 | 0;
      limit = limit + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return limit;
}
function moonbitlang$core$array$$choose_pivot$46$sort_2$47$90(_env, a, b) {
  const arr = _env._1;
  const swaps = _env._0;
  if (moonbitlang$core$builtin$$op_gt$26$(moonbitlang$core$array$$ArrayView$op_get$26$(arr, a), moonbitlang$core$array$$ArrayView$op_get$26$(arr, b))) {
    moonbitlang$core$array$$ArrayView$swap$26$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_3$47$91(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$90(_env, a, b);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$90(_env, b, c);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$90(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot$26$(arr) {
  const len = arr.len;
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: swaps, _1: arr };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$91(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$91(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$91(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot$46$sort_3$47$91(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$26$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_2$47$108(_env, a, b) {
  const arr = _env._1;
  const swaps = _env._0;
  if (moonbitlang$core$builtin$$op_gt$27$(moonbitlang$core$array$$ArrayView$op_get$27$(arr, a), moonbitlang$core$array$$ArrayView$op_get$27$(arr, b))) {
    moonbitlang$core$array$$ArrayView$swap$27$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_3$47$109(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$108(_env, a, b);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$108(_env, b, c);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$108(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot$27$(arr) {
  const len = arr.len;
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: swaps, _1: arr };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$109(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$109(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$109(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot$46$sort_3$47$109(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$27$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$sift_down$26$(arr, index) {
  let index$2 = index;
  const len = arr.len;
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && moonbitlang$core$builtin$$op_lt$26$(moonbitlang$core$array$$ArrayView$op_get$26$(arr, child), moonbitlang$core$array$$ArrayView$op_get$26$(arr, child + 1 | 0))) {
        child = child + 1 | 0;
      }
      if (moonbitlang$core$builtin$$op_ge$26$(moonbitlang$core$array$$ArrayView$op_get$26$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$26$(arr, child))) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$26$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$sift_down$27$(arr, index) {
  let index$2 = index;
  const len = arr.len;
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && moonbitlang$core$builtin$$op_lt$27$(moonbitlang$core$array$$ArrayView$op_get$27$(arr, child), moonbitlang$core$array$$ArrayView$op_get$27$(arr, child + 1 | 0))) {
        child = child + 1 | 0;
      }
      if (moonbitlang$core$builtin$$op_ge$27$(moonbitlang$core$array$$ArrayView$op_get$27$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$27$(arr, child))) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$27$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort$26$(arr) {
  const len = arr.len;
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down$26$(arr, i);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$26$(arr, 0, i);
      moonbitlang$core$array$$sift_down$26$(moonbitlang$core$array$$ArrayView$op_as_view$26$(arr, 0, i), 0);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort$27$(arr) {
  const len = arr.len;
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down$27$(arr, i);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$27$(arr, 0, i);
      moonbitlang$core$array$$sift_down$27$(moonbitlang$core$array$$ArrayView$op_as_view$27$(arr, 0, i), 0);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$partition$26$(arr, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$26$(arr, pivot_index, arr.len - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$26$(arr, arr.len - 1 | 0);
  let i = 0;
  let partitioned = true;
  const _end843 = arr.len - 1 | 0;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < _end843) {
      if (moonbitlang$core$builtin$$op_lt$26$(moonbitlang$core$array$$ArrayView$op_get$26$(arr, j), pivot)) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$26$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$26$(arr, i, arr.len - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$partition$27$(arr, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$27$(arr, pivot_index, arr.len - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$27$(arr, arr.len - 1 | 0);
  let i = 0;
  let partitioned = true;
  const _end843 = arr.len - 1 | 0;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < _end843) {
      if (moonbitlang$core$builtin$$op_lt$27$(moonbitlang$core$array$$ArrayView$op_get$27$(arr, j), pivot)) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$27$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$27$(arr, i, arr.len - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$try_bubble_sort$26$(arr) {
  let tries = 0;
  const _end858 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end858) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$26$(moonbitlang$core$array$$ArrayView$op_get$26$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$26$(arr, j))) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$26$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$try_bubble_sort$27$(arr) {
  let tries = 0;
  const _end858 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end858) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$27$(moonbitlang$core$array$$ArrayView$op_get$27$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$27$(arr, j))) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$27$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$ArrayView$insertion_sort$26$(arr) {
  const _end849 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end849) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$26$(moonbitlang$core$array$$ArrayView$op_get$26$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$26$(arr, j))) {
          moonbitlang$core$array$$ArrayView$swap$26$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$insertion_sort$27$(arr) {
  const _end849 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end849) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$27$(moonbitlang$core$array$$ArrayView$op_get$27$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$27$(arr, j))) {
          moonbitlang$core$array$$ArrayView$swap$27$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$quick_sort$26$(arr, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const _p = arr$2;
    const len = _p.len;
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$ArrayView$insertion_sort$26$(arr$2);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort$26$(arr$2);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot$26$(arr$2);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort$26$(arr$2)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition$26$(arr$2, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    const _p$2 = len - _pivot | 0;
    balanced = (_pivot > _p$2 ? _p$2 : _pivot) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (moonbitlang$core$builtin$$Eq$op_equal$39$(_pred, moonbitlang$core$array$$ArrayView$op_get$26$(arr$2, _pivot))) {
        let i = _pivot;
        while (true) {
          if (i < len && moonbitlang$core$builtin$$Eq$op_equal$39$(_pred, moonbitlang$core$array$$ArrayView$op_get$26$(arr$2, i))) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$26$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$26$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$26$(arr$2, _pivot + 1 | 0, len);
    if (left.len < right.len) {
      moonbitlang$core$array$$quick_sort$26$(left, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$26$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort$26$(right, moonbitlang$core$array$$ArrayView$op_get$26$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$quick_sort$27$(arr, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const _p = arr$2;
    const len = _p.len;
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$ArrayView$insertion_sort$27$(arr$2);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort$27$(arr$2);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot$27$(arr$2);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort$27$(arr$2)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition$27$(arr$2, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    const _p$2 = len - _pivot | 0;
    balanced = (_pivot > _p$2 ? _p$2 : _pivot) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (moonbitlang$core$builtin$$Eq$op_equal$27$(_pred, moonbitlang$core$array$$ArrayView$op_get$27$(arr$2, _pivot))) {
        let i = _pivot;
        while (true) {
          if (i < len && moonbitlang$core$builtin$$Eq$op_equal$27$(_pred, moonbitlang$core$array$$ArrayView$op_get$27$(arr$2, i))) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$27$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$27$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$27$(arr$2, _pivot + 1 | 0, len);
    if (left.len < right.len) {
      moonbitlang$core$array$$quick_sort$27$(left, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$27$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort$27$(right, moonbitlang$core$array$$ArrayView$op_get$27$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$Array$sort$26$(self) {
  const len = self.length;
  moonbitlang$core$array$$quick_sort$26$(moonbitlang$core$array$$Array$op_as_view$26$(self, 0, len), undefined, moonbitlang$core$array$$get_limit(len));
}
function moonbitlang$core$array$$Array$sort$27$(self) {
  const len = self.length;
  moonbitlang$core$array$$quick_sort$27$(moonbitlang$core$array$$Array$op_as_view$27$(self, 0, len), undefined, moonbitlang$core$array$$get_limit(len));
}
function moonbitlang$core$array$$FixedArray$blit_from_bytesview(self, bytes_offset, src) {
  const src_len = src.len;
  if (bytes_offset >= 0 && ((bytes_offset + src_len | 0) - 1 | 0) < self.length) {
    let _tmp = 0;
    let _tmp$2 = bytes_offset;
    while (true) {
      const i = _tmp;
      const j = _tmp$2;
      if (i < src_len) {
        $bound_check(self, j);
        self[j] = moonbitlang$core$bytes$$View$op_get(src, i);
        _tmp = i + 1 | 0;
        _tmp$2 = j + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$push_iter$0$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$0$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$push_iter$40$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$40$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$push_iter$41$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$41$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$last$42$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const _last = self[self.length - 1 | 0];
    return _last;
  }
}
function moonbitlang$core$array$$Array$join(self, separator) {
  return moonbitlang$core$array$$ArrayView$join({ buf: self, start: 0, len: self.length }, separator);
}
function moonbitlang$core$builtin$$Eq$op_equal$43$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$44$(self.value, other.value);
}
function moonbitlang$core$builtin$$Eq$op_equal$45$(self, other) {
  const _p = self.value;
  const _p$2 = other.value;
  return _p._0 === _p$2._0 && _p._1 === _p$2._1;
}
function moonbitlang$core$sorted_set$$new$44$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$46$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$8$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$height_ge$44$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$46$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$8$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$Node$update_height$44$(self) {
  const _p = self.left;
  let _p$2;
  if (_p === undefined) {
    _p$2 = 0;
  } else {
    const _p$3 = _p;
    const _p$4 = _p$3;
    _p$2 = _p$4.height;
  }
  const _p$3 = self.right;
  let _p$4;
  if (_p$3 === undefined) {
    _p$4 = 0;
  } else {
    const _p$5 = _p$3;
    const _p$6 = _p$5;
    _p$4 = _p$6.height;
  }
  self.height = 1 + (_p$2 > _p$4 ? _p$2 : _p$4) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$46$(self) {
  const _p = self.left;
  let _p$2;
  if (_p === undefined) {
    _p$2 = 0;
  } else {
    const _p$3 = _p;
    const _p$4 = _p$3;
    _p$2 = _p$4.height;
  }
  const _p$3 = self.right;
  let _p$4;
  if (_p$3 === undefined) {
    _p$4 = 0;
  } else {
    const _p$5 = _p$3;
    const _p$6 = _p$5;
    _p$4 = _p$6.height;
  }
  self.height = 1 + (_p$2 > _p$4 ? _p$2 : _p$4) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$8$(self) {
  const _p = self.left;
  let _p$2;
  if (_p === undefined) {
    _p$2 = 0;
  } else {
    const _p$3 = _p;
    const _p$4 = _p$3;
    _p$2 = _p$4.height;
  }
  const _p$3 = self.right;
  let _p$4;
  if (_p$3 === undefined) {
    _p$4 = 0;
  } else {
    const _p$5 = _p$3;
    const _p$6 = _p$5;
    _p$4 = _p$6.height;
  }
  self.height = 1 + (_p$2 > _p$4 ? _p$2 : _p$4) | 0;
}
function moonbitlang$core$sorted_set$$rotate_l$44$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$44$(n);
  moonbitlang$core$sorted_set$$Node$update_height$44$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$46$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$46$(n);
  moonbitlang$core$sorted_set$$Node$update_height$46$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$8$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$8$(n);
  moonbitlang$core$sorted_set$$Node$update_height$8$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_r$44$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$44$(n);
  moonbitlang$core$sorted_set$$Node$update_height$44$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$46$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$46$(n);
  moonbitlang$core$sorted_set$$Node$update_height$46$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$8$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$8$(n);
  moonbitlang$core$sorted_set$$Node$update_height$8$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_lr$44$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  const v = moonbitlang$core$sorted_set$$rotate_l$44$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$44$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$46$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  const v = moonbitlang$core$sorted_set$$rotate_l$46$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$46$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$8$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  const v = moonbitlang$core$sorted_set$$rotate_l$8$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$8$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$44$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  const v = moonbitlang$core$sorted_set$$rotate_r$44$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$44$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$46$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  const v = moonbitlang$core$sorted_set$$rotate_r$46$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$46$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$8$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  const v = moonbitlang$core$sorted_set$$rotate_r$8$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$8$(n);
}
function moonbitlang$core$sorted_set$$balance$44$(root) {
  const l = root.left;
  const r = root.right;
  let hl;
  if (l === undefined) {
    hl = 0;
  } else {
    const _p = l;
    const _p$2 = _p;
    hl = _p$2.height;
  }
  let hr;
  if (r === undefined) {
    hr = 0;
  } else {
    const _p = r;
    const _p$2 = _p;
    hr = _p$2.height;
  }
  let new_root;
  if (hl > (hr + 1 | 0)) {
    let _bind;
    if (l === undefined) {
      _bind = $panic();
    } else {
      const _p = l;
      _bind = _p;
    }
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$44$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$44$(root) : moonbitlang$core$sorted_set$$rotate_lr$44$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      let _bind;
      if (r === undefined) {
        _bind = $panic();
      } else {
        const _p = r;
        _bind = _p;
      }
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$44$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$44$(root) : moonbitlang$core$sorted_set$$rotate_rl$44$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$44$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$46$(root) {
  const l = root.left;
  const r = root.right;
  let hl;
  if (l === undefined) {
    hl = 0;
  } else {
    const _p = l;
    const _p$2 = _p;
    hl = _p$2.height;
  }
  let hr;
  if (r === undefined) {
    hr = 0;
  } else {
    const _p = r;
    const _p$2 = _p;
    hr = _p$2.height;
  }
  let new_root;
  if (hl > (hr + 1 | 0)) {
    let _bind;
    if (l === undefined) {
      _bind = $panic();
    } else {
      const _p = l;
      _bind = _p;
    }
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$46$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$46$(root) : moonbitlang$core$sorted_set$$rotate_lr$46$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      let _bind;
      if (r === undefined) {
        _bind = $panic();
      } else {
        const _p = r;
        _bind = _p;
      }
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$46$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$46$(root) : moonbitlang$core$sorted_set$$rotate_rl$46$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$46$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$8$(root) {
  const l = root.left;
  const r = root.right;
  let hl;
  if (l === undefined) {
    hl = 0;
  } else {
    const _p = l;
    const _p$2 = _p;
    hl = _p$2.height;
  }
  let hr;
  if (r === undefined) {
    hr = 0;
  } else {
    const _p = r;
    const _p$2 = _p;
    hr = _p$2.height;
  }
  let new_root;
  if (hl > (hr + 1 | 0)) {
    let _bind;
    if (l === undefined) {
      _bind = $panic();
    } else {
      const _p = l;
      _bind = _p;
    }
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$8$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$8$(root) : moonbitlang$core$sorted_set$$rotate_lr$8$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      let _bind;
      if (r === undefined) {
        _bind = $panic();
      } else {
        const _p = r;
        _bind = _p;
      }
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$8$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$8$(root) : moonbitlang$core$sorted_set$$rotate_rl$8$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$8$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$new_node$44$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$46$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$8$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$add_node$44$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$44$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$44$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$44$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$44$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$44$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$44$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$46$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$46$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const _p = _n.value;
    const _p$2 = $compare_int(value._0, _p._0);
    const comp = _p$2 === 0 ? $compare_int(value._1, _p._1) : _p$2;
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$46$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$46$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$46$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$46$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$8$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$8$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = $compare_int(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$8$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$8$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$8$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$8$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$add$44$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$44$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$47$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$46$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$46$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$48$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$8$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$8$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$49$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$to_array$46$dfs$47$434(_env, root) {
  const i = _env._1;
  const arr = _env._0;
  let _tmp = root;
  while (true) {
    const root$2 = _tmp;
    if (root$2 === undefined) {
      return;
    } else {
      const _Some = root$2;
      const _root = _Some;
      moonbitlang$core$sorted_set$$to_array$46$dfs$47$434(_env, _root.left);
      moonbitlang$core$array$$Array$op_set$8$(arr, i.val, _root.value);
      i.val = i.val + 1 | 0;
      _tmp = _root.right;
      continue;
    }
  }
}
function moonbitlang$core$sorted_set$$T$to_array$8$(self) {
  if (self.size === 0) {
    return [];
  } else {
    const _p = self.root;
    let _tmp;
    if (_p === undefined) {
      _tmp = $panic();
    } else {
      const _p$2 = _p;
      _tmp = _p$2;
    }
    const padding = _tmp.value;
    const arr = moonbitlang$core$array$$Array$make$8$(self.size, padding);
    const i = { val: 0 };
    const _env = { _0: arr, _1: i };
    moonbitlang$core$sorted_set$$to_array$46$dfs$47$434(_env, self.root);
    return arr;
  }
}
function moonbitlang$core$sorted_set$$iter$46$go$47$448(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$448(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$44$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$448(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$iter$46$go$47$462(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$462(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$46$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$462(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$iter$46$go$47$476(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$476(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$8$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$476(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$from_iter$8$(iter) {
  const s = moonbitlang$core$sorted_set$$new$8$();
  moonbitlang$core$builtin$$Iter$each$50$(iter, (e) => {
    moonbitlang$core$sorted_set$$T$add$8$(s, e);
  });
  return s;
}
function moonbitlang$core$set$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$set$$Set$new$51$(capacity) {
  const capacity$2 = moonbitlang$core$set$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined });
  const _bind$5 = undefined;
  const _bind$6 = undefined;
  return { entries: _bind$3, list: _bind$4, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$5, tail: _bind$6 };
}
function moonbitlang$core$set$$Set$add_entry_to_tail$51$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$set$$Set$add$51$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$51$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$52$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$51$(self, insert_entry);
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$53$(_curr_entry.key, entry.key)) {
        break;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, idx);
        _tmp$8[idx] = entry;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        _tmp = i + 1 | 0;
        _tmp$2 = idx + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        _tmp = i + 1 | 0;
        _tmp$2 = idx + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$set$$Set$grow$51$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      moonbitlang$core$set$$Set$add$51$(self, _key);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$set$$Set$add_and_check$51$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$51$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$52$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$51$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return true;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$53$(_curr_entry.key, entry.key)) {
        return false;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, idx);
        _tmp$8[idx] = entry;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        _tmp = i + 1 | 0;
        _tmp$2 = idx + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        _tmp = i + 1 | 0;
        _tmp$2 = idx + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$8$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$20$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$54$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$55$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$30$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$core$immut$sorted_set$$create$8$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$8$(left) + moonbitlang$core$immut$sorted_set$$T$size$8$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$20$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$20$(left) + moonbitlang$core$immut$sorted_set$$T$size$20$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$54$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$54$(left) + moonbitlang$core$immut$sorted_set$$T$size$54$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$55$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$55$(left) + moonbitlang$core$immut$sorted_set$$T$size$55$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$30$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$30$(left) + moonbitlang$core$immut$sorted_set$$T$size$30$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$balance$8$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$8$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$8$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$8$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$20$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$8$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$8$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$8$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$8$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$20$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$8$(moonbitlang$core$immut$sorted_set$$create$8$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$8$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$20$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$8$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$8$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$8$(moonbitlang$core$immut$sorted_set$$create$8$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$20$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$8$(moonbitlang$core$immut$sorted_set$$create$8$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$8$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$8$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$20$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$20$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$20$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$20$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$21$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$20$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$20$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$20$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$20$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$21$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$20$(moonbitlang$core$immut$sorted_set$$create$20$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$20$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$21$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$20$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$20$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$20$(moonbitlang$core$immut$sorted_set$$create$20$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$21$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$20$(moonbitlang$core$immut$sorted_set$$create$20$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$20$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$20$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$54$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$54$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$54$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$54$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$28$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$54$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$54$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$54$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$54$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$28$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$54$(moonbitlang$core$immut$sorted_set$$create$54$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$54$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$28$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$54$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$54$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$54$(moonbitlang$core$immut$sorted_set$$create$54$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$28$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$54$(moonbitlang$core$immut$sorted_set$$create$54$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$54$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$54$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$55$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$55$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$55$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$55$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$31$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$55$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$55$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$55$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$55$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$31$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$55$(moonbitlang$core$immut$sorted_set$$create$55$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$55$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$31$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$55$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$55$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$55$(moonbitlang$core$immut$sorted_set$$create$55$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$31$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$55$(moonbitlang$core$immut$sorted_set$$create$55$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$55$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$55$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$30$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$30$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$30$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$30$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$33$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$30$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$30$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$30$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$30$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$33$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$30$(moonbitlang$core$immut$sorted_set$$create$30$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$30$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$33$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$30$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$30$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$30$(moonbitlang$core$immut$sorted_set$$create$30$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$33$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$30$(moonbitlang$core$immut$sorted_set$$create$30$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$30$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$30$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$8$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = $compare_int(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$8$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$8$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$8$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$8$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$20$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$56$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$20$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$20$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$20$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$20$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$54$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$54$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$54$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$54$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$54$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$54$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$55$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$57$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$55$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$55$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$55$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$55$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$30$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = $compare_int(value.id, _node_value.id);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$30$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$30$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$30$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$30$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$from_array$8$(array) {
  let _tmp = array.length - 1 | 0;
  let _tmp$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  while (true) {
    const i = _tmp;
    const set = _tmp$2;
    if (i >= 0) {
      _tmp = i - 1 | 0;
      _tmp$2 = moonbitlang$core$immut$sorted_set$$T$add$8$(set, moonbitlang$core$array$$Array$op_get$8$(array, i));
      continue;
    } else {
      return set;
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$remove_min$20$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$21$("remove_min: empty ImmutableSet");
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    if (_left.$tag === 0) {
      return _right;
    } else {
      return moonbitlang$core$immut$sorted_set$$balance$20$(moonbitlang$core$immut$sorted_set$$T$remove_min$20$(_left), _value, _right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$remove_min$8$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$20$("remove_min: empty ImmutableSet");
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    if (_left.$tag === 0) {
      return _right;
    } else {
      return moonbitlang$core$immut$sorted_set$$balance$8$(moonbitlang$core$immut$sorted_set$$T$remove_min$8$(_left), _value, _right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$min$20$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$20$("min: there are no values in sorted_set.");
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _value = _Node._3;
      if (_left.$tag === 0) {
        return _value;
      } else {
        _tmp = _left;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$min$8$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$8$("min: there are no values in sorted_set.");
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _value = _Node._3;
      if (_left.$tag === 0) {
        return _value;
      } else {
        _tmp = _left;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$min$30$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$30$("min: there are no values in sorted_set.");
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _value = _Node._3;
      if (_left.$tag === 0) {
        return _value;
      } else {
        _tmp = _left;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$merge$20$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      return moonbitlang$core$immut$sorted_set$$balance$20$(self, moonbitlang$core$immut$sorted_set$$T$min$20$(other), moonbitlang$core$immut$sorted_set$$T$remove_min$20$(other));
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$remove$20$(self, value) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$;
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$56$(value, _node_value);
    if (compare_result === 0) {
      return moonbitlang$core$immut$sorted_set$$T$merge$20$(_left, _right);
    } else {
      if (compare_result < 0) {
        const new_left = moonbitlang$core$immut$sorted_set$$T$remove$20$(_left, value);
        return _left === new_left ? self : moonbitlang$core$immut$sorted_set$$balance$20$(new_left, _node_value, _right);
      } else {
        const new_right = moonbitlang$core$immut$sorted_set$$T$remove$20$(_right, value);
        return _right === new_right ? self : moonbitlang$core$immut$sorted_set$$balance$20$(_left, _node_value, new_right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$max$30$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$30$("max: there are no values in ImmutableSet.");
    } else {
      const _Node = self$2;
      const _right = _Node._1;
      const _value = _Node._3;
      if (_right.$tag === 0) {
        return _value;
      } else {
        _tmp = _right;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_max_value$8$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$8$(_left, _node_value, moonbitlang$core$immut$sorted_set$$T$add_max_value$8$(_right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_max_value$55$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$55$(_left, _node_value, moonbitlang$core$immut$sorted_set$$T$add_max_value$55$(_right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_max_value$30$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$30$(_left, _node_value, moonbitlang$core$immut$sorted_set$$T$add_max_value$30$(_right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_min_value$8$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$8$(moonbitlang$core$immut$sorted_set$$T$add_min_value$8$(_left, value), _node_value, _right);
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_min_value$55$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$55$(moonbitlang$core$immut$sorted_set$$T$add_min_value$55$(_left, value), _node_value, _right);
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_min_value$30$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$30$(moonbitlang$core$immut$sorted_set$$T$add_min_value$30$(_left, value), _node_value, _right);
  }
}
function moonbitlang$core$immut$sorted_set$$join$8$(left, value, right) {
  if (left.$tag === 0) {
    return moonbitlang$core$immut$sorted_set$$T$add_min_value$8$(right, value);
  } else {
    if (right.$tag === 0) {
      return moonbitlang$core$immut$sorted_set$$T$add_max_value$8$(left, value);
    } else {
      const _Node = left;
      const _ll = _Node._0;
      const _lv = _Node._3;
      const _lr = _Node._1;
      const _ls = _Node._2;
      const _Node$2 = right;
      const _rl = _Node$2._0;
      const _rv = _Node$2._3;
      const _rr = _Node$2._1;
      const _rs = _Node$2._2;
      return _ls > (Math.imul(_rs, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$8$(_ll, _lv, moonbitlang$core$immut$sorted_set$$join$8$(_lr, value, right)) : _rs > (Math.imul(_ls, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$8$(moonbitlang$core$immut$sorted_set$$join$8$(left, value, _rl), _rv, _rr) : moonbitlang$core$immut$sorted_set$$create$8$(left, value, right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$join$55$(left, value, right) {
  if (left.$tag === 0) {
    return moonbitlang$core$immut$sorted_set$$T$add_min_value$55$(right, value);
  } else {
    if (right.$tag === 0) {
      return moonbitlang$core$immut$sorted_set$$T$add_max_value$55$(left, value);
    } else {
      const _Node = left;
      const _ll = _Node._0;
      const _lv = _Node._3;
      const _lr = _Node._1;
      const _ls = _Node._2;
      const _Node$2 = right;
      const _rl = _Node$2._0;
      const _rv = _Node$2._3;
      const _rr = _Node$2._1;
      const _rs = _Node$2._2;
      return _ls > (Math.imul(_rs, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$55$(_ll, _lv, moonbitlang$core$immut$sorted_set$$join$55$(_lr, value, right)) : _rs > (Math.imul(_ls, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$55$(moonbitlang$core$immut$sorted_set$$join$55$(left, value, _rl), _rv, _rr) : moonbitlang$core$immut$sorted_set$$create$55$(left, value, right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$join$30$(left, value, right) {
  if (left.$tag === 0) {
    return moonbitlang$core$immut$sorted_set$$T$add_min_value$30$(right, value);
  } else {
    if (right.$tag === 0) {
      return moonbitlang$core$immut$sorted_set$$T$add_max_value$30$(left, value);
    } else {
      const _Node = left;
      const _ll = _Node._0;
      const _lv = _Node._3;
      const _lr = _Node._1;
      const _ls = _Node._2;
      const _Node$2 = right;
      const _rl = _Node$2._0;
      const _rv = _Node$2._3;
      const _rr = _Node$2._1;
      const _rs = _Node$2._2;
      return _ls > (Math.imul(_rs, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$30$(_ll, _lv, moonbitlang$core$immut$sorted_set$$join$30$(_lr, value, right)) : _rs > (Math.imul(_ls, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$30$(moonbitlang$core$immut$sorted_set$$join$30$(left, value, _rl), _rv, _rr) : moonbitlang$core$immut$sorted_set$$create$30$(left, value, right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$split$8$(self, divide) {
  if (self.$tag === 0) {
    return { _0: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, _1: false, _2: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$ };
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    const compare_result = $compare_int(divide, _value);
    if (compare_result === 0) {
      return { _0: _left, _1: true, _2: _right };
    } else {
      if (compare_result < 0) {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$8$(_left, divide);
        const _left_left = _bind._0;
        const _present = _bind._1;
        const _right_left = _bind._2;
        return { _0: _left_left, _1: _present, _2: moonbitlang$core$immut$sorted_set$$join$8$(_right_left, _value, _right) };
      } else {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$8$(_right, divide);
        const _left_right = _bind._0;
        const _present = _bind._1;
        const _right_right = _bind._2;
        return { _0: moonbitlang$core$immut$sorted_set$$join$8$(_left, _value, _left_right), _1: _present, _2: _right_right };
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$split$55$(self, divide) {
  if (self.$tag === 0) {
    return { _0: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, _1: false, _2: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$ };
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$57$(divide, _value);
    if (compare_result === 0) {
      return { _0: _left, _1: true, _2: _right };
    } else {
      if (compare_result < 0) {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$55$(_left, divide);
        const _left_left = _bind._0;
        const _present = _bind._1;
        const _right_left = _bind._2;
        return { _0: _left_left, _1: _present, _2: moonbitlang$core$immut$sorted_set$$join$55$(_right_left, _value, _right) };
      } else {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$55$(_right, divide);
        const _left_right = _bind._0;
        const _present = _bind._1;
        const _right_right = _bind._2;
        return { _0: moonbitlang$core$immut$sorted_set$$join$55$(_left, _value, _left_right), _1: _present, _2: _right_right };
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$split$30$(self, divide) {
  if (self.$tag === 0) {
    return { _0: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, _1: false, _2: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$ };
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    const compare_result = $compare_int(divide.id, _value.id);
    if (compare_result === 0) {
      return { _0: _left, _1: true, _2: _right };
    } else {
      if (compare_result < 0) {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$30$(_left, divide);
        const _left_left = _bind._0;
        const _present = _bind._1;
        const _right_left = _bind._2;
        return { _0: _left_left, _1: _present, _2: moonbitlang$core$immut$sorted_set$$join$30$(_right_left, _value, _right) };
      } else {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$30$(_right, divide);
        const _left_right = _bind._0;
        const _present = _bind._1;
        const _right_right = _bind._2;
        return { _0: moonbitlang$core$immut$sorted_set$$join$30$(_left, _value, _left_right), _1: _present, _2: _right_right };
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$is_empty$20$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$immut$sorted_set$$T$is_empty$8$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$immut$sorted_set$$T$contains$20$(self, value) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return false;
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _node_value = _Node._3;
      const compare_result = moonbitlang$core$builtin$$Compare$compare$56$(value, _node_value);
      if (compare_result === 0) {
        return true;
      } else {
        _tmp = compare_result < 0 ? _left : _right;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$contains$8$(self, value) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return false;
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _node_value = _Node._3;
      const compare_result = $compare_int(value, _node_value);
      if (compare_result === 0) {
        return true;
      } else {
        _tmp = compare_result < 0 ? _left : _right;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$union$8$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _s1 = _Node._2;
      const _Node$2 = other;
      const _l2 = _Node$2._0;
      const _v2 = _Node$2._3;
      const _r2 = _Node$2._1;
      const _s2 = _Node$2._2;
      if (_s1 >= _s2) {
        if (_s2 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$8$(self, _v2);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$8$(other, _v1);
          const _l2$2 = _bind._0;
          const _r2$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$8$(moonbitlang$core$immut$sorted_set$$T$union$8$(_l1, _l2$2), _v1, moonbitlang$core$immut$sorted_set$$T$union$8$(_r1, _r2$2));
        }
      } else {
        if (_s1 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$8$(other, _v1);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$8$(self, _v2);
          const _l1$2 = _bind._0;
          const _r1$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$8$(moonbitlang$core$immut$sorted_set$$T$union$8$(_l1$2, _l2), _v2, moonbitlang$core$immut$sorted_set$$T$union$8$(_r1$2, _r2));
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$union$55$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _s1 = _Node._2;
      const _Node$2 = other;
      const _l2 = _Node$2._0;
      const _v2 = _Node$2._3;
      const _r2 = _Node$2._1;
      const _s2 = _Node$2._2;
      if (_s1 >= _s2) {
        if (_s2 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$55$(self, _v2);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$55$(other, _v1);
          const _l2$2 = _bind._0;
          const _r2$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$55$(moonbitlang$core$immut$sorted_set$$T$union$55$(_l1, _l2$2), _v1, moonbitlang$core$immut$sorted_set$$T$union$55$(_r1, _r2$2));
        }
      } else {
        if (_s1 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$55$(other, _v1);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$55$(self, _v2);
          const _l1$2 = _bind._0;
          const _r1$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$55$(moonbitlang$core$immut$sorted_set$$T$union$55$(_l1$2, _l2), _v2, moonbitlang$core$immut$sorted_set$$T$union$55$(_r1$2, _r2));
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$union$30$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _s1 = _Node._2;
      const _Node$2 = other;
      const _l2 = _Node$2._0;
      const _v2 = _Node$2._3;
      const _r2 = _Node$2._1;
      const _s2 = _Node$2._2;
      if (_s1 >= _s2) {
        if (_s2 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$30$(self, _v2);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$30$(other, _v1);
          const _l2$2 = _bind._0;
          const _r2$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$30$(moonbitlang$core$immut$sorted_set$$T$union$30$(_l1, _l2$2), _v1, moonbitlang$core$immut$sorted_set$$T$union$30$(_r1, _r2$2));
        }
      } else {
        if (_s1 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$30$(other, _v1);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$30$(self, _v2);
          const _l1$2 = _bind._0;
          const _r1$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$30$(moonbitlang$core$immut$sorted_set$$T$union$30$(_l1$2, _l2), _v2, moonbitlang$core$immut$sorted_set$$T$union$30$(_r1$2, _r2));
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Add$op_add$56$(self, other) {
  return moonbitlang$core$immut$sorted_set$$T$union$8$(self, other);
}
function moonbitlang$core$builtin$$Add$op_add$58$(self, other) {
  return moonbitlang$core$immut$sorted_set$$T$union$55$(self, other);
}
function moonbitlang$core$immut$sorted_set$$T$concat$8$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      return moonbitlang$core$immut$sorted_set$$join$8$(self, moonbitlang$core$immut$sorted_set$$T$min$8$(other), moonbitlang$core$immut$sorted_set$$T$remove_min$8$(other));
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$intersection$8$(self, other) {
  _L: {
    if (self.$tag === 0) {
      break _L;
    } else {
      if (other.$tag === 0) {
        break _L;
      } else {
        const _Node = self;
        const _l1 = _Node._0;
        const _v1 = _Node._3;
        const _r1 = _Node._1;
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$8$(other, _v1);
        const _l2 = _bind._0;
        const _x = _bind._1;
        if (_x === false) {
          const _r2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$T$concat$8$(moonbitlang$core$immut$sorted_set$$T$intersection$8$(_l1, _l2), moonbitlang$core$immut$sorted_set$$T$intersection$8$(_r1, _r2));
        } else {
          const _r2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$8$(moonbitlang$core$immut$sorted_set$$T$intersection$8$(_l1, _l2), _v1, moonbitlang$core$immut$sorted_set$$T$intersection$8$(_r1, _r2));
        }
      }
    }
  }
  return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
}
function moonbitlang$core$immut$sorted_set$$T$difference$8$(self, other) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _bind = moonbitlang$core$immut$sorted_set$$T$split$8$(other, _v1);
      const _l2 = _bind._0;
      const _x = _bind._1;
      if (_x === false) {
        const _r2 = _bind._2;
        return moonbitlang$core$immut$sorted_set$$join$8$(moonbitlang$core$immut$sorted_set$$T$difference$8$(_l1, _l2), _v1, moonbitlang$core$immut$sorted_set$$T$difference$8$(_r1, _r2));
      } else {
        const _r2 = _bind._2;
        return moonbitlang$core$immut$sorted_set$$T$concat$8$(moonbitlang$core$immut$sorted_set$$T$difference$8$(_l1, _l2), moonbitlang$core$immut$sorted_set$$T$difference$8$(_r1, _r2));
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$subset$8$(self, other) {
  let _tmp = self;
  let _tmp$2 = other;
  while (true) {
    const self$2 = _tmp;
    const other$2 = _tmp$2;
    if (self$2.$tag === 0) {
      return true;
    } else {
      if (other$2.$tag === 0) {
        return false;
      } else {
        const _Node = self$2;
        const _l1 = _Node._0;
        const _v1 = _Node._3;
        const _r1 = _Node._1;
        const _Node$2 = other$2;
        const _l2 = _Node$2._0;
        const _v2 = _Node$2._3;
        const _r2 = _Node$2._1;
        const compare_result = $compare_int(_v1, _v2);
        if (compare_result === 0) {
          if (moonbitlang$core$immut$sorted_set$$T$subset$8$(_l1, _l2)) {
            _tmp = _r1;
            _tmp$2 = _r2;
            continue;
          } else {
            return false;
          }
        } else {
          if (compare_result < 0) {
            if (moonbitlang$core$immut$sorted_set$$T$subset$8$(new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$(_l1, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, _v1), _l2)) {
              _tmp = _r1;
              _tmp$2 = self$2;
              continue;
            } else {
              return false;
            }
          } else {
            if (moonbitlang$core$immut$sorted_set$$T$subset$8$(new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, _r1, 1, _v1), _r2)) {
              _tmp = _l1;
              _tmp$2 = self$2;
              continue;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$try_join$30$(left, value, right) {
  let _tmp;
  let _tmp$2;
  if (moonbitlang$core$builtin$$Eq$op_equal$59$(left, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$)) {
    _tmp$2 = true;
  } else {
    const _p = moonbitlang$core$immut$sorted_set$$T$max$30$(left);
    _tmp$2 = $compare_int(_p.id, value.id) < 0;
  }
  if (_tmp$2) {
    let _tmp$3;
    if (moonbitlang$core$builtin$$Eq$op_equal$59$(right, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$)) {
      _tmp$3 = true;
    } else {
      const _p = moonbitlang$core$immut$sorted_set$$T$min$30$(right);
      _tmp$3 = $compare_int(value.id, _p.id) < 0;
    }
    _tmp = _tmp$3;
  } else {
    _tmp = false;
  }
  if (_tmp) {
    return moonbitlang$core$immut$sorted_set$$join$30$(left, value, right);
  } else {
    return moonbitlang$core$immut$sorted_set$$T$union$30$(left, moonbitlang$core$immut$sorted_set$$T$add$30$(right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$map$60$(self, f) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$;
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$try_join$30$(moonbitlang$core$immut$sorted_set$$T$map$60$(_left, f), f(_value), moonbitlang$core$immut$sorted_set$$T$map$60$(_right, f));
  }
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1023(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1023(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$8$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1023(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1036(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1036(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$30$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1036(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1049(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1049(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$20$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1049(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1062(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1062(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$55$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1062(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1075(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1075(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$54$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1075(yield_, self);
  return _p;
}
function moonbitlang$core$builtin$$Hash$hash_combine$56$(self, hasher) {
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$8$(self);
  _bind((t) => {
    moonbitlang$core$builtin$$Hash$hash_combine$8$(t, hasher);
    return 1;
  });
}
function moonbitlang$core$immut$sorted_set$$from_iter$8$(iter) {
  const _bind = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  const _acc = { val: _bind };
  iter((_p) => {
    const s = _acc.val;
    _acc.val = moonbitlang$core$immut$sorted_set$$T$add$8$(s, _p);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$8$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      const _self = self;
      moonbitlang$core$array$$Array$push$20$(_self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$30$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      const _self = self;
      moonbitlang$core$array$$Array$push$33$(_self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$new$8$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$8$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$new$30$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$30$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(self) {
  const _s = self;
  const _bind = moonbitlang$core$array$$Array$pop$20$(_s);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _right = _Node._1;
      const _value = _Node._3;
      moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$8$(self, _right);
      return _value;
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$next$30$(self) {
  const _s = self;
  const _bind = moonbitlang$core$array$$Array$pop$33$(_s);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _right = _Node._1;
      const _value = _Node._3;
      moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$30$(self, _right);
      return _value;
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$56$(self, other) {
  const iter = moonbitlang$core$immut$sorted_set$$InorderIterator$new$8$(self);
  const iter1 = moonbitlang$core$immut$sorted_set$$InorderIterator$new$8$(other);
  let _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (_a === _b) {
          _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$59$(self, other) {
  const iter = moonbitlang$core$immut$sorted_set$$InorderIterator$new$30$(self);
  const iter1 = moonbitlang$core$immut$sorted_set$$InorderIterator$new$30$(other);
  let _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$30$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$30$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (_a.id === _b.id) {
          _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$30$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$30$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$56$(self, other) {
  const iter = moonbitlang$core$immut$sorted_set$$InorderIterator$new$8$(self);
  const iter1 = moonbitlang$core$immut$sorted_set$$InorderIterator$new$8$(other);
  let _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined ? 0 : -1;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        const cmp = $compare_int(_a, _b);
        if (cmp === 0) {
          _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$8$(iter1);
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$core$hashset$$new$0$(capacity) {
  const _bind = (Math.imul(capacity, 13) | 0) / 16 | 0;
  const _bind$2 = $make_array_len_and_init(capacity, undefined);
  return { entries: _bind$2, size: 0, capacity: capacity, grow_at: _bind };
}
function moonbitlang$core$hashset$$T$index$0$(self, hash) {
  return (hash < 0 ? -hash | 0 : hash) & (self.capacity - 1 | 0);
}
function moonbitlang$core$hashset$$T$add$0$(self, key) {
  if (self.capacity === 0 || self.size >= self.grow_at) {
    moonbitlang$core$hashset$$T$grow$0$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$61$(key);
  const entry = { psl: 0, hash: hash, key: key };
  let _tmp = 0;
  let _tmp$2 = moonbitlang$core$hashset$$T$index$0$(self, hash);
  let _tmp$3 = entry;
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    const _param_2 = _tmp$3;
    if (_param_0 === self.capacity) {
      $panic();
    }
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, _param_1);
    const _bind = _tmp$4[_param_1];
    if (_bind === undefined) {
      const _tmp$5 = self.entries;
      $bound_check(_tmp$5, _param_1);
      _tmp$5[_param_1] = _param_2;
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === _param_2.hash && _curr_entry.key === _param_2.key) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, _param_1);
        _tmp$5[_param_1] = _param_2;
        break;
      }
      if (_param_2.psl > _curr_entry.psl) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, _param_1);
        _tmp$5[_param_1] = _param_2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        _tmp = _param_0 + 1 | 0;
        _tmp$2 = _param_1 + 1 & (self.capacity - 1 | 0);
        _tmp$3 = _curr_entry;
        continue;
      }
      _param_2.psl = _param_2.psl + 1 | 0;
      _tmp = _param_0 + 1 | 0;
      _tmp$2 = _param_1 + 1 & (self.capacity - 1 | 0);
      continue;
    }
  }
}
function moonbitlang$core$hashset$$T$grow$0$(self) {
  if (self.capacity === 0) {
    self.capacity = 8;
    const _p = self.capacity;
    self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
    self.size = 0;
    self.entries = $make_array_len_and_init(self.capacity, undefined);
    return undefined;
  }
  const old_entries = self.entries;
  self.entries = $make_array_len_and_init(Math.imul(self.capacity, 2) | 0, undefined);
  self.capacity = Math.imul(self.capacity, 2) | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  const _end53 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end53) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        moonbitlang$core$hashset$$T$add$0$(self, _key);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashset$$from_array$0$(arr) {
  const m = moonbitlang$core$hashset$$new$0$(8);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$hashset$$T$add$0$(m, e);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$hashset$$T$contains$0$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$61$(key);
  let _tmp = 0;
  let _tmp$2 = moonbitlang$core$hashset$$T$index$0$(self, hash);
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    if (i < self.capacity) {
      const _tmp$3 = self.entries;
      $bound_check(_tmp$3, idx);
      const _bind = _tmp$3[idx];
      if (_bind === undefined) {
        return false;
      } else {
        const _Some = _bind;
        const _entry = _Some;
        if (_entry.hash === hash && _entry.key === key) {
          return true;
        }
        if (i > _entry.psl) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & (self.capacity - 1 | 0);
      continue;
    } else {
      break;
    }
  }
  return false;
}
function moonbitlang$core$strconv$$base_err$62$() {
  return new Result$Err$7$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$base_err_str));
}
function moonbitlang$core$strconv$$check_and_consume_base(view, base) {
  if (base === 0) {
    _L: {
      let rest;
      _L$2: {
        let rest$2;
        _L$3: {
          let rest$3;
          _L$4: {
            if (moonbitlang$core$string$$String$char_length_ge(view.str, 2, view.start, view.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 0, view.start, view.end));
              if (_x === 48) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 1, view.start, view.end));
                switch (_x$2) {
                  case 120: {
                    const _tmp = view.str;
                    const _bind = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$2;
                    if (_bind === undefined) {
                      _tmp$2 = view.end;
                    } else {
                      const _Some = _bind;
                      _tmp$2 = _Some;
                    }
                    const _tmp$3 = _tmp$2;
                    const _x$3 = { str: _tmp, start: _tmp$3, end: view.end };
                    rest$3 = _x$3;
                    break _L$4;
                  }
                  case 88: {
                    const _tmp$4 = view.str;
                    const _bind$2 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$5;
                    if (_bind$2 === undefined) {
                      _tmp$5 = view.end;
                    } else {
                      const _Some = _bind$2;
                      _tmp$5 = _Some;
                    }
                    const _tmp$6 = _tmp$5;
                    const _x$4 = { str: _tmp$4, start: _tmp$6, end: view.end };
                    rest$3 = _x$4;
                    break _L$4;
                  }
                  case 111: {
                    const _tmp$7 = view.str;
                    const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$8;
                    if (_bind$3 === undefined) {
                      _tmp$8 = view.end;
                    } else {
                      const _Some = _bind$3;
                      _tmp$8 = _Some;
                    }
                    const _tmp$9 = _tmp$8;
                    const _x$5 = { str: _tmp$7, start: _tmp$9, end: view.end };
                    rest$2 = _x$5;
                    break _L$3;
                  }
                  case 79: {
                    const _tmp$10 = view.str;
                    const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$11;
                    if (_bind$4 === undefined) {
                      _tmp$11 = view.end;
                    } else {
                      const _Some = _bind$4;
                      _tmp$11 = _Some;
                    }
                    const _tmp$12 = _tmp$11;
                    const _x$6 = { str: _tmp$10, start: _tmp$12, end: view.end };
                    rest$2 = _x$6;
                    break _L$3;
                  }
                  case 98: {
                    const _tmp$13 = view.str;
                    const _bind$5 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$14;
                    if (_bind$5 === undefined) {
                      _tmp$14 = view.end;
                    } else {
                      const _Some = _bind$5;
                      _tmp$14 = _Some;
                    }
                    const _tmp$15 = _tmp$14;
                    const _x$7 = { str: _tmp$13, start: _tmp$15, end: view.end };
                    rest = _x$7;
                    break _L$2;
                  }
                  case 66: {
                    const _tmp$16 = view.str;
                    const _bind$6 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$17;
                    if (_bind$6 === undefined) {
                      _tmp$17 = view.end;
                    } else {
                      const _Some = _bind$6;
                      _tmp$17 = _Some;
                    }
                    const _tmp$18 = _tmp$17;
                    const _x$8 = { str: _tmp$16, start: _tmp$18, end: view.end };
                    rest = _x$8;
                    break _L$2;
                  }
                  default: {
                    break _L;
                  }
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return new Result$Ok$7$({ _0: 16, _1: rest$3, _2: true });
        }
        return new Result$Ok$7$({ _0: 8, _1: rest$2, _2: true });
      }
      return new Result$Ok$7$({ _0: 2, _1: rest, _2: true });
    }
    return new Result$Ok$7$({ _0: 10, _1: view, _2: false });
  } else {
    _L: {
      let rest;
      _L$2: {
        let rest$2;
        _L$3: {
          let rest$3;
          _L$4: {
            if (moonbitlang$core$string$$String$char_length_ge(view.str, 2, view.start, view.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 0, view.start, view.end));
              if (_x === 48) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 1, view.start, view.end));
                switch (_x$2) {
                  case 120: {
                    const _tmp = view.str;
                    const _bind = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$2;
                    if (_bind === undefined) {
                      _tmp$2 = view.end;
                    } else {
                      const _Some = _bind;
                      _tmp$2 = _Some;
                    }
                    const _tmp$3 = _tmp$2;
                    const _x$3 = { str: _tmp, start: _tmp$3, end: view.end };
                    if (base === 16) {
                      rest$3 = _x$3;
                      break _L$4;
                    } else {
                      break _L;
                    }
                  }
                  case 88: {
                    const _tmp$4 = view.str;
                    const _bind$2 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$5;
                    if (_bind$2 === undefined) {
                      _tmp$5 = view.end;
                    } else {
                      const _Some = _bind$2;
                      _tmp$5 = _Some;
                    }
                    const _tmp$6 = _tmp$5;
                    const _x$4 = { str: _tmp$4, start: _tmp$6, end: view.end };
                    if (base === 16) {
                      rest$3 = _x$4;
                      break _L$4;
                    } else {
                      break _L;
                    }
                  }
                  case 111: {
                    const _tmp$7 = view.str;
                    const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$8;
                    if (_bind$3 === undefined) {
                      _tmp$8 = view.end;
                    } else {
                      const _Some = _bind$3;
                      _tmp$8 = _Some;
                    }
                    const _tmp$9 = _tmp$8;
                    const _x$5 = { str: _tmp$7, start: _tmp$9, end: view.end };
                    if (base === 8) {
                      rest$2 = _x$5;
                      break _L$3;
                    } else {
                      break _L;
                    }
                  }
                  case 79: {
                    const _tmp$10 = view.str;
                    const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$11;
                    if (_bind$4 === undefined) {
                      _tmp$11 = view.end;
                    } else {
                      const _Some = _bind$4;
                      _tmp$11 = _Some;
                    }
                    const _tmp$12 = _tmp$11;
                    const _x$6 = { str: _tmp$10, start: _tmp$12, end: view.end };
                    if (base === 8) {
                      rest$2 = _x$6;
                      break _L$3;
                    } else {
                      break _L;
                    }
                  }
                  case 98: {
                    const _tmp$13 = view.str;
                    const _bind$5 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$14;
                    if (_bind$5 === undefined) {
                      _tmp$14 = view.end;
                    } else {
                      const _Some = _bind$5;
                      _tmp$14 = _Some;
                    }
                    const _tmp$15 = _tmp$14;
                    const _x$7 = { str: _tmp$13, start: _tmp$15, end: view.end };
                    if (base === 2) {
                      rest = _x$7;
                      break _L$2;
                    } else {
                      break _L;
                    }
                  }
                  case 66: {
                    const _tmp$16 = view.str;
                    const _bind$6 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$17;
                    if (_bind$6 === undefined) {
                      _tmp$17 = view.end;
                    } else {
                      const _Some = _bind$6;
                      _tmp$17 = _Some;
                    }
                    const _tmp$18 = _tmp$17;
                    const _x$8 = { str: _tmp$16, start: _tmp$18, end: view.end };
                    if (base === 2) {
                      rest = _x$8;
                      break _L$2;
                    } else {
                      break _L;
                    }
                  }
                  default: {
                    break _L;
                  }
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return new Result$Ok$7$({ _0: 16, _1: rest$3, _2: true });
        }
        return new Result$Ok$7$({ _0: 8, _1: rest$2, _2: true });
      }
      return new Result$Ok$7$({ _0: 2, _1: rest, _2: true });
    }
    return base >= 2 && base <= 36 ? new Result$Ok$7$({ _0: base, _1: view, _2: false }) : moonbitlang$core$strconv$$base_err$62$();
  }
}
function moonbitlang$core$strconv$$range_err$4$() {
  return new Result$Err$8$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$range_err$63$() {
  return new Result$Err$9$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$syntax_err$8$() {
  return new Result$Err$10$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$syntax_err$63$() {
  return new Result$Err$9$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$overflow_threshold(base, neg) {
  return !neg ? (base === 10 ? moonbitlang$core$builtin$$Add$op_add$63$(moonbitlang$core$builtin$$Div$op_div$63$($9223372036854775807L, $10L), $1L) : base === 16 ? moonbitlang$core$builtin$$Add$op_add$63$(moonbitlang$core$builtin$$Div$op_div$63$($9223372036854775807L, $16L), $1L) : moonbitlang$core$builtin$$Add$op_add$63$(moonbitlang$core$builtin$$Div$op_div$63$($9223372036854775807L, moonbitlang$core$int$$Int$to_int64(base)), $1L)) : base === 10 ? moonbitlang$core$builtin$$Div$op_div$63$($_9223372036854775808L, $10L) : base === 16 ? moonbitlang$core$builtin$$Div$op_div$63$($_9223372036854775808L, $16L) : moonbitlang$core$builtin$$Div$op_div$63$($_9223372036854775808L, moonbitlang$core$int$$Int$to_int64(base));
}
function moonbitlang$core$strconv$$parse_int64(str, base) {
  if (moonbitlang$core$builtin$$op_notequal$19$(str, { str: moonbitlang$core$strconv$$parse_int64$46$42$bind$124$628, start: 0, end: moonbitlang$core$strconv$$parse_int64$46$42$bind$124$628.length })) {
    let _bind;
    let rest;
    _L: {
      _L$2: {
        const _bind$2 = moonbitlang$core$string$$StringView$view(str, 0, undefined);
        if (moonbitlang$core$string$$String$char_length_ge(_bind$2.str, 1, _bind$2.start, _bind$2.end)) {
          const _x = moonbitlang$core$string$$String$unsafe_char_at(_bind$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 0, _bind$2.start, _bind$2.end));
          switch (_x) {
            case 43: {
              const _tmp = _bind$2.str;
              const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 1, _bind$2.start, _bind$2.end);
              let _tmp$2;
              if (_bind$3 === undefined) {
                _tmp$2 = _bind$2.end;
              } else {
                const _Some = _bind$3;
                _tmp$2 = _Some;
              }
              const _tmp$3 = _tmp$2;
              const _x$2 = { str: _tmp, start: _tmp$3, end: _bind$2.end };
              _bind = { _0: false, _1: _x$2 };
              break;
            }
            case 45: {
              const _tmp$4 = _bind$2.str;
              const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 1, _bind$2.start, _bind$2.end);
              let _tmp$5;
              if (_bind$4 === undefined) {
                _tmp$5 = _bind$2.end;
              } else {
                const _Some = _bind$4;
                _tmp$5 = _Some;
              }
              const _tmp$6 = _tmp$5;
              const _x$3 = { str: _tmp$4, start: _tmp$6, end: _bind$2.end };
              _bind = { _0: true, _1: _x$3 };
              break;
            }
            default: {
              rest = _bind$2;
              break _L$2;
            }
          }
        } else {
          rest = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _bind = { _0: false, _1: rest };
    }
    const _neg = _bind._0;
    const _rest = _bind._1;
    const _bind$2 = moonbitlang$core$strconv$$check_and_consume_base(_rest, base);
    let _bind$3;
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _bind$3 = _ok._0;
    } else {
      return _bind$2;
    }
    const _num_base = _bind$3._0;
    const _rest$2 = _bind$3._1;
    const _allow_underscore = _bind$3._2;
    const overflow_threshold = moonbitlang$core$strconv$$overflow_threshold(_num_base, _neg);
    let has_digit;
    if (moonbitlang$core$string$$String$char_length_ge(_rest$2.str, 1, _rest$2.start, _rest$2.end)) {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_rest$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_rest$2.str, 0, _rest$2.start, _rest$2.end));
      if (_x >= 48 && _x <= 57) {
        has_digit = true;
      } else {
        if (_x >= 97 && _x <= 122) {
          has_digit = true;
        } else {
          if (_x >= 65 && _x <= 90) {
            has_digit = true;
          } else {
            if (moonbitlang$core$string$$String$char_length_ge(_rest$2.str, 2, _rest$2.start, _rest$2.end)) {
              if (_x === 95) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(_rest$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_rest$2.str, 1, _rest$2.start, _rest$2.end));
                has_digit = _x$2 >= 48 && _x$2 <= 57 ? true : _x$2 >= 97 && _x$2 <= 122 ? true : _x$2 >= 65 && _x$2 <= 90;
              } else {
                has_digit = false;
              }
            } else {
              has_digit = false;
            }
          }
        }
      }
    } else {
      has_digit = false;
    }
    if (has_digit) {
      let _tmp;
      let _tmp$2 = _rest$2;
      let _tmp$3 = $0L;
      let _tmp$4 = _allow_underscore;
      while (true) {
        const _param_0 = _tmp$2;
        const _param_1 = _tmp$3;
        const _param_2 = _tmp$4;
        let acc;
        let rest$2;
        let c;
        _L$2: {
          if (moonbitlang$core$string$$String$char_length_eq(_param_0.str, 1, _param_0.start, _param_0.end)) {
            const _x = moonbitlang$core$string$$String$unsafe_char_at(_param_0.str, moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 0, _param_0.start, _param_0.end));
            if (_x === 95) {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$63$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            } else {
              const _tmp$5 = _param_0.str;
              const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 1, _param_0.start, _param_0.end);
              let _tmp$6;
              if (_bind$4 === undefined) {
                _tmp$6 = _param_0.end;
              } else {
                const _Some = _bind$4;
                _tmp$6 = _Some;
              }
              const _tmp$7 = _tmp$6;
              const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param_0.end };
              acc = _param_1;
              rest$2 = _x$2;
              c = _x;
              break _L$2;
            }
          } else {
            if (moonbitlang$core$string$$String$char_length_ge(_param_0.str, 1, _param_0.start, _param_0.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(_param_0.str, moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 0, _param_0.start, _param_0.end));
              if (_x === 95) {
                if (_param_2 === false) {
                  const _bind$4 = moonbitlang$core$strconv$$syntax_err$63$();
                  if (_bind$4.$tag === 1) {
                    const _ok = _bind$4;
                    _tmp = _ok._0;
                    break;
                  } else {
                    return _bind$4;
                  }
                } else {
                  const _tmp$5 = _param_0.str;
                  const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 1, _param_0.start, _param_0.end);
                  let _tmp$6;
                  if (_bind$4 === undefined) {
                    _tmp$6 = _param_0.end;
                  } else {
                    const _Some = _bind$4;
                    _tmp$6 = _Some;
                  }
                  const _tmp$7 = _tmp$6;
                  const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param_0.end };
                  _tmp$2 = _x$2;
                  _tmp$4 = false;
                  continue;
                }
              } else {
                const _tmp$5 = _param_0.str;
                const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 1, _param_0.start, _param_0.end);
                let _tmp$6;
                if (_bind$4 === undefined) {
                  _tmp$6 = _param_0.end;
                } else {
                  const _Some = _bind$4;
                  _tmp$6 = _Some;
                }
                const _tmp$7 = _tmp$6;
                const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param_0.end };
                acc = _param_1;
                rest$2 = _x$2;
                c = _x;
                break _L$2;
              }
            } else {
              _tmp = _param_1;
              break;
            }
          }
        }
        const c$2 = c;
        let d;
        if (c$2 >= 48 && c$2 <= 57) {
          d = c$2 - 48 | 0;
        } else {
          if (c$2 >= 97 && c$2 <= 122) {
            d = c$2 + -87 | 0;
          } else {
            if (c$2 >= 65 && c$2 <= 90) {
              d = c$2 + -55 | 0;
            } else {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$8$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                d = _ok._0;
              } else {
                return _bind$4;
              }
            }
          }
        }
        if (d < _num_base) {
          if (_neg) {
            if (moonbitlang$core$builtin$$op_ge$63$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$builtin$$Sub$op_sub$63$(moonbitlang$core$builtin$$Mul$op_mul$63$(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_le$63$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$63$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$63$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          } else {
            if (moonbitlang$core$builtin$$op_lt$63$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$builtin$$Add$op_add$63$(moonbitlang$core$builtin$$Mul$op_mul$63$(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_ge$63$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$63$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$63$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          }
        } else {
          const _bind$4 = moonbitlang$core$strconv$$syntax_err$63$();
          if (_bind$4.$tag === 1) {
            const _ok = _bind$4;
            _tmp = _ok._0;
            break;
          } else {
            return _bind$4;
          }
        }
      }
      return new Result$Ok$9$(_tmp);
    } else {
      return moonbitlang$core$strconv$$syntax_err$63$();
    }
  } else {
    return moonbitlang$core$strconv$$syntax_err$63$();
  }
}
function moonbitlang$core$strconv$$parse_int(str, base) {
  const _bind = moonbitlang$core$strconv$$parse_int64(str, base);
  let n;
  if (_bind.$tag === 1) {
    const _ok = _bind;
    n = _ok._0;
  } else {
    return _bind;
  }
  if (moonbitlang$core$builtin$$op_lt$63$(n, moonbitlang$core$int$$Int$to_int64(-2147483648)) || moonbitlang$core$builtin$$op_gt$63$(n, moonbitlang$core$int$$Int$to_int64(2147483647))) {
    const _bind$2 = moonbitlang$core$strconv$$range_err$4$();
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _ok._0;
    } else {
      return _bind$2;
    }
  }
  return new Result$Ok$10$(moonbitlang$core$int64$$Int64$to_int(n));
}
function moonbitlang$core$result$$Result$unwrap$64$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    return _Ok._0;
  } else {
    return moonbitlang$core$abort$$abort$5$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$65$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    return _Ok._0;
  } else {
    return moonbitlang$core$abort$$abort$0$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$66$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    _Ok._0;
    return;
  } else {
    moonbitlang$core$abort$$abort$4$("called `Result::unwrap()` on an `Err` value");
    return;
  }
}
function moonbitlang$core$result$$Result$unwrap$67$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    return _Ok._0;
  } else {
    return moonbitlang$core$abort$$abort$8$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$68$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_char(hasher, self);
}
function moonbitlang$core$char$$Char$is_control(self) {
  return self >= 0 && self <= 31 ? true : self >= 127 && self <= 159;
}
function moonbitlang$core$char$$Char$is_printable(self) {
  if (moonbitlang$core$char$$Char$is_control(self)) {
    return false;
  }
  const self$2 = self;
  _L: {
    _L$2: {
      if (self$2 >= 57344 && self$2 <= 63743) {
        break _L$2;
      } else {
        if (self$2 >= 983040 && self$2 <= 1048573) {
          break _L$2;
        } else {
          if (self$2 >= 1048576 && self$2 <= 1114109) {
            break _L$2;
          }
        }
      }
      break _L;
    }
    return false;
  }
  _L$2: {
    _L$3: {
      if (self$2 === 173) {
        break _L$3;
      } else {
        if (self$2 >= 1536 && self$2 <= 1541) {
          break _L$3;
        } else {
          if (self$2 === 1564) {
            break _L$3;
          } else {
            if (self$2 === 1757) {
              break _L$3;
            } else {
              if (self$2 === 1807) {
                break _L$3;
              } else {
                if (self$2 >= 2192 && self$2 <= 2193) {
                  break _L$3;
                } else {
                  if (self$2 === 2274) {
                    break _L$3;
                  } else {
                    if (self$2 === 6158) {
                      break _L$3;
                    } else {
                      if (self$2 >= 8203 && self$2 <= 8207) {
                        break _L$3;
                      } else {
                        if (self$2 >= 8234 && self$2 <= 8238) {
                          break _L$3;
                        } else {
                          if (self$2 >= 8288 && self$2 <= 8292) {
                            break _L$3;
                          } else {
                            if (self$2 >= 8294 && self$2 <= 8303) {
                              break _L$3;
                            } else {
                              if (self$2 === 65279) {
                                break _L$3;
                              } else {
                                if (self$2 >= 65529 && self$2 <= 65531) {
                                  break _L$3;
                                } else {
                                  if (self$2 === 69821) {
                                    break _L$3;
                                  } else {
                                    if (self$2 === 69837) {
                                      break _L$3;
                                    } else {
                                      if (self$2 >= 78896 && self$2 <= 78911) {
                                        break _L$3;
                                      } else {
                                        if (self$2 >= 113824 && self$2 <= 113827) {
                                          break _L$3;
                                        } else {
                                          if (self$2 >= 119155 && self$2 <= 119162) {
                                            break _L$3;
                                          } else {
                                            if (self$2 === 917505) {
                                              break _L$3;
                                            } else {
                                              if (self$2 >= 917536 && self$2 <= 917631) {
                                                break _L$3;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L$2;
    }
    return false;
  }
  if (self$2 >= 55296 && self$2 <= 57343) {
    return false;
  }
  if (self$2 === 8232 || self$2 === 8233) {
    return false;
  }
  _L$3: {
    _L$4: {
      if (self$2 >= 64976 && self$2 <= 65007) {
        break _L$4;
      } else {
        if (self$2 >= 65534 && self$2 <= 65535) {
          break _L$4;
        } else {
          if (self$2 >= 131070 && self$2 <= 131071) {
            break _L$4;
          } else {
            if (self$2 >= 196606 && self$2 <= 196607) {
              break _L$4;
            } else {
              if (self$2 >= 262142 && self$2 <= 262143) {
                break _L$4;
              } else {
                if (self$2 >= 327678 && self$2 <= 327679) {
                  break _L$4;
                } else {
                  if (self$2 >= 393214 && self$2 <= 393215) {
                    break _L$4;
                  } else {
                    if (self$2 >= 458750 && self$2 <= 458751) {
                      break _L$4;
                    } else {
                      if (self$2 >= 524286 && self$2 <= 524287) {
                        break _L$4;
                      } else {
                        if (self$2 >= 589822 && self$2 <= 589823) {
                          break _L$4;
                        } else {
                          if (self$2 >= 655358 && self$2 <= 655359) {
                            break _L$4;
                          } else {
                            if (self$2 >= 720894 && self$2 <= 720895) {
                              break _L$4;
                            } else {
                              if (self$2 >= 786430 && self$2 <= 786431) {
                                break _L$4;
                              } else {
                                if (self$2 >= 851966 && self$2 <= 851967) {
                                  break _L$4;
                                } else {
                                  if (self$2 >= 917502 && self$2 <= 917503) {
                                    break _L$4;
                                  } else {
                                    if (self$2 >= 983038 && self$2 <= 983039) {
                                      break _L$4;
                                    } else {
                                      if (self$2 >= 1048574 && self$2 <= 1048575) {
                                        break _L$4;
                                      } else {
                                        if (self$2 >= 1114110 && self$2 <= 1114111) {
                                          break _L$4;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L$3;
    }
    return false;
  }
  return true;
}
function moonbitlang$core$char$$output$46$to_hex_digit$124$6(i) {
  return i < 10 ? i + 48 | 0 : (i + 97 | 0) - 10 | 0;
}
function moonbitlang$core$builtin$$Show$output$68$(self, logger) {
  logger.method_2(logger.self, 39);
  _L: {
    _L$2: {
      if (self === 39) {
        break _L$2;
      } else {
        if (self === 92) {
          break _L$2;
        } else {
          if (self === 10) {
            logger.method_0(logger.self, "\\n");
          } else {
            if (self === 13) {
              logger.method_0(logger.self, "\\r");
            } else {
              if (self === 8) {
                logger.method_0(logger.self, "\\b");
              } else {
                if (self === 9) {
                  logger.method_0(logger.self, "\\t");
                } else {
                  if (self >= 32 && self <= 126) {
                    logger.method_2(logger.self, self);
                  } else {
                    if (!moonbitlang$core$char$$Char$is_printable(self)) {
                      const code = self;
                      const hex_len = code <= 255 ? 2 : code <= 4095 ? 3 : code <= 65535 ? 4 : code <= 1048575 ? 5 : 6;
                      logger.method_0(logger.self, "\\u{");
                      if (hex_len >= 6) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$6(code >> 20 & 15));
                      }
                      if (hex_len >= 5) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$6(code >> 16 & 15));
                      }
                      if (hex_len >= 4) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$6(code >> 12 & 15));
                      }
                      if (hex_len >= 3) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$6(code >> 8 & 15));
                      }
                      if (hex_len >= 2) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$6(code >> 4 & 15));
                      }
                      logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$6(code & 15));
                      logger.method_2(logger.self, 125);
                    } else {
                      logger.method_2(logger.self, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L;
    }
    logger.method_2(logger.self, 92);
    logger.method_2(logger.self, self);
  }
  logger.method_2(logger.self, 39);
}
function moonbitlang$core$bytes$$View$op_get(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.bytes;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$17$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$bytes$$Bytes$op_as_view(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { bytes: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$7$("Invalid index for View");
}
function moonbitlang$core$bytes$$View$iter(self) {
  const _p = (yield_) => {
    const _end117 = self.len;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < _end117) {
        const _bind = yield_(moonbitlang$core$bytes$$View$op_get(self, i));
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Eq$op_equal$7$(self, other) {
  if (self.len === other.len) {
    const _end88 = self.len;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < _end88) {
        const _tmp$2 = self.bytes;
        const _tmp$3 = self.start + i | 0;
        $bound_check(_tmp$2, _tmp$3);
        const _p = _tmp$2[_tmp$3];
        const _tmp$4 = other.bytes;
        const _tmp$5 = other.start + i | 0;
        $bound_check(_tmp$4, _tmp$5);
        const _p$2 = _tmp$4[_tmp$5];
        if (_p === _p$2) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$bytes$$Bytes$from_array(arr) {
  return moonbitlang$core$bytes$$Bytes$makei(arr.length, (i) => moonbitlang$core$array$$Array$op_get$17$(arr, i));
}
function moonbitlang$core$bytes$$Bytes$from_fixedarray(arr, len) {
  let len$2;
  if (len === undefined) {
    len$2 = arr.length;
  } else {
    const _Some = len;
    len$2 = _Some;
  }
  return moonbitlang$core$bytes$$Bytes$makei(len$2, (i) => {
    $bound_check(arr, i);
    return arr[i];
  });
}
function moonbitlang$core$bytes$$from_fixedarray(arr, len) {
  return moonbitlang$core$bytes$$Bytes$from_fixedarray(arr, len);
}
function moonbitlang$core$bytes$$Bytes$to_fixedarray(self, len) {
  let len$2;
  if (len === undefined) {
    len$2 = self.length;
  } else {
    const _Some = len;
    len$2 = _Some;
  }
  const arr = $makebytes(len$2, 0);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len$2) {
      $bound_check(self, i);
      $bound_check(arr, i);
      arr[i] = self[i];
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$bytes$$Bytes$iter(self) {
  const _p = (yield_) => {
    const _end29 = self.length;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < _end29) {
        $bound_check(self, i);
        if (moonbitlang$core$builtin$$Eq$op_equal$69$(yield_(self[i]), 0)) {
          return 0;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$immut$sorted_map$$T$size$70$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$71$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$72$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$73$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$74$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$75$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$76$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$77$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$78$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$70$(l) + moonbitlang$core$immut$sorted_map$$T$size$70$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$71$(l) + moonbitlang$core$immut$sorted_map$$T$size$71$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$11$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$72$(l) + moonbitlang$core$immut$sorted_map$$T$size$72$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$73$(l) + moonbitlang$core$immut$sorted_map$$T$size$73$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$74$(l) + moonbitlang$core$immut$sorted_map$$T$size$74$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$75$(l) + moonbitlang$core$immut$sorted_map$$T$size$75$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$76$(l) + moonbitlang$core$immut$sorted_map$$T$size$76$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$77$(l) + moonbitlang$core$immut$sorted_map$$T$size$77$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$78$(l) + moonbitlang$core$immut$sorted_map$$T$size$78$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$T$get$70$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$72$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return Option$None$20$;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return new Option$Some$20$(_value);
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$73$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$44$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$74$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key.id, _k.id);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$76$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key.num, _k.num);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$75$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$78$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$79$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$71$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$0$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$op_get$70$(self, key) {
  return moonbitlang$core$immut$sorted_map$$T$get$70$(self, key);
}
function moonbitlang$core$immut$sorted_map$$T$map_with_key$80$(self, f) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$;
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _value = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const _size = _Tree._2;
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(_k, f(_k, _value), _size, moonbitlang$core$immut$sorted_map$$T$map_with_key$80$(_l, f), moonbitlang$core$immut$sorted_map$$T$map_with_key$80$(_r, f));
  }
}
function moonbitlang$core$immut$sorted_map$$balance$70$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$70$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$70$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$70$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$70$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$70$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$70$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$70$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$70$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$70$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$70$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$70$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$70$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$70$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$71$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$71$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$71$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$71$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$71$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$71$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$71$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$71$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$71$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$71$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$71$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$71$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$71$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$71$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$72$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$72$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$72$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$72$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$72$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$72$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$72$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$72$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$72$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$72$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$72$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$72$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$72$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$72$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$73$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$73$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$73$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$73$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$73$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$73$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$73$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$73$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$73$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$74$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$74$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$74$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$74$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$74$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$74$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$74$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$74$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$74$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$75$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$75$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$75$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$75$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$75$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$75$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$75$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$75$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$75$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$76$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$76$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$76$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$76$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$76$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$76$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$76$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$76$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$76$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$76$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$76$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$76$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$76$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$76$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$77$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$77$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$77$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$77$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$77$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$77$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$77$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$77$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$77$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$78$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$78$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$78$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$78$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$78$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$78$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$78$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$78$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$78$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$78$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$78$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$78$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$78$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$78$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$70$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$70$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$70$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$70$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$70$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$70$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$71$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$11$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$11$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$11$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$0$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$71$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$71$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$71$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$71$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$71$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$72$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$72$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$72$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$72$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$72$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$72$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$73$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$44$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$73$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$73$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$73$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$73$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$73$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$74$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key.id, _k.id);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$74$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$74$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$74$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$74$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$74$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$75$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$75$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$75$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$75$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$75$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$75$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$76$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key.num, _k.num);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$76$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$76$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$76$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$76$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$76$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$77$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$0$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$77$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$77$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$77$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$77$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$77$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$78$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$79$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$78$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$78$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$78$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$78$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$78$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$iter$46$go$47$2049(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = t$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter$46$go$47$2049(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _k, _1: _value });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter$77$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter$46$go$47$2049(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter$46$go$47$2063(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = t$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter$46$go$47$2063(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _k, _1: _value });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter$75$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter$46$go$47$2063(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2077(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = t$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2077(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_k, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter2$72$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2077(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2091(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = t$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2091(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_k, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter2$73$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2091(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2105(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = t$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2105(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_k, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter2$75$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2105(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$from_iter$77$(iter) {
  const _bind = $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$;
  const _acc = { val: _bind };
  iter((_p) => {
    const m = _acc.val;
    _acc.val = moonbitlang$core$immut$sorted_map$$T$add$77$(m, _p._0, _p._1);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$immut$sorted_map$$T$keys$75$(self) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$75$(self);
  return moonbitlang$core$builtin$$Iter$collect$8$((_p) => _bind((_p$2) => _p(_p$2._0)));
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$72$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Tree = _param;
      const _left = _Tree._3;
      const _self = self;
      moonbitlang$core$array$$Array$push$81$(_self, _Tree);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$75$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Tree = _param;
      const _left = _Tree._3;
      const _self = self;
      moonbitlang$core$array$$Array$push$82$(_self, _Tree);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$new$72$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$72$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$75$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(self) {
  const _s = self;
  const _bind = moonbitlang$core$array$$Array$pop$81$(_s);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Tree = _curr;
      const _key = _Tree._0;
      const _right = _Tree._4;
      const _value = _Tree._1;
      moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$72$(self, _right);
      return { _0: _key, _1: _value };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(self) {
  const _s = self;
  const _bind = moonbitlang$core$array$$Array$pop$82$(_s);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Tree = _curr;
      const _key = _Tree._0;
      const _right = _Tree._4;
      const _value = _Tree._1;
      moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$75$(self, _right);
      return { _0: _key, _1: _value };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$83$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$72$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$72$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (moonbitlang$core$builtin$$Eq$op_equal$84$(_a, _b)) {
          _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$85$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (_a._0 === _b._0 && _a._1 === _b._1) {
          _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$83$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$72$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$72$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined ? 0 : -1;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        const cmp = moonbitlang$core$builtin$$Compare$compare$84$(_a, _b);
        if (cmp === 0) {
          _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$72$(iter1);
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$85$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined ? 0 : -1;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        const _p = $compare_int(_a._0, _b._0);
        const cmp = _p === 0 ? $compare_int(_a._1, _b._1) : _p;
        if (cmp === 0) {
          _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
          _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$85$(self, hasher) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$75$(self);
  _bind((e) => {
    moonbitlang$core$builtin$$Hasher$combine$8$(hasher, e._0);
    moonbitlang$core$builtin$$Hasher$combine$8$(hasher, e._1);
    return 1;
  });
}
function moonbitlang$core$hashmap$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$hashmap$$new$1$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  const _bind = $make_array_len_and_init(capacity$2, undefined);
  const _bind$2 = capacity$2 - 1 | 0;
  return { entries: _bind, capacity: capacity$2, capacity_mask: _bind$2, size: 0 };
}
function moonbitlang$core$hashmap$$T$set_with_hash$1$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$1$(self);
  }
  let _tmp = hash & self.capacity_mask;
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === entry.hash && _curr_entry.key === entry.key) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$4 = self.entries;
        $bound_check(_tmp$4, idx);
        _tmp$4[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      _tmp = idx + 1 & self.capacity_mask;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$1$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.size = 0;
  const _end33 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end33) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$1$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$set$1$(self, key, value) {
  moonbitlang$core$hashmap$$T$set_with_hash$1$(self, key, value, moonbitlang$core$builtin$$Hash$hash$61$(key));
}
function moonbitlang$core$hashmap$$from_array$1$(arr) {
  const m = moonbitlang$core$hashmap$$new$1$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$hashmap$$T$set$1$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$hashmap$$T$get$1$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$61$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$sorted_map$$new_node$86$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$87$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$builtin$$Eq$op_equal$88$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$83$(self.key, other.key);
}
function moonbitlang$core$sorted_map$$height_ge$86$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$87$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$Node$update_height$86$(self) {
  const _p = self.left;
  let _p$2;
  if (_p === undefined) {
    _p$2 = 0;
  } else {
    const _p$3 = _p;
    const _p$4 = _p$3;
    _p$2 = _p$4.height;
  }
  const _p$3 = self.right;
  let _p$4;
  if (_p$3 === undefined) {
    _p$4 = 0;
  } else {
    const _p$5 = _p$3;
    const _p$6 = _p$5;
    _p$4 = _p$6.height;
  }
  self.height = 1 + (_p$2 > _p$4 ? _p$2 : _p$4) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$87$(self) {
  const _p = self.left;
  let _p$2;
  if (_p === undefined) {
    _p$2 = 0;
  } else {
    const _p$3 = _p;
    const _p$4 = _p$3;
    _p$2 = _p$4.height;
  }
  const _p$3 = self.right;
  let _p$4;
  if (_p$3 === undefined) {
    _p$4 = 0;
  } else {
    const _p$5 = _p$3;
    const _p$6 = _p$5;
    _p$4 = _p$6.height;
  }
  self.height = 1 + (_p$2 > _p$4 ? _p$2 : _p$4) | 0;
}
function moonbitlang$core$sorted_map$$rotate_l$86$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$86$(n);
  moonbitlang$core$sorted_map$$Node$update_height$86$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$87$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$87$(n);
  moonbitlang$core$sorted_map$$Node$update_height$87$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_r$86$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$86$(n);
  moonbitlang$core$sorted_map$$Node$update_height$86$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$87$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$87$(n);
  moonbitlang$core$sorted_map$$Node$update_height$87$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_lr$86$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  const v = moonbitlang$core$sorted_map$$rotate_l$86$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$86$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$87$(n) {
  const _p = n.left;
  let l;
  if (_p === undefined) {
    l = $panic();
  } else {
    const _p$2 = _p;
    l = _p$2;
  }
  const v = moonbitlang$core$sorted_map$$rotate_l$87$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$87$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$86$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  const v = moonbitlang$core$sorted_map$$rotate_r$86$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$86$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$87$(n) {
  const _p = n.right;
  let r;
  if (_p === undefined) {
    r = $panic();
  } else {
    const _p$2 = _p;
    r = _p$2;
  }
  const v = moonbitlang$core$sorted_map$$rotate_r$87$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$87$(n);
}
function moonbitlang$core$sorted_map$$balance$86$(root) {
  const l = root.left;
  const r = root.right;
  let hl;
  if (l === undefined) {
    hl = 0;
  } else {
    const _p = l;
    const _p$2 = _p;
    hl = _p$2.height;
  }
  let hr;
  if (r === undefined) {
    hr = 0;
  } else {
    const _p = r;
    const _p$2 = _p;
    hr = _p$2.height;
  }
  let new_root;
  if (hl > (hr + 1 | 0)) {
    let _bind;
    if (l === undefined) {
      _bind = $panic();
    } else {
      const _p = l;
      _bind = _p;
    }
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$86$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$86$(root) : moonbitlang$core$sorted_map$$rotate_lr$86$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      let _bind;
      if (r === undefined) {
        _bind = $panic();
      } else {
        const _p = r;
        _bind = _p;
      }
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$86$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$86$(root) : moonbitlang$core$sorted_map$$rotate_rl$86$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$86$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$87$(root) {
  const l = root.left;
  const r = root.right;
  let hl;
  if (l === undefined) {
    hl = 0;
  } else {
    const _p = l;
    const _p$2 = _p;
    hl = _p$2.height;
  }
  let hr;
  if (r === undefined) {
    hr = 0;
  } else {
    const _p = r;
    const _p$2 = _p;
    hr = _p$2.height;
  }
  let new_root;
  if (hl > (hr + 1 | 0)) {
    let _bind;
    if (l === undefined) {
      _bind = $panic();
    } else {
      const _p = l;
      _bind = _p;
    }
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$87$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$87$(root) : moonbitlang$core$sorted_map$$rotate_lr$87$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      let _bind;
      if (r === undefined) {
        _bind = $panic();
      } else {
        const _p = r;
        _bind = _p;
      }
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$87$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$87$(root) : moonbitlang$core$sorted_map$$rotate_rl$87$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$87$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$add_node$86$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$86$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$83$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$81$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$86$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$86$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$86$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$86$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$87$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$87$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (key === _n.key) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (key < _n.key) {
        const _bind = moonbitlang$core$sorted_map$$add_node$87$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$87$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$87$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$87$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$add$86$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$86$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$89$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$87$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$87$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$90$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$op_set$86$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$86$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$87$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$87$(self, key, value);
}
function moonbitlang$core$sorted_map$$new$86$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$87$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$T$get$86$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$83$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$87$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = $compare_int(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$iter2$46$go$47$2411(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _key = _x.key;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_map$$iter2$46$go$47$2411(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_key, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$iter2$86$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_map$$iter2$46$go$47$2411(yield_, self.root);
  return _p;
}
function moonbitlang$core$builtin$$Logger$write_object$91$(self, obj) {
  moonbitlang$core$builtin$$Show$output$91$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$92$(self, obj) {
  moonbitlang$core$builtin$$Show$output$92$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$93$(self, obj) {
  moonbitlang$core$builtin$$Show$output$94$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$0$(self, obj) {
  moonbitlang$core$builtin$$Show$output$0$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$2$(self, obj) {
  moonbitlang$core$builtin$$Show$output$95$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$96$(self, obj) {
  moonbitlang$core$builtin$$Show$output$96$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$8$(self, obj) {
  moonbitlang$core$builtin$$Show$output$8$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$35$(self, obj) {
  if (obj) {
    self.method_0(self.self, "true");
    return;
  } else {
    self.method_0(self.self, "false");
    return;
  }
}
function moonbitlang$core$builtin$$Logger$write_object$97$(self, obj) {
  moonbitlang$core$builtin$$Show$output$97$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$98$(self, obj) {
  moonbitlang$core$builtin$$Show$output$98$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$99$(self, obj) {
  moonbitlang$core$builtin$$Show$output$100$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$101$(self, obj) {
  moonbitlang$core$builtin$$Show$output$101$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$102$(self, obj) {
  moonbitlang$core$builtin$$Show$output$103$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$104$(self, obj) {
  moonbitlang$core$builtin$$Show$output$104$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$68$(self, obj) {
  moonbitlang$core$builtin$$Show$output$68$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$18$(self, obj) {
  moonbitlang$core$builtin$$Show$output$105$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$106$(self, obj) {
  moonbitlang$core$builtin$$Show$output$106$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$107$(self, obj) {
  moonbitlang$core$builtin$$Show$output$107$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$108$(self, obj) {
  moonbitlang$core$builtin$$Show$output$108$(obj, self);
}
function moonbitlang$core$builtin$$Eq$op_equal$69$(_x_2436, _x_2437) {
  if (_x_2436 === 0) {
    if (_x_2437 === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    if (_x_2437 === 1) {
      return true;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$op_lt$63$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$63$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$92$(self_, other) {
  return (self_.fname === other.fname ? $compare_int(self_.cnum, other.cnum) : $panic()) < 0;
}
function moonbitlang$core$builtin$$op_lt$109$(self_, other) {
  return $compare_int(self_.num, other.num) < 0;
}
function moonbitlang$core$builtin$$op_lt$3$(self_, other) {
  return $compare_int(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$26$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$39$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$27$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$27$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$81$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$83$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_ge$63$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$63$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$op_ge$26$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$39$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$op_ge$27$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$27$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$builtin$$Map$new$110$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$111$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$112$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$113$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$75$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$114$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$115$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$116$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$117$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$118$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$119$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$op_gt$63$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$63$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$92$(self_, other) {
  return (self_.fname === other.fname ? $compare_int(self_.cnum, other.cnum) : $panic()) > 0;
}
function moonbitlang$core$builtin$$op_gt$109$(self_, other) {
  return $compare_int(self_.num, other.num) > 0;
}
function moonbitlang$core$builtin$$op_gt$3$(self_, other) {
  return $compare_int(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$26$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$39$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$27$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$27$(self_, other) > 0;
}
function moonbitlang$core$option$$Option$unwrap$44$(self) {
  if (self.$tag === 0) {
    return $panic();
  } else {
    const _Some = self;
    return _Some._0;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$112$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$113$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$75$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$118$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$114$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$115$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$116$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$117$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$111$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$119$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$110$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    const _p = _tmp[_bind];
    let _tmp$2;
    if (_p === undefined) {
      _tmp$2 = $panic();
    } else {
      const _p$2 = _p;
      _tmp$2 = _p$2;
    }
    _tmp$2.next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$set_entry$112$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$113$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$75$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$118$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$114$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$115$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$116$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$117$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$111$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$119$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$110$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$push_away$112$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$112$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$112$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$113$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$113$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$113$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$75$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$75$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$75$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$118$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$118$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$118$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$114$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$114$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$114$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$115$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$115$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$115$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$116$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$116$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$116$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$117$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$117$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$117$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$111$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$111$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$111$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$119$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$119$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$119$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$110$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$110$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$110$(self, entry$2, idx$2);
        _tmp = _curr_entry.psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        _tmp = psl + 1 | 0;
        _tmp$2 = idx$2 + 1 & self.capacity_mask;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$112$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$112$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$112$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$112$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$113$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$113$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$113$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$113$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$75$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$75$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$75$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$75$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$118$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$118$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$118$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$118$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$114$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$114$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$114$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$114$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$115$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$115$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$115$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$115$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$116$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$116$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$120$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$56$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$116$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$116$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$117$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$117$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$121$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$57$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$117$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$117$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$111$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$111$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$122$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$54$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$111$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$111$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$119$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$119$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$61$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$119$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$119$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$110$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$110$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$123$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$124$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$110$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      _tmp = psl + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$110$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$grow$112$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$112$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$113$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$113$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$75$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$75$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$118$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$118$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$114$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$114$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$115$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$115$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$116$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$116$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$117$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$117$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$111$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$111$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$119$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$119$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$110$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$110$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$from_array$112$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$112$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$112$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$113$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$113$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$113$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$75$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$75$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$75$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$115$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$115$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$115$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$116$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$116$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$116$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$117$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$117$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$117$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$118$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$118$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$118$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$114$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$114$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$114$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$119$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$119$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$119$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$op_le$63$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$63$(self_, other) <= 0;
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$17$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$125$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$builtin$$StringBuilder$new(size_hint) {
  return { val: "" };
}
function moonbitlang$core$builtin$$Logger$write_char$38$(self, ch) {
  const _bind = self;
  _bind.val = `${_bind.val}${String.fromCodePoint(ch)}`;
}
function moonbitlang$core$builtin$$is_leading_surrogate(c) {
  return c >= 55296 && c <= 56319;
}
function moonbitlang$core$builtin$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$string$$String$unsafe_char_at(self, index) {
  const c1 = self.charCodeAt(index);
  if (moonbitlang$core$builtin$$is_leading_surrogate(c1)) {
    const _tmp = index + 1 | 0;
    const c2 = self.charCodeAt(_tmp);
    return moonbitlang$core$builtin$$code_point_of_surrogate_pair(c1, c2);
  } else {
    return c1;
  }
}
function moonbitlang$core$builtin$$op_notequal$19$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$19$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$47$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$126$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$48$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$127$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$27$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$27$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$89$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$128$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$90$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$129$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$49$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$130$(x, y);
}
function moonbitlang$core$array$$Array$op_get$131$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$42$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$132$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$133$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$17$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$40$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$134$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$135$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$136$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$27$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$109$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$37$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$8$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$55$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$137$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$138$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$41$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$builtin$$Logger$write_string$38$(self, str) {
  const _bind = self;
  _bind.val = `${_bind.val}${str}`;
}
function moonbitlang$core$builtin$$Show$output$139$(self, logger) {
  const _a = self._0;
  const _b = self._1;
  logger.method_0(logger.self, "(");
  moonbitlang$core$builtin$$Logger$write_object$8$(logger, _a);
  logger.method_0(logger.self, ", ");
  moonbitlang$core$builtin$$Logger$write_object$8$(logger, _b);
  logger.method_0(logger.self, ")");
}
function moonbitlang$core$builtin$$Hasher$combine$0$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$0$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$55$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$57$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$54$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$54$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$20$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$56$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$140$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$124$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$141$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$141$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$109$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$109$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$3$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$3$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$51$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$53$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$8$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$8$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$41$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$41$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$68$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$68$(value, self);
}
function moonbitlang$core$builtin$$Hash$hash_combine$57$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$109$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$141$(hasher, _b);
}
function moonbitlang$core$builtin$$Hash$hash_combine$142$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$3$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$3$(hasher, _b);
}
function moonbitlang$core$builtin$$Hash$hash_combine$53$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$41$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$8$(hasher, _b);
}
function moonbitlang$core$builtin$$Hash$hash_combine$143$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$68$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$68$(hasher, _b);
}
function moonbitlang$core$builtin$$Eq$op_equal$144$(self, other) {
  return self._0 === other._0 && moonbitlang$core$builtin$$Eq$op_equal$145$(self._1, other._1);
}
function moonbitlang$core$builtin$$Eq$op_equal$57$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  if (_p.num === _p$2.num) {
    return moonbitlang$core$builtin$$Eq$op_equal$141$(self._1, other._1);
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$39$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  if (_p._0 === _p$2._0 && _p._1 === _p$2._1) {
    return self._1 === other._1;
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$146$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$147$(self._0, other._0) && moonbitlang$core$builtin$$Eq$op_equal$147$(self._1, other._1);
}
function moonbitlang$core$builtin$$Eq$op_equal$142$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  if (_p === _p$2) {
    const _p$3 = self._1;
    const _p$4 = other._1;
    return _p$3 === _p$4;
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$84$(self, other) {
  return self._0 === other._0 && moonbitlang$core$builtin$$Eq$op_equal$148$(self._1, other._1);
}
function moonbitlang$core$builtin$$Eq$op_equal$53$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$41$(self._0, other._0) && self._1 === other._1;
}
function moonbitlang$core$builtin$$Compare$compare$84$(self, other) {
  const t0 = $compare_int(self._0, other._0);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$148$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$79$(self, other) {
  const t0 = moonbitlang$core$builtin$$Compare$compare$0$(self._0, other._0);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$149$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$57$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  const t0 = $compare_int(_p.num, _p$2.num);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$141$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$39$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  const _p$3 = $compare_int(_p._0, _p$2._0);
  const t0 = _p$3 === 0 ? $compare_int(_p._1, _p$2._1) : _p$3;
  return t0 === 0 ? $compare_int(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$142$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  const t0 = $compare_int(_p, _p$2);
  if (t0 === 0) {
    const _p$3 = self._1;
    const _p$4 = other._1;
    return $compare_int(_p$3, _p$4);
  } else {
    return t0;
  }
}
function moonbitlang$core$builtin$$Hasher$avalanche(self) {
  let acc = self.acc;
  acc = acc ^ (acc >>> 15 | 0);
  acc = Math.imul(acc, -2048144777) | 0;
  acc = acc ^ (acc >>> 13 | 0);
  acc = Math.imul(acc, -1028477379) | 0;
  acc = acc ^ (acc >>> 16 | 0);
  return acc;
}
function moonbitlang$core$builtin$$Hasher$finalize(self) {
  return moonbitlang$core$builtin$$Hasher$avalanche(self);
}
function moonbitlang$core$builtin$$Hasher$new(seed) {
  return { acc: (seed >>> 0) + (374761393 >>> 0) | 0 };
}
function moonbitlang$core$builtin$$Hash$hash$61$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$0$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$121$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$55$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$122$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$54$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$120$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$20$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$123$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$140$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$52$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$51$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Show$to_string$150$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$151$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$152$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$153$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$154$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$155$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$156$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$139$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Logger$write_iter$97$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$97$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$97$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$builtin$$Logger$write_iter$104$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$104$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$104$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$builtin$$Logger$write_iter$106$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$106$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$106$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$builtin$$MyInt64$from_int(value) {
  return { hi: value >> 31 & -1, lo: value | 0 };
}
function moonbitlang$core$int$$Int$to_int64(self) {
  return moonbitlang$core$builtin$$MyInt64$from_int(self);
}
function moonbitlang$core$int64$$Int64$to_int(self) {
  const _p = self;
  return _p.lo;
}
function moonbitlang$core$builtin$$output$46$write_digits$124$1819(_env, num) {
  const logger = _env._1;
  const radix = _env._0;
  const num2 = num / radix | 0;
  if (num2 !== 0) {
    moonbitlang$core$builtin$$output$46$write_digits$124$1819(_env, num2);
  }
  const _p = "0123456789abcdefghijklmnopqrstuvwxyz";
  const _p$2 = num % radix | 0;
  const _p$3 = _p$2 < 0 ? 0 - _p$2 | 0 : _p$2;
  $bound_check(_p, _p$3);
  logger.method_2(logger.self, _p.charCodeAt(_p$3));
}
function moonbitlang$core$int$$Int$output(self, logger, radix) {
  if (self < 0) {
    logger.method_2(logger.self, 45);
  }
  const _env = { _0: radix, _1: logger };
  moonbitlang$core$builtin$$output$46$write_digits$124$1819(_env, self < 0 ? 0 - self | 0 : self);
}
function moonbitlang$core$int$$Int$output_size_hint(radix) {
  return radix >= 2 && radix < 7 ? 36 : radix >= 8 && radix < 15 ? 18 : radix >= 16 && radix <= 36 ? 10 : moonbitlang$core$abort$$abort$8$("radix must be between 2 and 36");
}
function moonbitlang$core$int$$Int$to_string(self, radix) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$int$$Int$output_size_hint(radix));
  moonbitlang$core$int$$Int$output(self, { self: buf, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ }, radix);
  return buf.val;
}
function moonbitlang$core$builtin$$Show$to_string$8$(self) {
  return moonbitlang$core$int$$Int$to_string(self, 10);
}
function moonbitlang$core$array$$FixedArray$blit_from_string(self, bytes_offset, str, str_offset, length) {
  const e1 = (bytes_offset + length | 0) - 1 | 0;
  const e2 = (str_offset + length | 0) - 1 | 0;
  const len1 = self.length;
  const len2 = str.length;
  if (length >= 0 && (bytes_offset >= 0 && (e1 < len1 && (str_offset >= 0 && e2 < len2)))) {
    const end_str_offset = str_offset + length | 0;
    let _tmp = str_offset;
    let _tmp$2 = bytes_offset;
    while (true) {
      const i = _tmp;
      const j = _tmp$2;
      if (i < end_str_offset) {
        const c = str.charCodeAt(i);
        const _p = c & 255;
        $bound_check(self, j);
        self[j] = _p & 255;
        const _tmp$3 = j + 1 | 0;
        const _p$2 = c >>> 8 | 0;
        $bound_check(self, _tmp$3);
        self[_tmp$3] = _p$2 & 255;
        _tmp = i + 1 | 0;
        _tmp$2 = j + 2 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$string$$String$substring(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    end$2 = _Some;
  }
  return start >= 0 && (start <= end$2 && end$2 <= len) ? self.substring(start, end$2) : $panic();
}
function moonbitlang$core$builtin$$Logger$write_substring$38$(self, str, start, len) {
  const _bind = self;
  _bind.val = `${_bind.val}${moonbitlang$core$string$$String$substring(str, start, start + len | 0)}`;
}
function moonbitlang$core$builtin$$StringBuilder$reset(self) {
  self.val = "";
}
function moonbitlang$core$builtin$$unsafe_make_string(_tmp, _tmp$2) {
  return $unsafe_make_string(_tmp, _tmp$2);
}
function moonbitlang$core$string$$String$make(length, value) {
  if (length >= 0) {
    if (value <= 65535) {
      return moonbitlang$core$builtin$$unsafe_make_string(length, value);
    } else {
      const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(2, length) | 0);
      let _tmp = 0;
      while (true) {
        const _ = _tmp;
        if (_ < length) {
          moonbitlang$core$builtin$$Logger$write_char$38$(buf, value);
          _tmp = _ + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return buf.val;
    }
  } else {
    return moonbitlang$core$abort$$abort$0$("invalid length");
  }
}
function moonbitlang$core$builtin$$Show$output$8$(self, logger) {
  moonbitlang$core$int$$Int$output(self, logger, 10);
}
function moonbitlang$core$builtin$$to_hex_digit(i) {
  return i < 10 ? i + 48 | 0 : (i + 97 | 0) - 10 | 0;
}
function moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i) {
  const logger = _env._2;
  const segment_start = _env._1;
  const self = _env._0;
  if (i > segment_start.val) {
    logger.method_1(logger.self, self, segment_start.val, i - segment_start.val | 0);
  }
  segment_start.val = i + 1 | 0;
}
function moonbitlang$core$builtin$$Show$output$0$(self, logger) {
  logger.method_2(logger.self, 34);
  const segment_start = { val: 0 };
  const _env = { _0: self, _1: segment_start, _2: logger };
  const _end1859 = self.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end1859) {
      let c;
      _L: {
        _L$2: {
          const _bind = self.charCodeAt(i);
          switch (_bind) {
            case 34: {
              c = _bind;
              break _L$2;
            }
            case 92: {
              c = _bind;
              break _L$2;
            }
            case 10: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i);
              logger.method_0(logger.self, "\\n");
              break;
            }
            case 13: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i);
              logger.method_0(logger.self, "\\r");
              break;
            }
            case 8: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i);
              logger.method_0(logger.self, "\\b");
              break;
            }
            case 9: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i);
              logger.method_0(logger.self, "\\t");
              break;
            }
            default: {
              if (_bind < 32) {
                moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i);
                logger.method_0(logger.self, "\\u{");
                logger.method_2(logger.self, moonbitlang$core$builtin$$to_hex_digit(_bind / 16 | 0));
                logger.method_2(logger.self, moonbitlang$core$builtin$$to_hex_digit(_bind % 16 | 0));
                logger.method_2(logger.self, 125);
              }
            }
          }
          break _L;
        }
        moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, i);
        logger.method_2(logger.self, 92);
        logger.method_2(logger.self, c);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$output$46$flush_segment$124$1856(_env, self.length);
  logger.method_2(logger.self, 34);
}
function moonbitlang$core$builtin$$Show$output$105$(self, logger) {
  if (self === undefined) {
    logger.method_0(logger.self, "None");
    return;
  } else {
    const _Some = self;
    const _arg = _Some;
    logger.method_0(logger.self, "Some(");
    moonbitlang$core$builtin$$Logger$write_object$8$(logger, _arg);
    logger.method_0(logger.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$103$(self, logger) {
  logger.method_0(logger.self, "{val: ");
  moonbitlang$core$builtin$$Logger$write_object$35$(logger, self.val);
  logger.method_0(logger.self, "}");
}
function moonbitlang$core$array$$Array$iter$133$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$0$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$40$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$157$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$158$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$97$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$109$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$8$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$104$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$106$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$41$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Show$output$94$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$97$(logger, moonbitlang$core$array$$Array$iter$97$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Show$output$95$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$104$(logger, moonbitlang$core$array$$Array$iter$104$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Show$output$100$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$106$(logger, moonbitlang$core$array$$Array$iter$106$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Eq$op_equal$126$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$43$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$127$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$45$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$105$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x === _y;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$128$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$88$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$129$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x.key === _y.key;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$130$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x.value === _y.value;
    }
  }
}
function moonbitlang$core$builtin$$Map$op_set$112$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$112$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$113$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$113$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$75$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$75$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$115$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$115$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$118$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$118$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$114$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$114$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$117$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$117$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$111$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$111$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$116$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$116$(self, key, value);
}
function moonbitlang$core$builtin$$Map$get$118$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return Option$None$21$;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return new Option$Some$21$(_entry.value);
      }
      if (i > _entry.psl) {
        return Option$None$21$;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$114$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$112$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$113$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$75$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$117$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$121$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$57$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$111$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$122$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$54$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$119$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$61$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$115$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$116$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$120$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$56$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$110$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$123$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$124$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      _tmp = i + 1 | 0;
      _tmp$2 = idx + 1 & self.capacity_mask;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get_or_init$110$(self, key, default_) {
  const _bind = moonbitlang$core$builtin$$Map$get$110$(self, key);
  if (_bind === undefined) {
    const v = default_();
    moonbitlang$core$builtin$$Map$set$110$(self, key, v);
    return v;
  } else {
    const _Some = _bind;
    return _Some;
  }
}
function moonbitlang$core$builtin$$Map$iter$112$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter$118$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter$114$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter$111$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$118$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$113$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$114$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$117$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$keys$114$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _next = _x.next;
        const _bind = yield_(_key);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$from_iter$118$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$118$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$118$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_iter$114$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$114$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$114$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_iter$119$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$119$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$119$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$array$$Array$push$132$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$0$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$68$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$42$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$12$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$16$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$17$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$159$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$97$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$160$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$151$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$104$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$40$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$136$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$27$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$137$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$26$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$161$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$162$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$8$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$163$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$164$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$109$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$106$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$134$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$165$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$166$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$55$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$138$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$167$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$157$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$168$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$169$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$81$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$20$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$41$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$170$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$171$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$172$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$33$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$140$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$82$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$173$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$174$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$builtin$$Iter$run$136$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$175$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$55$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$172$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$each$50$(self, f) {
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$22$ };
  self((a) => {
    f(a);
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return;
    }
    case 1: {
      const _break = _tmp;
      _break._0;
      return;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      $panic();
      return;
    }
    default: {
      $panic();
      return;
    }
  }
}
function moonbitlang$core$builtin$$Iter$empty$8$() {
  return (_discard_) => 1;
}
function moonbitlang$core$builtin$$Iter$singleton$40$(a) {
  return (yield_) => yield_(a);
}
function moonbitlang$core$int$$Int$until(self, end, step, inclusive) {
  if (step === 0) {
    return moonbitlang$core$builtin$$Iter$empty$8$();
  }
  return (yield_) => {
    let i = self;
    while (true) {
      if (step > 0 && i < end || (step < 0 && i > end || inclusive && i === end)) {
        if (moonbitlang$core$builtin$$Eq$op_equal$69$(yield_(i), 0)) {
          return 0;
        }
        const next = i + step | 0;
        if (step > 0 && next >= i || step < 0 && next <= i) {
          i = next;
        } else {
          return 1;
        }
        continue;
      } else {
        return 1;
      }
    }
  };
}
function moonbitlang$core$builtin$$Iter$filter_map$176$(self, f) {
  return (yield_) => moonbitlang$core$builtin$$Iter$run$55$(self, (a) => {
    const _bind = f(a);
    if (_bind === undefined) {
      return 1;
    } else {
      const _Some = _bind;
      const _b = _Some;
      return yield_(_b);
    }
  });
}
function moonbitlang$core$builtin$$Iter$to_array$136$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$136$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$26$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$26$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$164$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$164$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$40$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$40$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$166$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$166$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$55$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$55$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$172$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$172$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$41$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$41$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$collect$8$(self) {
  const result = [];
  moonbitlang$core$builtin$$Iter$each$50$(self, (e) => {
    moonbitlang$core$array$$Array$push$8$(result, e);
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$join(self, sep) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  const first = { val: true };
  self((str) => {
    if (first.val) {
      first.val = false;
    } else {
      moonbitlang$core$builtin$$Logger$write_string$38$(buf, sep);
    }
    moonbitlang$core$builtin$$Logger$write_string$38$(buf, str);
    return 1;
  });
  return buf.val;
}
function moonbitlang$core$builtin$$Iter$maximum$8$(self) {
  const res = { val: undefined };
  self((x) => {
    const _bind = res.val;
    if (_bind === undefined) {
      res.val = x;
    } else {
      const _Some = _bind;
      const _max = _Some;
      if (x > _max) {
        res.val = x;
      }
    }
    return 1;
  });
  return res.val;
}
function moonbitlang$core$bytes$$Bytes$make(len, init) {
  if (len < 0) {
    return $bytes_literal$0;
  }
  return $makebytes(len, init);
}
function moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, bhi, blo) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const lo = _alo + blo | 0;
  const s = lo >> 31;
  const as_ = _alo >> 31;
  const bs = blo >> 31;
  const c = (as_ & bs | ~s & (as_ ^ bs)) & 1;
  const hi = (_ahi + bhi | 0) + c | 0;
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$Add$op_add$177$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, other.hi, other.lo);
}
function moonbitlang$core$builtin$$Sub$op_sub$177$(self, other) {
  return other.lo === 0 ? { hi: self.hi - other.hi | 0, lo: self.lo } : moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, ~other.hi, ~other.lo + 1 | 0);
}
function moonbitlang$core$builtin$$Mul$op_mul$177$(self, other) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const ahi = _ahi;
  const alo = _alo;
  const bhi = _bhi;
  const blo = _blo;
  const a48 = ahi >>> 16 | 0;
  const a32 = ahi & 65535;
  const a16 = alo >>> 16 | 0;
  const a00 = alo & 65535;
  const b48 = bhi >>> 16 | 0;
  const b32 = bhi & 65535;
  const b16 = blo >>> 16 | 0;
  const b00 = blo & 65535;
  const c00 = Math.imul(a00, b00) | 0;
  const c16 = c00 >>> 16 | 0;
  const c00$2 = c00 & 65535;
  const c16$2 = (c16 >>> 0) + ((Math.imul(a16, b00) | 0) >>> 0) | 0;
  const c32 = c16$2 >>> 16 | 0;
  const c16$3 = c16$2 & 65535;
  const c16$4 = (c16$3 >>> 0) + ((Math.imul(a00, b16) | 0) >>> 0) | 0;
  const c32$2 = (c32 >>> 0) + ((c16$4 >>> 16 | 0) >>> 0) | 0;
  const c16$5 = c16$4 & 65535;
  const c32$3 = (c32$2 >>> 0) + ((Math.imul(a32, b00) | 0) >>> 0) | 0;
  const c48 = c32$3 >>> 16 | 0;
  const c32$4 = c32$3 & 65535;
  const c32$5 = (c32$4 >>> 0) + ((Math.imul(a16, b16) | 0) >>> 0) | 0;
  const c48$2 = (c48 >>> 0) + ((c32$5 >>> 16 | 0) >>> 0) | 0;
  const c32$6 = c32$5 & 65535;
  const c32$7 = (c32$6 >>> 0) + ((Math.imul(a00, b32) | 0) >>> 0) | 0;
  const c48$3 = (c48$2 >>> 0) + ((c32$7 >>> 16 | 0) >>> 0) | 0;
  const c32$8 = c32$7 & 65535;
  const c48$4 = (((((((c48$3 >>> 0) + ((Math.imul(a48, b00) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a32, b16) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a16, b32) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a00, b48) | 0) >>> 0) | 0;
  const c48$5 = c48$4 & 65535;
  return { hi: c48$5 << 16 | c32$8, lo: c16$5 << 16 | c00$2 };
}
function moonbitlang$core$builtin$$Div$op_div$177$(self, other) {
  const exports = moonbitlang$core$builtin$$get_int64_wasm_helper();
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const _func = exports.div_s;
  const lo = _func(_alo, _ahi, _blo, _bhi);
  const _func$2 = exports.get_high;
  const hi = _func$2();
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$Add$op_add$63$(self, other) {
  return moonbitlang$core$builtin$$Add$op_add$177$(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$63$(self, other) {
  return moonbitlang$core$builtin$$Sub$op_sub$177$(self, other);
}
function moonbitlang$core$builtin$$Mul$op_mul$63$(self, other) {
  return moonbitlang$core$builtin$$Mul$op_mul$177$(self, other);
}
function moonbitlang$core$builtin$$Div$op_div$63$(self, other) {
  return moonbitlang$core$builtin$$Div$op_div$177$(self, other);
}
function moonbitlang$core$builtin$$Compare$compare$63$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$compare(self, other);
}
function moonbitlang$core$builtin$$Hasher$consume4(self, input) {
  const _p = (self.acc >>> 0) + ((Math.imul(input, -1028477379) | 0) >>> 0) | 0;
  const _p$2 = 17;
  self.acc = Math.imul(_p << _p$2 | (_p >>> (32 - _p$2 | 0) | 0), 668265263) | 0;
}
function moonbitlang$core$builtin$$Hasher$combine_uint(self, value) {
  self.acc = (self.acc >>> 0) + (4 >>> 0) | 0;
  moonbitlang$core$builtin$$Hasher$consume4(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_int(self, value) {
  moonbitlang$core$builtin$$Hasher$combine_uint(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_string(self, value) {
  const _end865 = value.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end865) {
      moonbitlang$core$builtin$$Hasher$combine_uint(self, value.charCodeAt(i));
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Hasher$combine_char(self, value) {
  moonbitlang$core$builtin$$Hasher$combine_uint(self, value);
}
function moonbitlang$core$builtin$$Hash$hash_combine$0$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_string(hasher, self);
}
function moonbitlang$core$builtin$$Hash$hash$8$(self) {
  const self$2 = self;
  let x = self$2 ^ (self$2 >>> 17 | 0);
  x = Math.imul(x, -312814405) | 0;
  x = x ^ (x >>> 11 | 0);
  x = Math.imul(x, -1404298415) | 0;
  x = x ^ (x >>> 15 | 0);
  x = Math.imul(x, 830770091) | 0;
  x = x ^ (x >>> 14 | 0);
  return x;
}
function moonbitlang$core$builtin$$Hash$hash_combine$8$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self);
}
function moonbitlang$core$array$$FixedArray$blit_to$17$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$17$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$builtin$$Default$default$178$() {
  return new Uint8Array([]);
}
function moonbitlang$core$array$$Array$unsafe_pop$12$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$16$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$165$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$81$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$20$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$171$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$33$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$140$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$82$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$174$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$bytes$$Bytes$makei(length, value) {
  if (length <= 0) {
    return $bytes_literal$0;
  }
  const arr = $makebytes(length, value(0));
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < length) {
      $bound_check(arr, i);
      arr[i] = value(i);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$println$0$(input) {
  console.log(input);
}
function moonbitlang$core$builtin$$println$153$(input) {
  console.log(moonbitlang$core$builtin$$Show$to_string$152$(input));
}
function moonbitlang$core$builtin$$println$155$(input) {
  console.log(moonbitlang$core$builtin$$Show$to_string$154$(input));
}
function moonbitlang$core$builtin$$println$46$(input) {
  console.log(moonbitlang$core$builtin$$Show$to_string$156$(input));
}
function moonbitlang$core$array$$FixedArray$blit_from_bytes(self, bytes_offset, src, src_offset, length) {
  const e1 = (bytes_offset + length | 0) - 1 | 0;
  const e2 = (src_offset + length | 0) - 1 | 0;
  const len1 = self.length;
  const len2 = src.length;
  if (length >= 0 && (bytes_offset >= 0 && (e1 < len1 && (src_offset >= 0 && e2 < len2)))) {
    const end_src_offset = src_offset + length | 0;
    let _tmp = src_offset;
    let _tmp$2 = bytes_offset;
    while (true) {
      const i = _tmp;
      const j = _tmp$2;
      if (i < end_src_offset) {
        $bound_check(src, i);
        $bound_check(self, j);
        self[j] = src[i];
        _tmp = i + 1 | 0;
        _tmp$2 = j + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$ArrayView$op_get$12$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$12$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$16$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$16$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$26$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$26$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$27$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$27$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$swap$26$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$8$(i)}, ${moonbitlang$core$builtin$$Show$to_string$8$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$ArrayView$swap$27$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$8$(i)}, ${moonbitlang$core$builtin$$Show$to_string$8$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$Array$op_as_view$12$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$9$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$16$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$13$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$26$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$22$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$27$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$25$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$138$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$29$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$41$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$32$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$12$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$9$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$26$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$22$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$27$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$25$("View index out of bounds");
}
function moonbitlang$core$array$$Array$new$132$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$new$68$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$new$41$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$unsafe_truncate_to_length$27$(self, new_len) {
  moonbitlang$core$builtin$$JSArray$set_length(self, new_len);
}
function moonbitlang$core$array$$Array$pop$165$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$165$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$81$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$81$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$20$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$20$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$171$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$171$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$33$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$33$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$140$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$140$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$82$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$82$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$174$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$174$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$insert$132$(self, index, value) {
  if (index >= 0 && index <= self.length) {
    moonbitlang$core$builtin$$JSArray$splice1(self, index, 0, value);
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
    return;
  }
}
function moonbitlang$core$array$$Array$unsafe_grow_to_length$41$(self, new_len) {
  if (new_len >= self.length) {
    moonbitlang$core$builtin$$JSArray$set_length(self, new_len);
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$unsafe_blit$41$(dst, dst_offset, src, src_offset, len) {
  moonbitlang$core$array$$FixedArray$unsafe_blit$125$(dst, dst_offset, src, src_offset, len);
}
function moonbitlang$core$array$$Array$blit_to$41$(self, dst, len, src_offset, dst_offset) {
  if (len >= 0 && (dst_offset >= 0 && (src_offset >= 0 && (dst_offset <= dst.length && (src_offset + len | 0) <= self.length)))) {
    if ((dst_offset + len | 0) > dst.length) {
      moonbitlang$core$array$$Array$unsafe_grow_to_length$41$(dst, dst_offset + len | 0);
    }
    moonbitlang$core$array$$Array$unsafe_blit$41$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$make$37$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$8$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$get$132$(self, index) {
  const len = self.length;
  return index >= 0 && index < len ? self[index] : undefined;
}
function moonbitlang$core$array$$Array$op_set$42$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$132$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$27$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$37$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$8$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$145$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$146$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$148$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$27$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Compare$compare$148$(self, other) {
  const len_self = self.length;
  const len_other = other.length;
  const cmp = $compare_int(len_self, len_other);
  if (cmp === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len_self) {
        const cmp$2 = moonbitlang$core$builtin$$Compare$compare$27$(self[i], other[i]);
        if (cmp$2 === 0) {
        } else {
          return cmp$2;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 0;
      }
    }
  } else {
    return cmp;
  }
}
function moonbitlang$core$array$$Array$append$41$(self, other) {
  moonbitlang$core$array$$Array$blit_to$41$(other, self, other.length, 0, self.length);
}
function moonbitlang$core$array$$Array$rev_inplace$42$(self) {
  const len = self.length;
  const _end208 = len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end208) {
      const temp = self[i];
      self[i] = self[(len - i | 0) - 1 | 0];
      self[(len - i | 0) - 1 | 0] = temp;
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$search$8$(self, value) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (v === value) {
        return _i;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return undefined;
    }
  }
}
function moonbitlang$core$array$$Array$repeat$41$(self, times) {
  const v = moonbitlang$core$array$$Array$new$41$(Math.imul(self.length, times) | 0);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < times) {
      moonbitlang$core$array$$Array$append$41$(v, self);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return v;
}
function moonbitlang$core$array$$Array$dedup$27$(self) {
  if (self.length === 0) {
    return undefined;
  }
  let w = 1;
  const _end74 = self.length;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end74) {
      if (moonbitlang$core$builtin$$op_notequal$27$(moonbitlang$core$array$$Array$op_get$27$(self, i), moonbitlang$core$array$$Array$op_get$27$(self, w - 1 | 0))) {
        moonbitlang$core$array$$Array$op_set$27$(self, w, moonbitlang$core$array$$Array$op_get$27$(self, i));
        w = w + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$Array$unsafe_truncate_to_length$27$(self, w);
}
function moonbitlang$core$queue$$new$179$() {
  return { length: 0, first: undefined, last: undefined };
}
function moonbitlang$core$queue$$new$109$() {
  return { length: 0, first: undefined, last: undefined };
}
function moonbitlang$core$queue$$from_array$109$(arr) {
  if (arr.length > 0) {
    const length = arr.length;
    const last = { content: moonbitlang$core$array$$Array$op_get$109$(arr, length - 1 | 0), next: undefined };
    let first;
    let _tmp = length - 2 | 0;
    let _tmp$2 = last;
    while (true) {
      const i = _tmp;
      const x = _tmp$2;
      if (i >= 0) {
        _tmp = i - 1 | 0;
        _tmp$2 = { content: moonbitlang$core$array$$Array$op_get$109$(arr, i), next: x };
        continue;
      } else {
        first = x;
        break;
      }
    }
    return { length: length, first: first, last: last };
  } else {
    return moonbitlang$core$queue$$new$109$();
  }
}
function moonbitlang$core$queue$$T$clear$179$(self) {
  self.length = 0;
  self.first = undefined;
  self.last = undefined;
}
function moonbitlang$core$queue$$T$clear$109$(self) {
  self.length = 0;
  self.first = undefined;
  self.last = undefined;
}
function moonbitlang$core$queue$$T$push$179$(self, x) {
  const cell = { content: x, next: undefined };
  const _bind = self.last;
  if (_bind === undefined) {
    self.length = 1;
    self.first = cell;
    self.last = cell;
    return;
  } else {
    const _Some = _bind;
    const _last = _Some;
    _last.next = cell;
    self.length = self.length + 1 | 0;
    self.last = cell;
    return;
  }
}
function moonbitlang$core$queue$$T$push$109$(self, x) {
  const cell = { content: x, next: undefined };
  const _bind = self.last;
  if (_bind === undefined) {
    self.length = 1;
    self.first = cell;
    self.last = cell;
    return;
  } else {
    const _Some = _bind;
    const _last = _Some;
    _last.next = cell;
    self.length = self.length + 1 | 0;
    self.last = cell;
    return;
  }
}
function moonbitlang$core$queue$$T$pop$179$(self) {
  const _bind = self.first;
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _x = _Some;
    const _content = _x.content;
    const _x$2 = _x.next;
    if (_x$2 === undefined) {
      moonbitlang$core$queue$$T$clear$179$(self);
      return _content;
    } else {
      self.length = self.length - 1 | 0;
      self.first = _x$2;
      return _content;
    }
  }
}
function moonbitlang$core$queue$$T$pop$109$(self) {
  const _bind = self.first;
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _x = _Some;
    const _content = _x.content;
    const _x$2 = _x.next;
    if (_x$2 === undefined) {
      moonbitlang$core$queue$$T$clear$109$(self);
      return _content;
    } else {
      self.length = self.length - 1 | 0;
      self.first = _x$2;
      return _content;
    }
  }
}
function moonbitlang$core$list$$T$to_array$40$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$40$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$to_array$168$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$168$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$to_array$169$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$169$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$to_array$170$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$170$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$to_array$173$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$173$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$unsafe_head$11$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$11$("head of empty list");
  } else {
    const _More = self;
    return _More._0;
  }
}
function moonbitlang$core$list$$T$unsafe_head$15$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$15$("head of empty list");
  } else {
    const _More = self;
    return _More._0;
  }
}
function moonbitlang$core$list$$T$unsafe_head$24$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$24$("head of empty list");
  } else {
    const _More = self;
    return _More._0;
  }
}
function moonbitlang$core$list$$T$unsafe_tail$11$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$10$("tail of empty list");
  } else {
    const _More = self;
    return _More._1;
  }
}
function moonbitlang$core$list$$T$unsafe_tail$15$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$14$("tail of empty list");
  } else {
    const _More = self;
    return _More._1;
  }
}
function moonbitlang$core$list$$T$unsafe_tail$24$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$23$("tail of empty list");
  } else {
    const _More = self;
    return _More._1;
  }
}
function moonbitlang$core$list$$T$rev_concat$180$(self, other) {
  let _tmp = self;
  let _tmp$2 = other;
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0.$tag === 0) {
      return _param_1;
    } else {
      const _More = _param_0;
      const _head = _More._0;
      const _tail = _More._1;
      _tmp = _tail;
      _tmp$2 = new $64$moonbitlang$47$core$47$list$46$T$More$30$(_head, _param_1);
      continue;
    }
  }
}
function moonbitlang$core$list$$T$rev$180$(self) {
  return moonbitlang$core$list$$T$rev_concat$180$(self, $64$moonbitlang$47$core$47$list$46$T$Empty$30$);
}
function moonbitlang$core$list$$T$drop$11$(self, n) {
  if (n <= 0) {
    return self;
  } else {
    let _tmp = n;
    let _tmp$2 = self;
    while (true) {
      const _param_0 = _tmp;
      const _param_1 = _tmp$2;
      if (_param_1.$tag === 0) {
        return $64$moonbitlang$47$core$47$list$46$T$Empty$23$;
      } else {
        if (_param_0 === 1) {
          const _More = _param_1;
          return _More._1;
        } else {
          const _More = _param_1;
          const _xs = _More._1;
          _tmp = _param_0 - 1 | 0;
          _tmp$2 = _xs;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$list$$T$drop$15$(self, n) {
  if (n <= 0) {
    return self;
  } else {
    let _tmp = n;
    let _tmp$2 = self;
    while (true) {
      const _param_0 = _tmp;
      const _param_1 = _tmp$2;
      if (_param_1.$tag === 0) {
        return $64$moonbitlang$47$core$47$list$46$T$Empty$24$;
      } else {
        if (_param_0 === 1) {
          const _More = _param_1;
          return _More._1;
        } else {
          const _More = _param_1;
          const _xs = _More._1;
          _tmp = _param_0 - 1 | 0;
          _tmp$2 = _xs;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$list$$T$drop$24$(self, n) {
  if (n <= 0) {
    return self;
  } else {
    let _tmp = n;
    let _tmp$2 = self;
    while (true) {
      const _param_0 = _tmp;
      const _param_1 = _tmp$2;
      if (_param_1.$tag === 0) {
        return $64$moonbitlang$47$core$47$list$46$T$Empty$26$;
      } else {
        if (_param_0 === 1) {
          const _More = _param_1;
          return _More._1;
        } else {
          const _More = _param_1;
          const _xs = _More._1;
          _tmp = _param_0 - 1 | 0;
          _tmp$2 = _xs;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$string$$StringView$view(self, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.end - self.start | 0;
  } else {
    const _Some = end_offset;
    end_offset$2 = _Some;
  }
  return start_offset >= 0 && (start_offset <= end_offset$2 && end_offset$2 <= (self.end - self.start | 0)) ? { str: self.str, start: self.start + start_offset | 0, end: self.start + end_offset$2 | 0 } : moonbitlang$core$abort$$abort$19$("Invalid index for View");
}
function moonbitlang$core$string$$String$offset_of_nth_char_backward(self, n, start_offset, end_offset) {
  let char_count = 0;
  let utf16_offset = end_offset;
  while (true) {
    if ((utf16_offset - 1 | 0) >= start_offset && char_count < n) {
      const _tmp = utf16_offset - 1 | 0;
      const c = self.charCodeAt(_tmp);
      if (56320 <= c && c <= 57343) {
        utf16_offset = utf16_offset - 2 | 0;
      } else {
        utf16_offset = utf16_offset - 1 | 0;
      }
      char_count = char_count + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return char_count < n || utf16_offset < start_offset ? undefined : utf16_offset;
}
function moonbitlang$core$string$$String$offset_of_nth_char_forward(self, n, start_offset, end_offset) {
  if (start_offset >= 0 && start_offset <= end_offset) {
    let utf16_offset = start_offset;
    let char_count = 0;
    while (true) {
      if (utf16_offset < end_offset && char_count < n) {
        const _tmp = utf16_offset;
        const c = self.charCodeAt(_tmp);
        if (55296 <= c && c <= 56319) {
          utf16_offset = utf16_offset + 2 | 0;
        } else {
          utf16_offset = utf16_offset + 1 | 0;
        }
        char_count = char_count + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return char_count < n || utf16_offset >= end_offset ? undefined : utf16_offset;
  } else {
    return moonbitlang$core$abort$$abort$18$("Invalid start index");
  }
}
function moonbitlang$core$string$$String$offset_of_nth_char(self, i, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    end_offset$2 = _Some;
  }
  return i >= 0 ? moonbitlang$core$string$$String$offset_of_nth_char_forward(self, i, start_offset, end_offset$2) : moonbitlang$core$string$$String$offset_of_nth_char_backward(self, -i | 0, start_offset, end_offset$2);
}
function moonbitlang$core$string$$String$char_length_eq(self, len, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    end_offset$2 = _Some;
  }
  let _tmp = start_offset;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const count = _tmp$2;
    if (index < end_offset$2 && count < len) {
      const c1 = self.charCodeAt(index);
      if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < end_offset$2) {
        const _tmp$3 = index + 1 | 0;
        const c2 = self.charCodeAt(_tmp$3);
        if (56320 <= c2 && c2 <= 57343) {
          _tmp = index + 2 | 0;
          _tmp$2 = count + 1 | 0;
          continue;
        } else {
          moonbitlang$core$abort$$abort$4$("invalid surrogate pair");
        }
      }
      _tmp = index + 1 | 0;
      _tmp$2 = count + 1 | 0;
      continue;
    } else {
      return count === len && index === end_offset$2;
    }
  }
}
function moonbitlang$core$string$$String$char_length_ge(self, len, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    end_offset$2 = _Some;
  }
  let _tmp = start_offset;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const count = _tmp$2;
    if (index < end_offset$2 && count < len) {
      const c1 = self.charCodeAt(index);
      if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < end_offset$2) {
        const _tmp$3 = index + 1 | 0;
        const c2 = self.charCodeAt(_tmp$3);
        if (56320 <= c2 && c2 <= 57343) {
          _tmp = index + 2 | 0;
          _tmp$2 = count + 1 | 0;
          continue;
        } else {
          moonbitlang$core$abort$$abort$4$("invalid surrogate pair");
        }
      }
      _tmp = index + 1 | 0;
      _tmp$2 = count + 1 | 0;
      continue;
    } else {
      return count >= len;
    }
  }
}
function moonbitlang$core$string$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$builtin$$Eq$op_equal$19$(self, other) {
  const len = self.end - self.start | 0;
  if (len === (other.end - other.start | 0)) {
    if (self.str === other.str && self.start === other.start) {
      return true;
    }
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = self.str;
        const _tmp$3 = self.start + i | 0;
        const _tmp$4 = _tmp$2.charCodeAt(_tmp$3);
        const _tmp$5 = other.str;
        const _tmp$6 = other.start + i | 0;
        if (_tmp$4 === _tmp$5.charCodeAt(_tmp$6)) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$string$$String$from_array(chars) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(chars.length, 4) | 0);
  const _len = chars.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const c = chars[_i];
      moonbitlang$core$builtin$$Logger$write_char$38$(buf, c);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return buf.val;
}
function moonbitlang$core$builtin$$Compare$compare$0$(self, other) {
  const len = self.length;
  const _bind = $compare_int(len, other.length);
  if (_bind === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const order = $compare_int(self.charCodeAt(i), other.charCodeAt(i));
        if (order !== 0) {
          return order;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 0;
  } else {
    return _bind;
  }
}
function moonbitlang$core$string$$String$to_bytes(self) {
  const array = $makebytes(Math.imul(self.length, 2) | 0, 0);
  moonbitlang$core$array$$FixedArray$blit_from_string(array, 0, self, 0, self.length);
  return array;
}
function moonbitlang$core$string$$String$iter(self) {
  const _p = (yield_) => {
    const len = self.length;
    let _tmp = 0;
    while (true) {
      const index = _tmp;
      if (index < len) {
        const c1 = self.charCodeAt(index);
        if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < len) {
          const _tmp$2 = index + 1 | 0;
          const c2 = self.charCodeAt(_tmp$2);
          if (56320 <= c2 && c2 <= 57343) {
            const c = moonbitlang$core$string$$code_point_of_surrogate_pair(c1, c2);
            const _bind = yield_(c);
            if (_bind === 1) {
              _tmp = index + 2 | 0;
              continue;
            } else {
              return 0;
            }
          }
        }
        const _bind = yield_(c1);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = index + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$string$$String$to_array(self) {
  const _bind = moonbitlang$core$string$$String$iter(self);
  const _bind$2 = moonbitlang$core$array$$Array$new$68$(self.length);
  const _acc = { val: _bind$2 };
  _bind((_p) => {
    const rv = _acc.val;
    moonbitlang$core$array$$Array$push$68$(rv, _p);
    _acc.val = rv;
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$string$$boyer_moore_horspool_find(haystack, needle) {
  const haystack_len = haystack.end - haystack.start | 0;
  const needle_len = needle.end - needle.start | 0;
  if (needle_len > 0) {
    if (haystack_len >= needle_len) {
      const skip_table = $make_array_len_and_init(256, needle_len);
      const _end328 = needle_len - 1 | 0;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end328) {
          const _tmp$2 = needle.str;
          const _tmp$3 = needle.start + i | 0;
          const _tmp$4 = _tmp$2.charCodeAt(_tmp$3) & 255;
          $bound_check(skip_table, _tmp$4);
          skip_table[_tmp$4] = (needle_len - 1 | 0) - i | 0;
          _tmp = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _tmp$2 = 0;
      while (true) {
        const i = _tmp$2;
        if (i <= (haystack_len - needle_len | 0)) {
          const _end334 = needle_len - 1 | 0;
          let _tmp$3 = 0;
          while (true) {
            const j = _tmp$3;
            if (j <= _end334) {
              const _p = i + j | 0;
              const _tmp$4 = haystack.str;
              const _tmp$5 = haystack.start + _p | 0;
              const _tmp$6 = _tmp$4.charCodeAt(_tmp$5);
              const _tmp$7 = needle.str;
              const _tmp$8 = needle.start + j | 0;
              if (_tmp$6 !== _tmp$7.charCodeAt(_tmp$8)) {
                break;
              }
              _tmp$3 = j + 1 | 0;
              continue;
            } else {
              return i;
            }
          }
          const _p = (i + needle_len | 0) - 1 | 0;
          const _tmp$4 = haystack.str;
          const _tmp$5 = haystack.start + _p | 0;
          const _tmp$6 = _tmp$4.charCodeAt(_tmp$5) & 255;
          $bound_check(skip_table, _tmp$6);
          _tmp$2 = i + skip_table[_tmp$6] | 0;
          continue;
        } else {
          break;
        }
      }
      return undefined;
    } else {
      return undefined;
    }
  } else {
    return 0;
  }
}
function moonbitlang$core$string$$brute_force_find(haystack, needle) {
  const haystack_len = haystack.end - haystack.start | 0;
  const needle_len = needle.end - needle.start | 0;
  if (needle_len > 0) {
    if (haystack_len >= needle_len) {
      const _p = 0;
      const _tmp = needle.str;
      const _tmp$2 = needle.start + _p | 0;
      const needle_first = _tmp.charCodeAt(_tmp$2);
      const forward_len = haystack_len - needle_len | 0;
      let i = 0;
      while (true) {
        if (i <= forward_len) {
          while (true) {
            let _tmp$3;
            if (i <= forward_len) {
              const _p$2 = i;
              const _tmp$4 = haystack.str;
              const _tmp$5 = haystack.start + _p$2 | 0;
              _tmp$3 = _tmp$4.charCodeAt(_tmp$5) !== needle_first;
            } else {
              _tmp$3 = false;
            }
            if (_tmp$3) {
              i = i + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          if (i <= forward_len) {
            let _tmp$3 = 1;
            while (true) {
              const j = _tmp$3;
              if (j < needle_len) {
                const _p$2 = i + j | 0;
                const _tmp$4 = haystack.str;
                const _tmp$5 = haystack.start + _p$2 | 0;
                const _tmp$6 = _tmp$4.charCodeAt(_tmp$5);
                const _tmp$7 = needle.str;
                const _tmp$8 = needle.start + j | 0;
                if (_tmp$6 !== _tmp$7.charCodeAt(_tmp$8)) {
                  break;
                }
                _tmp$3 = j + 1 | 0;
                continue;
              } else {
                return i;
              }
            }
            i = i + 1 | 0;
          }
          continue;
        } else {
          break;
        }
      }
      return undefined;
    } else {
      return undefined;
    }
  } else {
    return 0;
  }
}
function moonbitlang$core$string$$StringView$find(self, str) {
  return (str.end - str.start | 0) <= 4 ? moonbitlang$core$string$$brute_force_find(self, str) : moonbitlang$core$string$$boyer_moore_horspool_find(self, str);
}
function moonbitlang$core$string$$String$find(self, str) {
  return moonbitlang$core$string$$StringView$find({ str: self, start: 0, end: self.length }, str);
}
function moonbitlang$core$string$$boyer_moore_horspool_rev_find(haystack, needle) {
  const haystack_len = haystack.end - haystack.start | 0;
  const needle_len = needle.end - needle.start | 0;
  if (needle_len > 0) {
    if (haystack_len >= needle_len) {
      const skip_table = $make_array_len_and_init(256, needle_len);
      let _tmp = needle_len - 1 | 0;
      while (true) {
        const i = _tmp;
        if (i > 0) {
          const _tmp$2 = needle.str;
          const _tmp$3 = needle.start + i | 0;
          const _tmp$4 = _tmp$2.charCodeAt(_tmp$3) & 255;
          $bound_check(skip_table, _tmp$4);
          skip_table[_tmp$4] = i;
          _tmp = i - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _tmp$2 = haystack_len - needle_len | 0;
      while (true) {
        const i = _tmp$2;
        if (i >= 0) {
          let _tmp$3 = 0;
          while (true) {
            const j = _tmp$3;
            if (j < needle_len) {
              const _p = i + j | 0;
              const _tmp$4 = haystack.str;
              const _tmp$5 = haystack.start + _p | 0;
              const _tmp$6 = _tmp$4.charCodeAt(_tmp$5);
              const _tmp$7 = needle.str;
              const _tmp$8 = needle.start + j | 0;
              if (_tmp$6 !== _tmp$7.charCodeAt(_tmp$8)) {
                break;
              }
              _tmp$3 = j + 1 | 0;
              continue;
            } else {
              return i;
            }
          }
          const _tmp$4 = haystack.str;
          const _tmp$5 = haystack.start + i | 0;
          const _tmp$6 = _tmp$4.charCodeAt(_tmp$5) & 255;
          $bound_check(skip_table, _tmp$6);
          _tmp$2 = i - skip_table[_tmp$6] | 0;
          continue;
        } else {
          break;
        }
      }
      return undefined;
    } else {
      return undefined;
    }
  } else {
    return haystack_len;
  }
}
function moonbitlang$core$string$$brute_force_rev_find(haystack, needle) {
  const haystack_len = haystack.end - haystack.start | 0;
  const needle_len = needle.end - needle.start | 0;
  if (needle_len > 0) {
    if (haystack_len >= needle_len) {
      const _p = 0;
      const _tmp = needle.str;
      const _tmp$2 = needle.start + _p | 0;
      const needle_first = _tmp.charCodeAt(_tmp$2);
      let i = haystack_len - needle_len | 0;
      while (true) {
        if (i >= 0) {
          while (true) {
            let _tmp$3;
            if (i >= 0) {
              const _p$2 = i;
              const _tmp$4 = haystack.str;
              const _tmp$5 = haystack.start + _p$2 | 0;
              _tmp$3 = _tmp$4.charCodeAt(_tmp$5) !== needle_first;
            } else {
              _tmp$3 = false;
            }
            if (_tmp$3) {
              i = i - 1 | 0;
              continue;
            } else {
              break;
            }
          }
          if (i >= 0) {
            let _tmp$3 = 1;
            while (true) {
              const j = _tmp$3;
              if (j < needle_len) {
                const _p$2 = i + j | 0;
                const _tmp$4 = haystack.str;
                const _tmp$5 = haystack.start + _p$2 | 0;
                const _tmp$6 = _tmp$4.charCodeAt(_tmp$5);
                const _tmp$7 = needle.str;
                const _tmp$8 = needle.start + j | 0;
                if (_tmp$6 !== _tmp$7.charCodeAt(_tmp$8)) {
                  break;
                }
                _tmp$3 = j + 1 | 0;
                continue;
              } else {
                return i;
              }
            }
            i = i - 1 | 0;
          }
          continue;
        } else {
          break;
        }
      }
      return undefined;
    } else {
      return undefined;
    }
  } else {
    return haystack_len;
  }
}
function moonbitlang$core$string$$StringView$rev_find(self, str) {
  return (str.end - str.start | 0) <= 4 ? moonbitlang$core$string$$brute_force_rev_find(self, str) : moonbitlang$core$string$$boyer_moore_horspool_rev_find(self, str);
}
function moonbitlang$core$string$$String$rev_find(self, str) {
  return moonbitlang$core$string$$StringView$rev_find({ str: self, start: 0, end: self.length }, str);
}
function moonbitlang$core$string$$String$get_char(self, idx) {
  if (idx >= 0 && idx < self.length) {
    const c = self.charCodeAt(idx);
    if (55296 <= c && c <= 56319) {
      if ((idx + 1 | 0) < self.length) {
        const _tmp = idx + 1 | 0;
        const next = self.charCodeAt(_tmp);
        return 56320 <= next && next <= 57343 ? moonbitlang$core$string$$code_point_of_surrogate_pair(c, next) : -1;
      } else {
        return -1;
      }
    } else {
      return 56320 <= c && c <= 57343 ? -1 : c;
    }
  } else {
    return -1;
  }
}
function moonbitlang$core$buffer$$T$grow_if_necessary(self, required) {
  const start = self.data.length <= 0 ? 1 : self.data.length;
  let enough_space;
  let _tmp = start;
  while (true) {
    const space = _tmp;
    if (space >= required) {
      enough_space = space;
      break;
    }
    _tmp = Math.imul(space, 2) | 0;
    continue;
  }
  if (enough_space !== self.data.length) {
    const new_data = $makebytes(enough_space, 0);
    moonbitlang$core$array$$FixedArray$unsafe_blit$17$(new_data, 0, self.data, 0, self.len);
    self.data = new_data;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$buffer$$T$contents(self) {
  return moonbitlang$core$bytes$$from_fixedarray(self.data, self.len);
}
function moonbitlang$core$buffer$$new(size_hint) {
  const initial = size_hint < 1 ? 1 : size_hint;
  const data = $makebytes(initial, 0);
  return { data: data, len: 0, initial_data: data };
}
function moonbitlang$core$buffer$$T$write_byte(self, value) {
  moonbitlang$core$buffer$$T$grow_if_necessary(self, self.len + 1 | 0);
  const _tmp = self.data;
  const _tmp$2 = self.len;
  $bound_check(_tmp, _tmp$2);
  _tmp[_tmp$2] = value;
  self.len = self.len + 1 | 0;
}
function moonbitlang$core$buffer$$T$write_bytes(self, value) {
  const val_len = value.length;
  moonbitlang$core$buffer$$T$grow_if_necessary(self, self.len + val_len | 0);
  moonbitlang$core$array$$FixedArray$blit_from_bytes(self.data, self.len, value, 0, val_len);
  self.len = self.len + val_len | 0;
}
function moonbitlang$core$buffer$$T$write_iter(self, iter) {
  iter((byte) => {
    moonbitlang$core$buffer$$T$write_byte(self, byte);
    return 1;
  });
}
function moonbitlang$core$buffer$$T$to_bytes(self) {
  return moonbitlang$core$bytes$$from_fixedarray(self.data, self.len);
}
function moonbitlang$ulex$lib$util$diet$$Tree$size$3$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$size$68$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    return _Node._2;
  }
}
function moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, r) {
  const size = (moonbitlang$ulex$lib$util$diet$$Tree$size$3$(l) + moonbitlang$ulex$lib$util$diet$$Tree$size$3$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$1$(l, r, size, min, max);
}
function moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, l, r) {
  const size = (moonbitlang$ulex$lib$util$diet$$Tree$size$68$(l) + moonbitlang$ulex$lib$util$diet$$Tree$size$68$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$0$(l, r, size, min, max);
}
function moonbitlang$ulex$lib$util$diet$$single_l$3$(min, max, l, r) {
  if (r.$tag === 1) {
    const _Node = r;
    return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, _Node._0), _Node._1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$single_l$68$(min, max, l, r) {
  if (r.$tag === 1) {
    const _Node = r;
    return moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, l, _Node._0), _Node._1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$single_r$3$(min, max, l, r) {
  if (l.$tag === 1) {
    const _Node = l;
    return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, _Node._1, r));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$single_r$68$(min, max, l, r) {
  if (l.$tag === 1) {
    const _Node = l;
    return moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, _Node._1, r));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$double_l$3$(min, max, l, r) {
  _L: {
    if (r.$tag === 1) {
      const _Node = r;
      const _x = _Node._0;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node$2._1, _Node._1));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$double_l$68$(min, max, l, r) {
  _L: {
    if (r.$tag === 1) {
      const _Node = r;
      const _x = _Node._0;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, l, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node._3, _Node._4, _Node$2._1, _Node._1));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$double_r$3$(min, max, l, r) {
  _L: {
    if (l.$tag === 1) {
      const _Node = l;
      const _x = _Node._1;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node._0, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, _Node$2._1, r));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$double_r$68$(min, max, l, r) {
  _L: {
    if (l.$tag === 1) {
      const _Node = l;
      const _x = _Node._1;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node._3, _Node._4, _Node._0, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, _Node$2._1, r));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$balance$3$(min, max, l, r) {
  const l_size = moonbitlang$ulex$lib$util$diet$$Tree$size$3$(l);
  const r_size = moonbitlang$ulex$lib$util$diet$$Tree$size$3$(r);
  if ((l_size + r_size | 0) <= 1) {
    return moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, r);
  } else {
    if ((r_size + 1 | 0) > (Math.imul(3, l_size + 1 | 0) | 0)) {
      if (r.$tag === 1) {
        const _Node = r;
        return (moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._0) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._1) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_l$3$(min, max, l, _Node) : moonbitlang$ulex$lib$util$diet$$double_l$3$(min, max, l, _Node);
      } else {
        return $panic();
      }
    } else {
      if ((l_size + 1 | 0) > (Math.imul(3, r_size + 1 | 0) | 0)) {
        if (l.$tag === 1) {
          const _Node = l;
          return (moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._1) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._0) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_r$3$(min, max, _Node, r) : moonbitlang$ulex$lib$util$diet$$double_r$3$(min, max, _Node, r);
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, r);
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$balance$68$(min, max, l, r) {
  const l_size = moonbitlang$ulex$lib$util$diet$$Tree$size$68$(l);
  const r_size = moonbitlang$ulex$lib$util$diet$$Tree$size$68$(r);
  if ((l_size + r_size | 0) <= 1) {
    return moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, l, r);
  } else {
    if ((r_size + 1 | 0) > (Math.imul(3, l_size + 1 | 0) | 0)) {
      if (r.$tag === 1) {
        const _Node = r;
        return (moonbitlang$ulex$lib$util$diet$$Tree$size$68$(_Node._0) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$68$(_Node._1) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_l$68$(min, max, l, _Node) : moonbitlang$ulex$lib$util$diet$$double_l$68$(min, max, l, _Node);
      } else {
        return $panic();
      }
    } else {
      if ((l_size + 1 | 0) > (Math.imul(3, r_size + 1 | 0) | 0)) {
        if (l.$tag === 1) {
          const _Node = l;
          return (moonbitlang$ulex$lib$util$diet$$Tree$size$68$(_Node._1) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$68$(_Node._0) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_r$68$(min, max, _Node, r) : moonbitlang$ulex$lib$util$diet$$double_r$68$(min, max, _Node, r);
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, l, r);
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _x = _Node._0;
    if (_x.$tag === 0) {
      const _right = _Node._1;
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _right };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(_Node._0);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _l = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _l, _Node._1) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_leftmost$68$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _x = _Node._0;
    if (_x.$tag === 0) {
      const _right = _Node._1;
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _right };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$68$(_Node._0);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _l = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node._3, _Node._4, _l, _Node._1) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$concat$3$(l, r) {
  if (l.$tag === 0) {
    return r;
  } else {
    if (r.$tag === 0) {
      return l;
    } else {
      const _Node = l;
      const _Node$2 = r;
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(_Node$2);
      const _x = _bind._0;
      const _min = _x._0;
      const _max = _x._1;
      const _r = _bind._1;
      return moonbitlang$ulex$lib$util$diet$$balance$3$(_min, _max, _Node, _r);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$concat$68$(l, r) {
  if (l.$tag === 0) {
    return r;
  } else {
    if (r.$tag === 0) {
      return l;
    } else {
      const _Node = l;
      const _Node$2 = r;
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$68$(_Node$2);
      const _x = _bind._0;
      const _min = _x._0;
      const _max = _x._1;
      const _r = _bind._1;
      return moonbitlang$ulex$lib$util$diet$$balance$68$(_min, _max, _Node, _r);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_rightmost$3$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _left = _Node._0;
    const _x = _Node._1;
    if (_x.$tag === 0) {
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _left };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_rightmost$3$(_Node._1);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _r = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node._0, _r) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_rightmost$68$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _left = _Node._0;
    const _x = _Node._1;
    if (_x.$tag === 0) {
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _left };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_rightmost$68$(_Node._1);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _r = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$68$(_Node._3, _Node._4, _Node._0, _r) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$3$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      moonbitlang$core$array$$Array$push$171$(self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$68$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      moonbitlang$core$array$$Array$push$174$(self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(root) {
  const it = [];
  moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$3$(it, root);
  return it;
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$new$68$(root) {
  const it = [];
  moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$68$(it, root);
  return it;
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$171$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _min = _Node._3;
      const _max = _Node._4;
      const _right = _Node._1;
      moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$3$(self, _right);
      return { _0: _min, _1: _max };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$next$68$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$174$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _min = _Node._3;
      const _max = _Node._4;
      const _right = _Node._1;
      moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$68$(self, _right);
      return { _0: _min, _1: _max };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$181$(self, other) {
  const iter = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(self);
  const iter1 = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(other);
  let _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (moonbitlang$core$builtin$$Eq$op_equal$142$(_a, _b)) {
          _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
          _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$182$(self, other) {
  const iter = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$68$(self);
  const iter1 = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$68$(other);
  let _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$68$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$68$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (_a._0 === _b._0 && _a._1 === _b._1) {
          _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$68$(iter);
          _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$68$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$181$(self, other) {
  const iter = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(self);
  const iter1 = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(other);
  let _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined ? 0 : -1;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        const cmp = moonbitlang$core$builtin$$Compare$compare$142$(_a, _b);
        if (cmp === 0) {
          _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
          _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(self) {
  const _p = (yield_) => {
    if (self.$tag === 0) {
      return 1;
    } else {
      const _Node = self;
      const _bind = moonbitlang$core$builtin$$Iter$run$175$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(_Node._0), yield_);
      if (_bind === 1) {
        const _bind$2 = yield_({ _0: _Node._3, _1: _Node._4 });
        if (_bind$2 === 1) {
          const _bind$3 = moonbitlang$core$builtin$$Iter$run$175$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(_Node._1), yield_);
          if (_bind$3 === 1) {
            return 1;
          } else {
            return 0;
          }
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  };
  return _p;
}
function moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$68$(self) {
  const _p = (yield_) => {
    if (self.$tag === 0) {
      return 1;
    } else {
      const _Node = self;
      const _bind = moonbitlang$core$builtin$$Iter$run$172$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$68$(_Node._0), yield_);
      if (_bind === 1) {
        const _bind$2 = yield_({ _0: _Node._3, _1: _Node._4 });
        if (_bind$2 === 1) {
          const _bind$3 = moonbitlang$core$builtin$$Iter$run$172$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$68$(_Node._1), yield_);
          if (_bind$3 === 1) {
            return 1;
          } else {
            return 0;
          }
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Hash$hash_combine$181$(self, hasher) {
  const _bind = moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(self);
  _bind((interval) => {
    moonbitlang$core$builtin$$Hash$hash_combine$142$(interval, hasher);
    return 1;
  });
}
function moonbitlang$core$builtin$$Hash$hash_combine$182$(self, hasher) {
  const _bind = moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$68$(self);
  _bind((interval) => {
    moonbitlang$core$builtin$$Hash$hash_combine$143$(interval, hasher);
    return 1;
  });
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, x) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      const _Node = self$2;
      if (moonbitlang$core$builtin$$op_lt$3$(x, _Node._3)) {
        return moonbitlang$ulex$lib$util$diet$$balance$3$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(_Node._0, x), _Node._1);
      } else {
        if (moonbitlang$core$builtin$$op_gt$3$(x, _Node._4)) {
          _tmp = _Node._1;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$3$(x, _Node._4, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$, _Node._1);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_from$68$(self, x) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _Node = self$2;
      if (x < _Node._3) {
        return moonbitlang$ulex$lib$util$diet$$balance$68$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$Tree$slice_from$68$(_Node._0, x), _Node._1);
      } else {
        if (x > _Node._4) {
          _tmp = _Node._1;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$68$(x, _Node._4, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$, _Node._1);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_until$3$(self, x) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      const _Node = self$2;
      if (moonbitlang$core$builtin$$op_gt$3$(x, _Node._4)) {
        return moonbitlang$ulex$lib$util$diet$$balance$3$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$Tree$slice_until$3$(_Node._1, x));
      } else {
        if (moonbitlang$core$builtin$$op_lt$3$(x, _Node._3)) {
          _tmp = _Node._0;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$3$(_Node._3, x, _Node._0, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_until$68$(self, x) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _Node = self$2;
      if (x > _Node._4) {
        return moonbitlang$ulex$lib$util$diet$$balance$68$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$Tree$slice_until$68$(_Node._1, x));
      } else {
        if (x < _Node._3) {
          _tmp = _Node._0;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$68$(_Node._3, x, _Node._0, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_before$3$(self, x) {
  const _p = -1;
  if (x === _p) {
    return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
  } else {
    return moonbitlang$ulex$lib$util$diet$$Tree$slice_until$3$(self, x > -1 ? x - 1 | 0 : $panic());
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_before$68$(self, x) {
  return x === 0 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ : moonbitlang$ulex$lib$util$diet$$Tree$slice_until$68$(self, x - 1 | 0);
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_after$3$(self, x) {
  const _p = 1114111;
  if (x === _p) {
    return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
  } else {
    return moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, x < 1114111 ? x + 1 | 0 : $panic());
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_after$68$(self, x) {
  return x === 1114111 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ : moonbitlang$ulex$lib$util$diet$$Tree$slice_from$68$(self, x + 1 | 0);
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice$3$(self, min, max) {
  if (min === undefined) {
    if (max === undefined) {
      return $panic();
    } else {
      const _Some = max;
      const _max = _Some;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_until$3$(self, _max);
    }
  } else {
    const _Some = min;
    const _min = _Some;
    if (max === undefined) {
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, _min);
    } else {
      const _Some$2 = max;
      const _max = _Some$2;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_until$3$(moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, _min), _max);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice$68$(self, min, max) {
  if (min === -1) {
    if (max === -1) {
      return $panic();
    } else {
      const _Some = max;
      const _max = _Some;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_until$68$(self, _max);
    }
  } else {
    const _Some = min;
    const _min = _Some;
    if (max === -1) {
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_from$68$(self, _min);
    } else {
      const _Some$2 = max;
      const _max = _Some$2;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_until$68$(moonbitlang$ulex$lib$util$diet$$Tree$slice_from$68$(self, _min), _max);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$is_empty$3$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$is_empty$68$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$contains$3$(self, x) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return false;
    } else {
      const _Node = self$2;
      if (moonbitlang$core$builtin$$op_lt$3$(x, _Node._3)) {
        _tmp = _Node._0;
        continue;
      } else {
        if (moonbitlang$core$builtin$$op_gt$3$(x, _Node._4)) {
          _tmp = _Node._1;
          continue;
        } else {
          return true;
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$union$3$(t1, t2) {
  let t;
  _L: {
    if (t1.$tag === 0) {
      if (t2.$tag === 0) {
        return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
      } else {
        const _Node = t2;
        t = _Node;
        break _L;
      }
    } else {
      const _Node = t1;
      if (t2.$tag === 0) {
        t = _Node;
        break _L;
      } else {
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$union_aux$3$(t1$2, t2$2);
      }
    }
  }
  return t;
}
function moonbitlang$ulex$lib$util$diet$$union$68$(t1, t2) {
  let t;
  _L: {
    if (t1.$tag === 0) {
      if (t2.$tag === 0) {
        return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
      } else {
        const _Node = t2;
        t = _Node;
        break _L;
      }
    } else {
      const _Node = t1;
      if (t2.$tag === 0) {
        t = _Node;
        break _L;
      } else {
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$union_aux$68$(t1$2, t2$2);
      }
    }
  }
  return t;
}
function moonbitlang$ulex$lib$util$diet$$union_aux$3$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$3$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$3$(_Node$2, _Node._4);
      let _bind;
      const _p = _Node._3;
      const _p$2 = -1;
      if (_p === _p$2) {
        _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
      } else {
        const l = moonbitlang$ulex$lib$util$diet$$union$3$(l1, l2);
        if (l.$tag === 0) {
          _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
        } else {
          const _bind$2 = moonbitlang$ulex$lib$util$diet$$split_rightmost$3$(l);
          const _x = _bind$2._0;
          const _min = _x._0;
          const _max = _x._1;
          const _l3 = _bind$2._1;
          let _tmp;
          if (moonbitlang$core$builtin$$op_lt$3$(_max, 1114111)) {
            const _p$3 = _max < 1114111 ? _max + 1 | 0 : $panic();
            const _p$4 = _Node._3;
            _tmp = _p$3 === _p$4;
          } else {
            _tmp = false;
          }
          if (_tmp) {
            _bind = { _0: _min, _1: _l3 };
          } else {
            _bind = { _0: _Node._3, _1: l };
          }
        }
      }
      const _min = _bind._0;
      const _l = _bind._1;
      let _bind$2;
      const _p$3 = _Node._4;
      const _p$4 = 1114111;
      if (_p$3 === _p$4) {
        _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
      } else {
        const r = moonbitlang$ulex$lib$util$diet$$union$3$(r1, r2);
        if (r.$tag === 0) {
          _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
        } else {
          const _bind$3 = moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(r);
          const _x = _bind$3._0;
          const _min$2 = _x._0;
          const _max = _x._1;
          const _r3 = _bind$3._1;
          let _tmp;
          if (moonbitlang$core$builtin$$op_gt$3$(_min$2, -1)) {
            const _p$5 = _min$2 > -1 ? _min$2 - 1 | 0 : $panic();
            const _p$6 = _Node._4;
            _tmp = _p$5 === _p$6;
          } else {
            _tmp = false;
          }
          if (_tmp) {
            _bind$2 = { _0: _max, _1: _r3 };
          } else {
            _bind$2 = { _0: _Node._4, _1: r };
          }
        }
      }
      const _max = _bind$2._0;
      const _r = _bind$2._1;
      return moonbitlang$ulex$lib$util$diet$$balance$3$(_min, _max, _l, _r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$union_aux$68$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$68$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$68$(_Node$2, _Node._4);
      let _bind;
      if (_Node._3 === 0) {
        _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
      } else {
        const l = moonbitlang$ulex$lib$util$diet$$union$68$(l1, l2);
        if (l.$tag === 0) {
          _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
        } else {
          const _bind$2 = moonbitlang$ulex$lib$util$diet$$split_rightmost$68$(l);
          const _x = _bind$2._0;
          const _min = _x._0;
          const _max = _x._1;
          const _l3 = _bind$2._1;
          _bind = _max < 1114111 && (_max + 1 | 0) === _Node._3 ? { _0: _min, _1: _l3 } : { _0: _Node._3, _1: l };
        }
      }
      const _min = _bind._0;
      const _l = _bind._1;
      let _bind$2;
      if (_Node._4 === 1114111) {
        _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
      } else {
        const r = moonbitlang$ulex$lib$util$diet$$union$68$(r1, r2);
        if (r.$tag === 0) {
          _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
        } else {
          const _bind$3 = moonbitlang$ulex$lib$util$diet$$split_leftmost$68$(r);
          const _x = _bind$3._0;
          const _min$2 = _x._0;
          const _max = _x._1;
          const _r3 = _bind$3._1;
          _bind$2 = _min$2 > 0 && (_min$2 - 1 | 0) === _Node._4 ? { _0: _max, _1: _r3 } : { _0: _Node._4, _1: r };
        }
      }
      const _max = _bind$2._0;
      const _r = _bind$2._1;
      return moonbitlang$ulex$lib$util$diet$$balance$68$(_min, _max, _l, _r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$intersection$3$(t1, t2) {
  _L: {
    if (t1.$tag === 0) {
      break _L;
    } else {
      if (t2.$tag === 0) {
        break _L;
      } else {
        const _Node = t1;
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$intersection_aux$3$(t1$2, t2$2);
      }
    }
  }
  return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
}
function moonbitlang$ulex$lib$util$diet$$intersection$68$(t1, t2) {
  _L: {
    if (t1.$tag === 0) {
      break _L;
    } else {
      if (t2.$tag === 0) {
        break _L;
      } else {
        const _Node = t1;
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$intersection_aux$68$(t1$2, t2$2);
      }
    }
  }
  return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
}
function moonbitlang$ulex$lib$util$diet$$intersection_aux$3$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$3$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$3$(_Node$2, _Node._4);
      const l = moonbitlang$ulex$lib$util$diet$$intersection$3$(l1, l2);
      const r = moonbitlang$ulex$lib$util$diet$$intersection$3$(r1, r2);
      const m = moonbitlang$ulex$lib$util$diet$$Tree$slice$3$(_Node$2, _Node._3, _Node._4);
      return moonbitlang$ulex$lib$util$diet$$concat$3$(moonbitlang$ulex$lib$util$diet$$concat$3$(l, m), r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$intersection_aux$68$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$68$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$68$(_Node$2, _Node._4);
      const l = moonbitlang$ulex$lib$util$diet$$intersection$68$(l1, l2);
      const r = moonbitlang$ulex$lib$util$diet$$intersection$68$(r1, r2);
      const m = moonbitlang$ulex$lib$util$diet$$Tree$slice$68$(_Node$2, _Node._3, _Node._4);
      return moonbitlang$ulex$lib$util$diet$$concat$68$(moonbitlang$ulex$lib$util$diet$$concat$68$(l, m), r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$interval$68$(min, max) {
  return moonbitlang$ulex$lib$util$diet$$make_node$68$(min, max, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$);
}
function moonbitlang$ulex$lib$util$diet$$interval$3$(min, max) {
  return moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$);
}
function moonbitlang$ulex$lib$util$diet$$complement_aux$3$(min, max, t) {
  if (t.$tag === 0) {
    return moonbitlang$ulex$lib$util$diet$$interval$3$(min, max);
  } else {
    const _Node = t;
    let l;
    const _p = _Node._3;
    const _p$2 = -1;
    if (_p === _p$2) {
      l = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      const _p$3 = _Node._3;
      const _tmp = _p$3 > -1 ? _p$3 - 1 | 0 : $panic();
      l = moonbitlang$ulex$lib$util$diet$$complement_aux$3$(min, _tmp, _Node._0);
    }
    let r;
    const _p$3 = _Node._4;
    const _p$4 = 1114111;
    if (_p$3 === _p$4) {
      r = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      const _p$5 = _Node._4;
      const _tmp = _p$5 < 1114111 ? _p$5 + 1 | 0 : $panic();
      r = moonbitlang$ulex$lib$util$diet$$complement_aux$3$(_tmp, max, _Node._1);
    }
    return moonbitlang$ulex$lib$util$diet$$concat$3$(l, r);
  }
}
function moonbitlang$ulex$lib$util$diet$$complement_aux$68$(min, max, t) {
  if (t.$tag === 0) {
    return moonbitlang$ulex$lib$util$diet$$interval$68$(min, max);
  } else {
    const _Node = t;
    let l;
    if (_Node._3 === 0) {
      l = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _p = _Node._3;
      const _tmp = _p - 1 | 0;
      l = moonbitlang$ulex$lib$util$diet$$complement_aux$68$(min, _tmp, _Node._0);
    }
    let r;
    if (_Node._4 === 1114111) {
      r = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _p = _Node._4;
      const _tmp = _p + 1 | 0;
      r = moonbitlang$ulex$lib$util$diet$$complement_aux$68$(_tmp, max, _Node._1);
    }
    return moonbitlang$ulex$lib$util$diet$$concat$68$(l, r);
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$complement$3$(self) {
  return moonbitlang$ulex$lib$util$diet$$complement_aux$3$(-1, 1114111, self);
}
function moonbitlang$ulex$lib$util$diet$$Tree$complement$68$(self) {
  return moonbitlang$ulex$lib$util$diet$$complement_aux$68$(0, 1114111, self);
}
function moonbitlang$ulex$lib$util$diet$$difference$3$(t1, t2) {
  return moonbitlang$ulex$lib$util$diet$$intersection$3$(t1, moonbitlang$ulex$lib$util$diet$$Tree$complement$3$(t2));
}
function moonbitlang$ulex$lib$util$diet$$difference$68$(t1, t2) {
  return moonbitlang$ulex$lib$util$diet$$intersection$68$(t1, moonbitlang$ulex$lib$util$diet$$Tree$complement$68$(t2));
}
function moonbitlang$ulex$lib$util$diet$$Tree$unsafe_choose$3$(self) {
  if (self.$tag === 0) {
    return $panic();
  } else {
    const _Node = self;
    return _Node._3;
  }
}
function moonbitlang$ulex$lib$util$diet$$singleton$3$(x) {
  return moonbitlang$ulex$lib$util$diet$$make_node$3$(x, x, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$);
}
function moonbitlang$ulex$lib$util$diet$$singleton$68$(x) {
  return moonbitlang$ulex$lib$util$diet$$make_node$68$(x, x, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$);
}
function moonbitlang$core$builtin$$Eq$op_equal$41$(_x_47, _x_48) {
  return moonbitlang$core$builtin$$Eq$op_equal$182$(_x_47, _x_48);
}
function moonbitlang$core$builtin$$Hash$hash_combine$41$(_x_43, _x_44) {
  moonbitlang$core$builtin$$Hash$hash_combine$182$(_x_43, _x_44);
}
function moonbitlang$ulex$lib$util$char_set$$singleton(x) {
  return moonbitlang$ulex$lib$util$diet$$singleton$68$(x);
}
function moonbitlang$ulex$lib$util$char_set$$range(min, max) {
  return moonbitlang$ulex$lib$util$diet$$interval$68$(min, max);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$complement(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$complement$68$(self);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$negated(self) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$complement(self);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$is_empty(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$is_empty$68$(self);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$union(self, other) {
  return moonbitlang$ulex$lib$util$diet$$union$68$(self, other);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$intersection(self, other) {
  return moonbitlang$ulex$lib$util$diet$$intersection$68$(self, other);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$difference(self, other) {
  return moonbitlang$ulex$lib$util$diet$$difference$68$(self, other);
}
function moonbitlang$core$builtin$$Add$op_add$41$(self, other) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$union(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$41$(self, other) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$difference(self, other);
}
function moonbitlang$core$builtin$$BitAnd$land$41$(self, other) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$intersection(self, other);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$68$(self);
}
function moonbitlang$x$encoding$$slice(bytes, offset, length) {
  const new_bytes = $makebytes(length, 48);
  moonbitlang$core$array$$FixedArray$blit_to$17$(bytes, new_bytes, length, offset, 0);
  return moonbitlang$core$bytes$$Bytes$from_fixedarray(new_bytes, undefined);
}
function moonbitlang$x$encoding$$malformed(bytes, offset, length) {
  return new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(moonbitlang$x$encoding$$slice(bytes, offset, length));
}
function moonbitlang$x$encoding$$malformed_pair(be, hi, bytes, offset, length) {
  const bs1 = $makebytes(length, 0);
  moonbitlang$core$array$$FixedArray$blit_to$17$(bytes, bs1, length, offset, 0);
  const bs0 = $makebytes(2, 0);
  let j0;
  let j1;
  _L: {
    if (be) {
      j0 = 0;
      j1 = 1;
      break _L;
    } else {
      j0 = 1;
      j1 = 0;
      break _L;
    }
  }
  $bound_check(bs0, j0);
  bs0[j0] = hi >> 8 & 255;
  $bound_check(bs0, j1);
  bs0[j1] = hi & 255;
  const bs = moonbitlang$core$buffer$$new(bs0.length + bs1.length | 0);
  moonbitlang$core$buffer$$T$write_bytes(bs, moonbitlang$core$bytes$$Bytes$from_fixedarray(bs0, 2));
  moonbitlang$core$buffer$$T$write_bytes(bs, moonbitlang$core$bytes$$Bytes$from_fixedarray(bs1, length));
  return new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(moonbitlang$x$encoding$$slice(moonbitlang$core$bytes$$Bytes$to_fixedarray(moonbitlang$core$buffer$$T$to_bytes(bs), undefined), 0, bs.len));
}
function moonbitlang$x$encoding$$write_utf16be_char(buf, value) {
  const code = value;
  if (code >>> 0 < 65536 >>> 0) {
    const _p = code >>> 8 | 0;
    const b0 = _p & 255;
    const _p$2 = code & 255;
    const b1 = _p$2 & 255;
    moonbitlang$core$buffer$$T$write_byte(buf, b0);
    moonbitlang$core$buffer$$T$write_byte(buf, b1);
    return;
  } else {
    if (code >>> 0 < 1114112 >>> 0) {
      const hi = (code >>> 0) - (65536 >>> 0) | 0;
      const lo = hi >>> 10 | 55296;
      const hi$2 = hi & 1023 | 56320;
      const _p = lo >>> 8 | 0;
      const b0 = _p & 255;
      const _p$2 = lo & 255;
      const b1 = _p$2 & 255;
      const _p$3 = hi$2 >>> 8 | 0;
      const b2 = _p$3 & 255;
      const _p$4 = hi$2 & 255;
      const b3 = _p$4 & 255;
      moonbitlang$core$buffer$$T$write_byte(buf, b0);
      moonbitlang$core$buffer$$T$write_byte(buf, b1);
      moonbitlang$core$buffer$$T$write_byte(buf, b2);
      moonbitlang$core$buffer$$T$write_byte(buf, b3);
      return;
    } else {
      moonbitlang$core$abort$$abort$4$("Char out of range");
      return;
    }
  }
}
function moonbitlang$x$encoding$$write_utf8_char(buf, value) {
  const code = value;
  if (code >>> 0 < 128 >>> 0) {
    const _p = code & 127 | 0;
    const b0 = _p & 255;
    moonbitlang$core$buffer$$T$write_byte(buf, b0);
    return;
  } else {
    if (code >>> 0 < 2048 >>> 0) {
      const _p = code >>> 6 & 31 | 192;
      const b0 = _p & 255;
      const _p$2 = code & 63 | 128;
      const b1 = _p$2 & 255;
      moonbitlang$core$buffer$$T$write_byte(buf, b0);
      moonbitlang$core$buffer$$T$write_byte(buf, b1);
      return;
    } else {
      if (code >>> 0 < 65536 >>> 0) {
        const _p = code >>> 12 & 15 | 224;
        const b0 = _p & 255;
        const _p$2 = code >>> 6 & 63 | 128;
        const b1 = _p$2 & 255;
        const _p$3 = code & 63 | 128;
        const b2 = _p$3 & 255;
        moonbitlang$core$buffer$$T$write_byte(buf, b0);
        moonbitlang$core$buffer$$T$write_byte(buf, b1);
        moonbitlang$core$buffer$$T$write_byte(buf, b2);
        return;
      } else {
        if (code >>> 0 < 1114112 >>> 0) {
          const _p = code >>> 18 & 7 | 240;
          const b0 = _p & 255;
          const _p$2 = code >>> 12 & 63 | 128;
          const b1 = _p$2 & 255;
          const _p$3 = code >>> 6 & 63 | 128;
          const b2 = _p$3 & 255;
          const _p$4 = code & 63 | 128;
          const b3 = _p$4 & 255;
          moonbitlang$core$buffer$$T$write_byte(buf, b0);
          moonbitlang$core$buffer$$T$write_byte(buf, b1);
          moonbitlang$core$buffer$$T$write_byte(buf, b2);
          moonbitlang$core$buffer$$T$write_byte(buf, b3);
          return;
        } else {
          moonbitlang$core$abort$$abort$4$("Char out of range");
          return;
        }
      }
    }
  }
}
function moonbitlang$x$encoding$$encode(encoding, src) {
  _L: {
    _L$2: {
      switch (encoding) {
        case 1: {
          break _L$2;
        }
        case 2: {
          break _L$2;
        }
      }
      break _L;
    }
    return moonbitlang$core$string$$String$to_bytes(src);
  }
  const new_buf = moonbitlang$core$buffer$$new(Math.imul(src.length, 4) | 0);
  let write;
  switch (encoding) {
    case 0: {
      write = moonbitlang$x$encoding$$write_utf8_char;
      break;
    }
    case 3: {
      write = moonbitlang$x$encoding$$write_utf16be_char;
      break;
    }
    default: {
      write = moonbitlang$core$abort$$abort$6$("unreachable");
    }
  }
  const _bind = moonbitlang$core$string$$String$iter(src);
  _bind((char) => {
    write(new_buf, char);
    return 1;
  });
  return moonbitlang$core$buffer$$T$to_bytes(new_buf);
}
function moonbitlang$x$encoding$$r_utf_16(bytes, offset0, offset1) {
  $bound_check(bytes, offset0);
  const b0 = bytes[offset0];
  $bound_check(bytes, offset1);
  const b1 = bytes[offset1];
  const u = b0 << 8 | b1;
  return u < 55296 || u > 57343 ? new $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Uchar(u) : u > 56319 ? new $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Malformed(moonbitlang$x$encoding$$slice(bytes, offset0 > offset1 ? offset1 : offset0, 2)) : new $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$Hi(u);
}
function moonbitlang$x$encoding$$curry$183$(f) {
  return (x) => (y) => f(x, y);
}
function moonbitlang$x$encoding$$curry$184$(f) {
  return (x) => (y) => f(x, y);
}
function moonbitlang$x$encoding$$Decoder$eoi(self) {
  self.i = moonbitlang$core$builtin$$Default$default$178$();
}
function moonbitlang$x$encoding$$Decoder$ret(self, k, v) {
  self.k = k;
  return v;
}
function moonbitlang$x$encoding$$Decoder$refill(self, k) {
  moonbitlang$x$encoding$$Decoder$eoi(self);
  return moonbitlang$x$encoding$$Decoder$ret(self, k, new $64$moonbitlang$47$x$47$encoding$46$Decode$Refill(moonbitlang$core$bytes$$Bytes$from_fixedarray(self.t, undefined)));
}
function moonbitlang$x$encoding$$t_fill$46$blit$124$69(decoder, l) {
  moonbitlang$core$array$$FixedArray$blit_to$17$(decoder.i, decoder.t, l, decoder.i_pos, decoder.t_len);
  decoder.i_pos = decoder.i_pos + l | 0;
  decoder.t_len = decoder.t_len + l | 0;
}
function moonbitlang$x$encoding$$t_fill(k, decoder) {
  const rem = decoder.i.length - decoder.i_pos | 0;
  if (rem < 0) {
    const _func = k;
    return _func(decoder);
  } else {
    const need = decoder.t_need - decoder.t_len | 0;
    if (rem < need) {
      moonbitlang$x$encoding$$t_fill$46$blit$124$69(decoder, rem);
      const _func = moonbitlang$x$encoding$$curry$183$(moonbitlang$x$encoding$$t_fill);
      return moonbitlang$x$encoding$$Decoder$refill(decoder, _func(k));
    } else {
      moonbitlang$x$encoding$$t_fill$46$blit$124$69(decoder, need);
      const _func = k;
      return _func(decoder);
    }
  }
}
function moonbitlang$x$encoding$$r_utf_16_lo(hi, bytes, offset0, offset1) {
  $bound_check(bytes, offset0);
  const b0 = bytes[offset0];
  $bound_check(bytes, offset1);
  const b1 = bytes[offset1];
  const lo = b0 << 8 | b1;
  if (lo < 56320 || lo > 57343) {
    $bound_check(bytes, offset0);
    const _tmp = bytes[offset0];
    $bound_check(bytes, offset1);
    return new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(new Uint8Array([_tmp, bytes[offset1]]));
  } else {
    return new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar((hi & 1023) << 10 | ((lo & 1023) + 65536 | 0));
  }
}
function moonbitlang$x$encoding$$Decoder$t_need(self, need) {
  self.t_len = 0;
  self.t_need = need;
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16be(self) {
  const rem = self.i.length - self.i_pos | 0;
  if (rem <= 0) {
    return $64$moonbitlang$47$x$47$encoding$46$Decode$End;
  } else {
    if (rem < 2) {
      moonbitlang$x$encoding$$Decoder$t_need(self, 2);
      return moonbitlang$x$encoding$$t_fill(moonbitlang$x$encoding$$Decoder$t_decode_utf_16be, self);
    } else {
      const j = self.i_pos;
      self.i_pos = self.i_pos + 2 | 0;
      return moonbitlang$x$encoding$$Decoder$decode_utf_16be_lo(self, moonbitlang$x$encoding$$r_utf_16(self.i, j, j + 1 | 0));
    }
  }
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16be_lo(self, decode) {
  switch (decode.$tag) {
    case 2: {
      const _UTF16Uchar = decode;
      const _x = _UTF16Uchar._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(_x));
    }
    case 1: {
      const _UTF16Malformed = decode;
      const _x$2 = _UTF16Malformed._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(_x$2));
    }
    default: {
      const _Hi = decode;
      const _hi = _Hi._0;
      const rem = self.i.length - self.i_pos | 0;
      if (rem < 2) {
        moonbitlang$x$encoding$$Decoder$t_need(self, 2);
        const _func = moonbitlang$x$encoding$$curry$184$(moonbitlang$x$encoding$$t_decode_utf_16be_lo);
        return moonbitlang$x$encoding$$t_fill(_func(_hi), self);
      } else {
        const j = self.i_pos;
        const dcd = moonbitlang$x$encoding$$r_utf_16_lo(_hi, self.i, j, j + 1 | 0);
        if (dcd.$tag === 3) {
          self.i_pos = self.i_pos + 2 | 0;
        }
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, dcd);
      }
    }
  }
}
function moonbitlang$x$encoding$$t_decode_utf_16be_lo(hi, self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, moonbitlang$x$encoding$$malformed_pair(true, hi, self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, moonbitlang$x$encoding$$r_utf_16_lo(hi, self.t, 0, 1));
}
function moonbitlang$x$encoding$$Decoder$t_decode_utf_16be(self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, moonbitlang$x$encoding$$malformed(self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$decode_utf_16be_lo(self, moonbitlang$x$encoding$$r_utf_16(self.t, 0, 1));
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16le(self) {
  const rem = self.i.length - self.i_pos | 0;
  if (rem <= 0) {
    return $64$moonbitlang$47$x$47$encoding$46$Decode$End;
  } else {
    if (rem < 2) {
      moonbitlang$x$encoding$$Decoder$t_need(self, 2);
      return moonbitlang$x$encoding$$t_fill(moonbitlang$x$encoding$$Decoder$t_decode_utf_16le, self);
    } else {
      const j = self.i_pos;
      self.i_pos = self.i_pos + 2 | 0;
      return moonbitlang$x$encoding$$Decoder$decode_utf_16le_lo(self, moonbitlang$x$encoding$$r_utf_16(self.i, j + 1 | 0, j));
    }
  }
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16le_lo(self, v) {
  switch (v.$tag) {
    case 2: {
      const _UTF16Uchar = v;
      const _u = _UTF16Uchar._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(_u));
    }
    case 1: {
      const _UTF16Malformed = v;
      const _s = _UTF16Malformed._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(_s));
    }
    default: {
      const _Hi = v;
      const _hi = _Hi._0;
      const rem = self.i.length - self.i_pos | 0;
      if (rem < 2) {
        moonbitlang$x$encoding$$Decoder$t_need(self, 2);
        const _func = moonbitlang$x$encoding$$curry$184$(moonbitlang$x$encoding$$t_decode_utf_16le_lo);
        return moonbitlang$x$encoding$$t_fill(_func(_hi), self);
      } else {
        const j = self.i_pos;
        const dcd = moonbitlang$x$encoding$$r_utf_16_lo(_hi, self.i, j + 1 | 0, j);
        if (dcd.$tag === 3) {
          self.i_pos = self.i_pos + 2 | 0;
        }
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, dcd);
      }
    }
  }
}
function moonbitlang$x$encoding$$t_decode_utf_16le_lo(hi, decoder) {
  return decoder.t_len < decoder.t_need ? moonbitlang$x$encoding$$Decoder$ret(decoder, moonbitlang$x$encoding$$Decoder$decode_utf_16le, moonbitlang$x$encoding$$malformed_pair(false, hi, decoder.t, 0, decoder.t_len)) : moonbitlang$x$encoding$$Decoder$ret(decoder, moonbitlang$x$encoding$$Decoder$decode_utf_16le, moonbitlang$x$encoding$$r_utf_16_lo(hi, decoder.t, 1, 0));
}
function moonbitlang$x$encoding$$Decoder$t_decode_utf_16le(self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, moonbitlang$x$encoding$$malformed(self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$decode_utf_16le_lo(self, moonbitlang$x$encoding$$r_utf_16(self.t, 1, 0));
}
function moonbitlang$x$encoding$$r_utf_8(bytes, offset, length) {
  let c;
  _L: {
    switch (length) {
      case 1: {
        $bound_check(bytes, offset);
        const _tmp = bytes[offset];
        c = _tmp;
        break _L;
      }
      case 2: {
        $bound_check(bytes, offset);
        const b0 = bytes[offset];
        const _tmp$2 = offset + 1 | 0;
        $bound_check(bytes, _tmp$2);
        const b1 = bytes[_tmp$2];
        if (b1 >> 6 !== 2) {
          return moonbitlang$x$encoding$$malformed(bytes, offset, length);
        } else {
          const _tmp$3 = (b0 & 31) << 6 | b1 & 63;
          c = _tmp$3;
          break _L;
        }
      }
      case 3: {
        $bound_check(bytes, offset);
        const b0$2 = bytes[offset];
        const _tmp$3 = offset + 1 | 0;
        $bound_check(bytes, _tmp$3);
        const b1$2 = bytes[_tmp$3];
        const _tmp$4 = offset + 2 | 0;
        $bound_check(bytes, _tmp$4);
        const b2 = bytes[_tmp$4];
        const c$2 = (b0$2 & 15) << 12 | ((b1$2 & 63) << 6 | b2 & 63);
        if (b2 >> 6 !== 2) {
          return moonbitlang$x$encoding$$malformed(bytes, offset, length);
        } else {
          switch (b0$2) {
            case 224: {
              if (b1$2 < 160 || 191 < b1$2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$2;
                break _L;
              }
            }
            case 237: {
              if (b1$2 < 128 || 159 < b1$2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$2;
                break _L;
              }
            }
            default: {
              if (b1$2 >> 6 !== 2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$2;
                break _L;
              }
            }
          }
        }
      }
      case 4: {
        $bound_check(bytes, offset);
        const b0$3 = bytes[offset];
        const _tmp$5 = offset + 1 | 0;
        $bound_check(bytes, _tmp$5);
        const b1$3 = bytes[_tmp$5];
        const _tmp$6 = offset + 2 | 0;
        $bound_check(bytes, _tmp$6);
        const b2$2 = bytes[_tmp$6];
        const _tmp$7 = offset + 3 | 0;
        $bound_check(bytes, _tmp$7);
        const b3 = bytes[_tmp$7];
        const c$3 = (b0$3 & 7) << 18 | (b1$3 & 63) << 12 | (b2$2 & 63) << 6 | b3 & 63;
        if (b3 >> 6 !== 2 || b2$2 >> 6 !== 2) {
          return moonbitlang$x$encoding$$malformed(bytes, offset, length);
        } else {
          switch (b0$3) {
            case 240: {
              if (b1$3 < 144 || 191 < b1$3) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$3;
                break _L;
              }
            }
            case 244: {
              if (b1$3 < 128 || 143 < b1$3) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$3;
                break _L;
              }
            }
            default: {
              if (b1$3 >> 6 !== 2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$3;
                break _L;
              }
            }
          }
        }
      }
      default: {
        return $panic();
      }
    }
  }
  return new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(c);
}
function moonbitlang$x$encoding$$Decoder$decode_utf_8(self) {
  const rem = self.i.length - self.i_pos | 0;
  if (rem <= 0) {
    return $64$moonbitlang$47$x$47$encoding$46$Decode$End;
  } else {
    const _tmp = self.i;
    const _tmp$2 = self.i_pos;
    $bound_check(_tmp, _tmp$2);
    const idx = _tmp[_tmp$2];
    const need = moonbitlang$core$array$$Array$op_get$8$(moonbitlang$x$encoding$$utf_8_len, idx);
    if (rem < need) {
      moonbitlang$x$encoding$$Decoder$t_need(self, need);
      return moonbitlang$x$encoding$$t_fill(moonbitlang$x$encoding$$Decoder$t_decode_utf_8, self);
    } else {
      const j = self.i_pos;
      if (need === 0) {
        self.i_pos = self.i_pos + 1 | 0;
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$malformed(self.i, j, 1));
      } else {
        self.i_pos = self.i_pos + need | 0;
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$r_utf_8(self.i, j, need));
      }
    }
  }
}
function moonbitlang$x$encoding$$Decoder$t_decode_utf_8(self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$malformed(self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$r_utf_8(self.t, 0, self.t_len));
}
function moonbitlang$x$encoding$$decoder(encoding) {
  const i = moonbitlang$core$builtin$$Default$default$178$();
  const t = $makebytes(4, 0);
  let k;
  switch (encoding) {
    case 0: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_8;
      break;
    }
    case 1: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_16le;
      break;
    }
    case 2: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_16le;
      break;
    }
    default: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_16be;
    }
  }
  return { i: i, i_pos: 0, t: t, t_len: 0, t_need: 0, k: k };
}
function moonbitlang$x$encoding$$Decoder$decode_(self) {
  const _func = self.k;
  return _func(self);
}
function moonbitlang$x$encoding$$Decoder$i_cont(self, input) {
  const _p = self.i.length - self.i_pos | 0;
  const _p$2 = 0;
  const i_rem = _p > _p$2 ? _p : _p$2;
  const new_len = i_rem + input.len | 0;
  const new_i = $makebytes(new_len, 0);
  if (i_rem > 0) {
    moonbitlang$core$array$$FixedArray$blit_to$17$(self.i, new_i, i_rem, self.i_pos, 0);
  }
  moonbitlang$core$array$$FixedArray$blit_from_bytesview(new_i, i_rem, input);
  self.i = new_i;
  self.i_pos = 0;
}
function moonbitlang$x$encoding$$Decoder$decode_lossy(self, input, stream) {
  if (input.len > 0) {
    moonbitlang$x$encoding$$Decoder$i_cont(self, input);
  }
  if ((self.i.length - self.i_pos | 0) === 0) {
    return "";
  }
  const chars = [];
  let _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
  _L: while (true) {
    const _param = _tmp;
    switch (_param.$tag) {
      case 3: {
        const _Uchar = _param;
        const _u = _Uchar._0;
        moonbitlang$core$array$$Array$push$68$(chars, _u);
        _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
        continue _L;
      }
      case 2: {
        if (stream && self.t_need > 0) {
          return moonbitlang$core$string$$String$from_array(chars);
        } else {
          moonbitlang$core$array$$Array$push$68$(chars, 65533);
          _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
          continue _L;
        }
      }
      case 0: {
        return moonbitlang$core$string$$String$from_array(chars);
      }
      default: {
        if (stream) {
          return moonbitlang$core$string$$String$from_array(chars);
        } else {
          _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
          continue _L;
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$regex$$utf8_bytes_to_char(bytes) {
  const decoder = moonbitlang$x$encoding$$decoder(0);
  const str = moonbitlang$x$encoding$$Decoder$decode_lossy(decoder, moonbitlang$core$bytes$$Bytes$op_as_view(bytes, 0, bytes.length), false);
  return moonbitlang$core$string$$String$char_length_eq(str, 1, 0, str.length) ? moonbitlang$core$string$$String$unsafe_char_at(str, moonbitlang$core$string$$String$offset_of_nth_char(str, 0, 0, str.length)) : $panic();
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$89(bytes, num_bytes, mask_index) {
  if (mask_index >= 1 && mask_index <= bytes.length) {
    const prefix = moonbitlang$core$bytes$$Bytes$op_as_view(bytes, 0, mask_index);
    const masked_min_suffix = moonbitlang$core$bytes$$Bytes$make(num_bytes - mask_index | 0, 128);
    const masked_max_suffix = moonbitlang$core$bytes$$Bytes$make(num_bytes - mask_index | 0, 191);
    const _self = moonbitlang$core$buffer$$new(0);
    moonbitlang$core$buffer$$T$write_iter(_self, moonbitlang$core$bytes$$View$iter(prefix));
    moonbitlang$core$buffer$$T$write_iter(_self, moonbitlang$core$bytes$$Bytes$iter(masked_min_suffix));
    const masked_min_bytes = moonbitlang$core$buffer$$T$contents(_self);
    const _self$2 = moonbitlang$core$buffer$$new(0);
    moonbitlang$core$buffer$$T$write_iter(_self$2, moonbitlang$core$bytes$$View$iter(prefix));
    moonbitlang$core$buffer$$T$write_iter(_self$2, moonbitlang$core$bytes$$Bytes$iter(masked_max_suffix));
    const masked_max_bytes = moonbitlang$core$buffer$$T$contents(_self$2);
    const masked_min = moonbitlang$ulex$lib$regex$$utf8_bytes_to_char(masked_min_bytes);
    const masked_max = moonbitlang$ulex$lib$regex$$utf8_bytes_to_char(masked_max_bytes);
    return moonbitlang$ulex$lib$util$char_set$$range(masked_min, masked_max);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$add_branch$124$110(_env, range_cset, pin_index) {
  const dedup = _env._2;
  const _num_bytes = _env._1;
  const branches = _env._0;
  if (moonbitlang$core$set$$Set$add_and_check$51$(dedup, { _0: range_cset, _1: pin_index })) {
    const ranges = moonbitlang$core$builtin$$Iter$to_array$172$(moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(range_cset));
    if (ranges.length <= 1) {
      if (ranges.length === 1) {
        const _range = ranges[0];
        const _bind = _range._0;
        const _bind$2 = _range._1;
        const min_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind));
        const max_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind$2));
        if (pin_index >= _num_bytes) {
          if ($bytes_equal(min_bytes, max_bytes)) {
            const _self = [];
            const _bind$3 = moonbitlang$core$bytes$$Bytes$iter(min_bytes);
            moonbitlang$core$array$$Array$push_iter$41$(_self, (_p) => _bind$3((_p$2) => _p(moonbitlang$ulex$lib$util$char_set$$singleton(_p$2))));
            moonbitlang$core$array$$Array$push$138$(branches, _self);
            return;
          } else {
            $panic();
            return;
          }
        } else {
          const common_prefix = moonbitlang$core$bytes$$Bytes$op_as_view(min_bytes, 0, pin_index);
          const common_prefix2 = moonbitlang$core$bytes$$Bytes$op_as_view(max_bytes, 0, pin_index);
          if (moonbitlang$core$builtin$$Eq$op_equal$7$(common_prefix, common_prefix2)) {
            const _self = [];
            const _bind$3 = moonbitlang$core$bytes$$View$iter(common_prefix);
            moonbitlang$core$array$$Array$push_iter$41$(_self, moonbitlang$core$array$$Array$iter$41$(moonbitlang$core$builtin$$Iter$to_array$41$((_p) => _bind$3((_p$2) => _p(moonbitlang$ulex$lib$util$char_set$$singleton(_p$2))))));
            $bound_check(min_bytes, pin_index);
            const _tmp = min_bytes[pin_index];
            $bound_check(max_bytes, pin_index);
            moonbitlang$core$array$$Array$push$41$(_self, moonbitlang$ulex$lib$util$char_set$$range(_tmp, max_bytes[pin_index]));
            moonbitlang$core$array$$Array$push_iter$41$(_self, moonbitlang$core$array$$Array$iter$41$(moonbitlang$core$array$$Array$repeat$41$([moonbitlang$ulex$lib$util$char_set$$range(128, 191)], (_num_bytes - pin_index | 0) - 1 | 0)));
            moonbitlang$core$array$$Array$push$138$(branches, _self);
            return;
          } else {
            $panic();
            return;
          }
        }
      } else {
        return;
      }
    } else {
      $panic();
      return;
    }
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$process_endpoint$124$129(_env, bytes) {
  const _env$2 = _env._2;
  const _num_bytes = _env._1;
  const range_cset = _env._0;
  let _tmp = _num_bytes;
  while (true) {
    const i = _tmp;
    if (i >= 1) {
      const sub_range_cset = moonbitlang$core$builtin$$Sub$op_sub$41$(moonbitlang$core$builtin$$BitAnd$land$41$(moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$89(bytes, _num_bytes, i), range_cset), i === _num_bytes ? moonbitlang$ulex$lib$util$char_set$$empty : moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$89(bytes, _num_bytes, i + 1 | 0));
      moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$add_branch$124$110(_env$2, sub_range_cset, i);
      _tmp = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8(cset) {
  const groups = [{ _0: 1, _1: moonbitlang$core$builtin$$BitAnd$land$41$(cset, moonbitlang$ulex$lib$util$char_set$$range(0, 127)) }, { _0: 2, _1: moonbitlang$core$builtin$$BitAnd$land$41$(cset, moonbitlang$ulex$lib$util$char_set$$range(128, 2047)) }, { _0: 3, _1: moonbitlang$core$builtin$$BitAnd$land$41$(cset, moonbitlang$ulex$lib$util$char_set$$range(2048, 65535)) }, { _0: 4, _1: moonbitlang$core$builtin$$BitAnd$land$41$(cset, moonbitlang$ulex$lib$util$char_set$$range(65536, 1114111)) }];
  const result = [];
  const _len = groups.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const group = groups[_i];
      const _num_bytes = group._0;
      const _cset = group._1;
      if (_num_bytes === 1) {
        if (!moonbitlang$ulex$lib$util$char_set$$CharSet$is_empty(_cset)) {
          moonbitlang$core$array$$Array$push$138$(result, [_cset]);
        }
      } else {
        const branches = [];
        const dedup = moonbitlang$core$set$$Set$new$51$(8);
        const _env = { _0: branches, _1: _num_bytes, _2: dedup };
        const _bind = moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(_cset);
        _bind((range) => {
          const _bind$2 = range._0;
          const _bind$3 = range._1;
          const range_cset = moonbitlang$ulex$lib$util$char_set$$range(_bind$2, _bind$3);
          const min_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind$2));
          const max_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind$3));
          const _env$2 = { _0: range_cset, _1: _num_bytes, _2: _env };
          moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$process_endpoint$124$129(_env$2, min_bytes);
          const mid_range_csets = moonbitlang$core$builtin$$Sub$op_sub$41$(moonbitlang$core$builtin$$Sub$op_sub$41$(range_cset, moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$89(min_bytes, _num_bytes, 1)), moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$89(max_bytes, _num_bytes, 1));
          const _bind$4 = moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(mid_range_csets);
          _bind$4((mid_range) => {
            const _bind$5 = mid_range._0;
            const _bind$6 = mid_range._1;
            const mid_range_cset = moonbitlang$ulex$lib$util$char_set$$range(_bind$5, _bind$6);
            moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$add_branch$124$110(_env, mid_range_cset, 0);
            return 1;
          });
          moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$process_endpoint$124$129(_env$2, max_bytes);
          return 1;
        });
        const _len$2 = branches.length;
        let _tmp$2 = 0;
        while (true) {
          const _i$2 = _tmp$2;
          if (_i$2 < _len$2) {
            const branch = branches[_i$2];
            moonbitlang$core$array$$Array$push$138$(result, branch);
            _tmp$2 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return result;
}
function moonbitlang$ulex$lib$regex$$alt(re1, re2) {
  let _tmp = re1;
  let _tmp$2 = re2;
  _L: while (true) {
    const re1$2 = _tmp;
    const re2$2 = _tmp$2;
    const _bind = re1$2.class_;
    let class_;
    if (_bind === 0) {
      const _bind$2 = re2$2.class_;
      if (_bind$2 === 0) {
        class_ = 0;
      } else {
        class_ = 1;
      }
    } else {
      class_ = 1;
    }
    _L$2: {
      const _x = re1$2.desc;
      switch (_x.$tag) {
        case 4: {
          const _Alter = _x;
          const _re1 = _Alter._0;
          const _re2 = _Alter._1;
          _tmp = _re1;
          _tmp$2 = moonbitlang$ulex$lib$regex$$alt(_re2, re2$2);
          continue _L;
        }
        case 1: {
          const _Character = _x;
          const _cset1 = _Character._0;
          const _x$2 = re2$2.desc;
          if (_x$2.$tag === 1) {
            const _Character$2 = _x$2;
            const _cset2 = _Character$2._0;
            return { desc: new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character(moonbitlang$core$builtin$$Add$op_add$41$(_cset1, _cset2)), class_: class_, len: 1 };
          } else {
            break _L$2;
          }
        }
        default: {
          break _L$2;
        }
      }
    }
    const _tmp$3 = new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Alter(re1$2, re2$2);
    let _tmp$4;
    _L$3: {
      _L$4: {
        const _bind$2 = re1$2.len;
        if (_bind$2 === undefined) {
          break _L$4;
        } else {
          const _Some = _bind$2;
          const _len1 = _Some;
          const _bind$3 = re2$2.len;
          if (_bind$3 === undefined) {
            break _L$4;
          } else {
            const _Some$2 = _bind$3;
            const _len2 = _Some$2;
            if (_len1 === _len2) {
              _tmp$4 = _len1;
            } else {
              break _L$4;
            }
          }
        }
        break _L$3;
      }
      _tmp$4 = undefined;
    }
    return { desc: _tmp$3, class_: class_, len: _tmp$4 };
  }
}
function moonbitlang$ulex$lib$regex$$seq(re1, re2) {
  let _tmp = re1;
  let _tmp$2 = re2;
  _L: while (true) {
    const re1$2 = _tmp;
    const re2$2 = _tmp$2;
    let re;
    _L$2: {
      const _x = re1$2.desc;
      switch (_x.$tag) {
        case 5: {
          const _Concat = _x;
          const _re1 = _Concat._0;
          const _re2 = _Concat._1;
          _tmp = _re1;
          _tmp$2 = moonbitlang$ulex$lib$regex$$seq(_re2, re2$2);
          continue _L;
        }
        case 3: {
          re = re2$2;
          break _L$2;
        }
        default: {
          const _x$2 = re2$2.desc;
          if (_x$2.$tag === 3) {
            re = re1$2;
            break _L$2;
          } else {
            const _tmp$3 = new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Concat(re1$2, re2$2);
            let _tmp$4;
            _L$3: {
              _L$4: {
                const _bind = re1$2.len;
                if (_bind === undefined) {
                  break _L$4;
                } else {
                  const _Some = _bind;
                  const _len1 = _Some;
                  const _bind$2 = re2$2.len;
                  if (_bind$2 === undefined) {
                    break _L$4;
                  } else {
                    const _Some$2 = _bind$2;
                    const _len2 = _Some$2;
                    _tmp$4 = _len1 + _len2 | 0;
                  }
                }
                break _L$3;
              }
              _tmp$4 = undefined;
            }
            return { desc: _tmp$3, class_: 1, len: _tmp$4 };
          }
        }
      }
    }
    return { desc: re.desc, class_: 1, len: re.len };
  }
}
function moonbitlang$ulex$lib$regex$$char_class(cset, as_bytes) {
  if (as_bytes === undefined) {
    return { desc: new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character(cset), class_: 0, len: 1 };
  } else {
    const _Some = as_bytes;
    const _encoding = _Some;
    return moonbitlang$ulex$lib$regex$$lower_unicode_charclass(cset, _encoding);
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass$46$regex_of_branch$124$4(branch) {
  if (branch.length >= 1) {
    let regex = moonbitlang$ulex$lib$regex$$char_class(moonbitlang$core$array$$Array$op_get$41$(branch, 0), undefined);
    const _arr = moonbitlang$core$array$$Array$op_as_view$41$(branch, 1, undefined);
    const _len = _arr.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const cset = _arr.buf[_arr.start + _i | 0];
        regex = moonbitlang$ulex$lib$regex$$seq(regex, moonbitlang$ulex$lib$regex$$char_class(cset, undefined));
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return regex;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass(cset, encoding) {
  let branches;
  _L: {
    _L$2: {
      switch (encoding) {
        case 2: {
          branches = moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8(cset);
          break;
        }
        case 0: {
          break _L$2;
        }
        case 1: {
          break _L$2;
        }
        default: {
          break _L$2;
        }
      }
      break _L;
    }
    branches = $panic();
  }
  if (branches.length >= 1) {
    let regex = moonbitlang$ulex$lib$regex$$lower_unicode_charclass$46$regex_of_branch$124$4(moonbitlang$core$array$$Array$op_get$138$(branches, 0));
    const _arr = moonbitlang$core$array$$Array$op_as_view$138$(branches, 1, undefined);
    const _len = _arr.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const branch = _arr.buf[_arr.start + _i | 0];
        regex = moonbitlang$ulex$lib$regex$$alt(regex, moonbitlang$ulex$lib$regex$$lower_unicode_charclass$46$regex_of_branch$124$4(branch));
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return regex;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$opt(re) {
  return moonbitlang$ulex$lib$regex$$alt(re, moonbitlang$ulex$lib$regex$$epsilon);
}
function moonbitlang$ulex$lib$regex$$plus(re) {
  const _tmp = new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Repetition(re);
  let _tmp$2;
  _L: {
    _L$2: {
      const _bind = re.len;
      if (_bind === undefined) {
        break _L$2;
      } else {
        const _Some = _bind;
        const _x = _Some;
        if (_x === 0) {
          _tmp$2 = 0;
        } else {
          break _L$2;
        }
      }
      break _L;
    }
    _tmp$2 = undefined;
  }
  return { desc: _tmp, class_: 1, len: _tmp$2 };
}
function moonbitlang$ulex$lib$regex$$star(re) {
  return moonbitlang$ulex$lib$regex$$opt(moonbitlang$ulex$lib$regex$$plus(re));
}
function moonbitlang$ulex$lib$regex$$repeat(re, min_times, max_times) {
  let re2 = re;
  let _tmp = 0;
  while (true) {
    const _ = _tmp;
    if (_ < min_times) {
      re2 = moonbitlang$ulex$lib$regex$$seq(re2, re);
      _tmp = _ + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (max_times === undefined) {
    return moonbitlang$ulex$lib$regex$$star(re2);
  } else {
    const _Some = max_times;
    const _max_times = _Some;
    const _end78 = _max_times - min_times | 0;
    let _tmp$2 = 0;
    while (true) {
      const _ = _tmp$2;
      if (_ < _end78) {
        re2 = moonbitlang$ulex$lib$regex$$seq(re2, moonbitlang$ulex$lib$regex$$opt(re));
        _tmp$2 = _ + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return re2;
  }
}
function moonbitlang$ulex$lib$regex$$bind(re, name) {
  return { desc: new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Capture(re, name), class_: re.class_, len: re.len };
}
function moonbitlang$ulex$lib$regex$$get_capture_vars(re) {
  let _tmp = re.desc;
  let _tmp$2 = re.class_;
  let _tmp$3 = re.len;
  _L: while (true) {
    const re_desc = _tmp;
    _L$2: {
      let re1;
      let re2;
      _L$3: {
        switch (re_desc.$tag) {
          case 6: {
            const _Capture = re_desc;
            const _re = _Capture._0;
            const _name = _Capture._1;
            return moonbitlang$core$immut$sorted_map$$T$add$77$(moonbitlang$ulex$lib$regex$$get_capture_vars(_re), _name, _re.class_);
          }
          case 2: {
            const _Repetition = re_desc;
            const _re$2 = _Repetition._0;
            _tmp = _re$2.desc;
            _tmp$2 = _re$2.class_;
            _tmp$3 = _re$2.len;
            continue _L;
          }
          case 4: {
            const _Alter = re_desc;
            const _re1 = _Alter._0;
            const _re2 = _Alter._1;
            re1 = _re1;
            re2 = _re2;
            break _L$3;
          }
          case 5: {
            const _Concat = re_desc;
            const _re1$2 = _Concat._0;
            const _re2$2 = _Concat._1;
            re1 = _re1$2;
            re2 = _re2$2;
            break _L$3;
          }
          case 0: {
            break _L$2;
          }
          case 1: {
            break _L$2;
          }
          default: {
            break _L$2;
          }
        }
      }
      const _bind = moonbitlang$core$immut$sorted_map$$T$iter$77$(moonbitlang$ulex$lib$regex$$get_capture_vars(re1));
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter$77$(moonbitlang$ulex$lib$regex$$get_capture_vars(re2));
      return moonbitlang$core$immut$sorted_map$$from_iter$77$((_p) => _bind(_p) === 1 && _bind$2(_p) === 1 ? 1 : 0);
    }
    return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$;
  }
}
function moonbitlang$ulex$lib$regex$$lower(re, encoding) {
  if (encoding === undefined) {
    return re;
  } else {
    const _bind = re.desc;
    switch (_bind.$tag) {
      case 3: {
        return moonbitlang$ulex$lib$regex$$epsilon;
      }
      case 0: {
        return moonbitlang$ulex$lib$regex$$eof;
      }
      case 1: {
        const _Character = _bind;
        const _cset = _Character._0;
        if (encoding === undefined) {
          return moonbitlang$ulex$lib$regex$$char_class(_cset, undefined);
        } else {
          const _Some = encoding;
          const _encoding = _Some;
          return moonbitlang$ulex$lib$regex$$lower_unicode_charclass(_cset, _encoding);
        }
      }
      case 2: {
        const _Repetition = _bind;
        const _re = _Repetition._0;
        return moonbitlang$ulex$lib$regex$$plus(moonbitlang$ulex$lib$regex$$lower(_re, encoding));
      }
      case 5: {
        const _Concat = _bind;
        const _re1 = _Concat._0;
        const _re2 = _Concat._1;
        return moonbitlang$ulex$lib$regex$$seq(moonbitlang$ulex$lib$regex$$lower(_re1, encoding), moonbitlang$ulex$lib$regex$$lower(_re2, encoding));
      }
      case 4: {
        const _Alter = _bind;
        const _re1$2 = _Alter._0;
        const _re2$2 = _Alter._1;
        return moonbitlang$ulex$lib$regex$$alt(moonbitlang$ulex$lib$regex$$lower(_re1$2, encoding), moonbitlang$ulex$lib$regex$$lower(_re2$2, encoding));
      }
      default: {
        const _Capture = _bind;
        const _re$2 = _Capture._0;
        const _var_ = _Capture._1;
        return moonbitlang$ulex$lib$regex$$bind(moonbitlang$ulex$lib$regex$$lower(_re$2, encoding), _var_);
      }
    }
  }
}
function moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(string) {
  return { data: string, end: string.length, pos: 0 };
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(self) {
  const pos = self.pos;
  const end = self.end;
  if (self.pos < end) {
    const _tmp = self.data;
    const c = _tmp.charCodeAt(pos);
    if (c >= 55296 && c <= 56319) {
      const pos2 = pos + 1 | 0;
      if (pos2 < end) {
        const _tmp$2 = self.data;
        const c2 = _tmp$2.charCodeAt(pos2);
        if (c2 >= 56320 && c2 <= 57343) {
          self.pos = pos2 + 1 | 0;
          return (((Math.imul(c - 55296 | 0, 1024) | 0) + c2 | 0) - 56320 | 0) + 65536 | 0;
        }
      }
    }
    self.pos = pos + 1 | 0;
    return c;
  }
  return -1;
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$185$(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$185$(self, start, end) {
  return moonbitlang$core$string$$String$substring(self.data, start, end);
}
function moonbitlang$ulex$lib$util$utf8$$decode_utf8(bytes) {
  const res = moonbitlang$core$builtin$$StringBuilder$new(0);
  const len = bytes.len;
  let i = 0;
  while (true) {
    if (i < len) {
      let c = moonbitlang$core$bytes$$View$op_get(bytes, i);
      if (c === 0) {
        break;
      } else {
        if (c < 128) {
          moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
          i = i + 1 | 0;
        } else {
          if (c < 224) {
            if ((i + 1 | 0) >= len) {
              break;
            }
            c = (c & 31) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63;
            moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
            i = i + 2 | 0;
          } else {
            if (c < 240) {
              if ((i + 2 | 0) >= len) {
                break;
              }
              c = (c & 15) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
              i = i + 3 | 0;
            } else {
              if ((i + 3 | 0) >= len) {
                break;
              }
              c = (c & 7) << 18 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 3 | 0) & 63;
              c = c - 65536 | 0;
              moonbitlang$core$builtin$$Logger$write_char$38$(res, (c >> 10) + 55296 | 0);
              moonbitlang$core$builtin$$Logger$write_char$38$(res, (c & 1023) + 56320 | 0);
              i = i + 4 | 0;
            }
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return res.val;
}
function moonbitlang$ulex$lib$parser$$Context$define_regex(self, name, regex) {
  return { named_regexes: moonbitlang$core$immut$sorted_map$$T$add$71$(self.named_regexes, name, regex) };
}
function moonbitlang$ulex$lib$parser$$Token$kind(self) {
  switch (self.$tag) {
    case 0: {
      return 0;
    }
    case 1: {
      return 1;
    }
    case 2: {
      return 2;
    }
    case 3: {
      return 3;
    }
    case 4: {
      return 4;
    }
    case 5: {
      return 5;
    }
    case 6: {
      return 6;
    }
    case 7: {
      return 7;
    }
    case 8: {
      return 8;
    }
    case 9: {
      return 9;
    }
    case 10: {
      return 10;
    }
    case 11: {
      return 11;
    }
    case 12: {
      return 12;
    }
    case 13: {
      return 13;
    }
    case 14: {
      return 14;
    }
    case 15: {
      return 15;
    }
    case 16: {
      return 16;
    }
    case 17: {
      return 17;
    }
    case 18: {
      return 18;
    }
    case 19: {
      return 19;
    }
    case 20: {
      return 20;
    }
    case 21: {
      return 21;
    }
    case 22: {
      return 22;
    }
    case 23: {
      return 23;
    }
    case 24: {
      return 24;
    }
    default: {
      return 25;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$151$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOI";
      break;
    }
    case 1: {
      _tmp = "\"eof\"";
      break;
    }
    case 2: {
      _tmp = "\"parse {\"";
      break;
    }
    case 3: {
      _tmp = "\"regex\"";
      break;
    }
    case 4: {
      _tmp = "\"as\"";
      break;
    }
    case 5: {
      _tmp = "\"_\"";
      break;
    }
    case 6: {
      _tmp = "\"}\"";
      break;
    }
    case 7: {
      _tmp = "\"(\"";
      break;
    }
    case 8: {
      _tmp = "\")\"";
      break;
    }
    case 9: {
      _tmp = "\"[\"";
      break;
    }
    case 10: {
      _tmp = "\"]\"";
      break;
    }
    case 11: {
      _tmp = "\"=\"";
      break;
    }
    case 12: {
      _tmp = "\";\"";
      break;
    }
    case 13: {
      _tmp = "\"=>\"";
      break;
    }
    case 14: {
      _tmp = "\"|\"";
      break;
    }
    case 15: {
      _tmp = "\"*\"";
      break;
    }
    case 16: {
      _tmp = "\"+\"";
      break;
    }
    case 17: {
      _tmp = "\"?\"";
      break;
    }
    case 18: {
      _tmp = "\"-\"";
      break;
    }
    case 19: {
      _tmp = "\"^\"";
      break;
    }
    case 20: {
      _tmp = "BACKSLASH";
      break;
    }
    case 21: {
      _tmp = "RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE";
      break;
    }
    case 22: {
      _tmp = "LBRACE_CODE_RBRACE";
      break;
    }
    case 23: {
      _tmp = "LC_IDENT";
      break;
    }
    case 24: {
      _tmp = "CHAR";
      break;
    }
    default: {
      _tmp = "STRING";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$ulex$lib$parser$$yy_action_0(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$any, undefined));
}
function moonbitlang$ulex$lib$parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
    if (_bind$2.$tag === 7) {
      const _YYObj_String = _bind$2;
      const __dollar3 = _YYObj_String._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$bind(__dollar1(ctx), __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$alt(__dollar1(ctx), __dollar3(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_3(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => {
        _L: {
          const _bind$3 = __dollar1(ctx).desc;
          if (_bind$3.$tag === 1) {
            const _Character = _bind$3;
            const _cset1 = _Character._0;
            const _bind$4 = __dollar3(ctx).desc;
            if (_bind$4.$tag === 1) {
              const _Character$2 = _bind$4;
              const _cset2 = _Character$2._0;
              return moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$CharSet$difference(_cset1, _cset2), undefined);
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        }
        return $panic();
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar2 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 7) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => {
      const _p = moonbitlang$core$immut$sorted_map$$T$get$71$(ctx.named_regexes, __dollar1);
      if (_p === undefined) {
        return $panic();
      } else {
        const _p$2 = _p;
        return _p$2;
      }
    });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_7(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$eof);
}
function moonbitlang$ulex$lib$parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
  if (_bind.$tag === 8) {
    const _YYObj__char_set_T = _bind;
    const __dollar3 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$CharSet$negated(__dollar3));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_10(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
    if (_bind$2.$tag === 7) {
      const _YYObj_String = _bind$2;
      const __dollar3 = _YYObj_String._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_______type_Regex__String____type_CodeBlock_$46$YYObj__Context_______type_Regex__String____type_CodeBlock_((ctx) => ({ _0: __dollar1(ctx), _1: undefined, _2: __dollar3 }));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_11(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 7) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => {
      const _bind$2 = moonbitlang$core$string$$String$iter(__dollar1);
      const _acc = { val: moonbitlang$ulex$lib$regex$$epsilon };
      _bind$2((_p) => {
        const acc = _acc.val;
        _acc.val = moonbitlang$ulex$lib$regex$$seq(acc, moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(_p), undefined));
        return 1;
      });
      return _acc.val;
    });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 10) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar2 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$seq(__dollar1(ctx), __dollar2(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_16(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj__Context_______type_Regex__String____type_CodeBlock_ = _bind;
    const __dollar1 = _YYObj__Context_______type_Regex__String____type_CodeBlock_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__Context______list_T___type_Regex__String____type_CodeBlock__ = _bind$2;
      const __dollar2 = _YYObj__Context______list_T___type_Regex__String____type_CodeBlock__._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__((ctx) => {
        const _p = __dollar1(ctx);
        const _p$2 = __dollar2(ctx);
        return new $64$moonbitlang$47$core$47$list$46$T$More$28$(_p, _p$2);
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_17(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_18(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______list_T___type_Regex__String____type_CodeBlock__((_ctx) => $64$moonbitlang$47$core$47$list$46$T$Empty$28$);
}
function moonbitlang$ulex$lib$parser$$yy_action_19(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Rule = _bind;
    const __dollar1 = _YYObj__Context______type_Rule._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T__type_Rule_$46$YYObj__Context______list_T__type_Rule_((ctx) => {
      const _p = __dollar1(ctx);
      const _p$2 = $64$moonbitlang$47$core$47$list$46$T$Empty$27$;
      return new $64$moonbitlang$47$core$47$list$46$T$More$27$(_p, _p$2);
    });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_20(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
  if (_bind.$tag === 14) {
    const _YYObj__Context_____Context = _bind;
    const __dollar2 = _YYObj__Context_____Context._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
    if (_bind$2.$tag === 7) {
      const _YYObj_String = _bind$2;
      const __dollar1 = _YYObj_String._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
      if (_bind$3.$tag === 13) {
        const _YYObj__Context______list_T__type_Rule_ = _bind$3;
        const __dollar3 = _YYObj__Context______list_T__type_Rule_._0;
        const _bind$4 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 3)._0;
        if (_bind$4.$tag === 7) {
          const _YYObj_String$2 = _bind$4;
          const __dollar4 = _YYObj_String$2._0;
          return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex((ctx) => {
            const ctx$2 = __dollar2(ctx);
            return { header: __dollar1, rules: moonbitlang$core$list$$T$to_array$169$(__dollar3(ctx$2)), trailer: __dollar4 };
          });
        } else {
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_21(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$opt(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_22(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context((ctx) => ctx);
}
function moonbitlang$ulex$lib$parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
  if (_bind.$tag === 14) {
    const _YYObj__Context_____Context = _bind;
    const __dollar2 = _YYObj__Context_____Context._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
    if (_bind$2.$tag === 14) {
      const _YYObj__Context_____Context$2 = _bind$2;
      const __dollar1 = _YYObj__Context_____Context$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context((ctx) => __dollar2(__dollar1(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_24(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj__char_set_T = _bind;
    const __dollar2 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_25(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj__char_set_T$2 = _bind$2;
      const __dollar2 = _YYObj__char_set_T$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$core$builtin$$Add$op_add$41$(__dollar1, __dollar2));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_26(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_27(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_28(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
  if (_bind.$tag === 11) {
    const _YYObj__Context______list_T___type_Regex__String____type_CodeBlock__ = _bind;
    const __dollar3 = _YYObj__Context______list_T___type_Regex__String____type_CodeBlock__._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
    if (_bind$2.$tag === 16) {
      const _YYObj__String__String_ = _bind$2;
      const __dollar1 = _YYObj__String__String_._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Rule$46$YYObj__Context______type_Rule((ctx) => {
        const pattern_and_actions = moonbitlang$core$list$$T$to_array$173$(__dollar3(ctx));
        const _p = new Array(pattern_and_actions.length);
        const _p$2 = pattern_and_actions.length;
        let _tmp = 0;
        while (true) {
          const _p$3 = _tmp;
          if (_p$3 < _p$2) {
            const _p$4 = pattern_and_actions[_p$3];
            const it = _p$4;
            const _re = it._0;
            const _rest_binder = it._1;
            _p[_p$3] = { _0: _re, _1: _rest_binder };
            _tmp = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const patterns = _p;
        const _p$3 = new Array(pattern_and_actions.length);
        const _p$4 = pattern_and_actions.length;
        let _tmp$2 = 0;
        while (true) {
          const _p$5 = _tmp$2;
          if (_p$5 < _p$4) {
            const _p$6 = pattern_and_actions[_p$5];
            const it = _p$6;
            _p$3[_p$5] = it._2;
            _tmp$2 = _p$5 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const actions = _p$3;
        return { name: __dollar1._0, signature: __dollar1._1, lexee: "lexbuf", patterns: patterns, actions: actions };
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_29(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 7) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_30(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Rule = _bind;
    const __dollar1 = _YYObj__Context______type_Rule._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
    if (_bind$2.$tag === 13) {
      const _YYObj__Context______list_T__type_Rule_ = _bind$2;
      const __dollar2 = _YYObj__Context______list_T__type_Rule_._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______list_T__type_Rule_$46$YYObj__Context______list_T__type_Rule_((ctx) => {
        const _p = __dollar1(ctx);
        const _p$2 = __dollar2(ctx);
        return new $64$moonbitlang$47$core$47$list$46$T$More$27$(_p, _p$2);
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_31(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 7) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_32(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(__dollar1, undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_33(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex((_ctx) => ({ header: "", rules: [], trailer: "" }));
}
function moonbitlang$ulex$lib$parser$$yy_action_34(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String("");
}
function moonbitlang$ulex$lib$parser$$yy_action_35(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$star(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_36(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 10) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
    if (_bind$2.$tag === 10) {
      const _YYObj_Char$2 = _bind$2;
      const __dollar3 = _YYObj_Char$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$range(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_37(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 15) {
    const _YYObj__Context______type_Lex = _bind;
    const __dollar1 = _YYObj__Context______type_Lex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_38(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$plus(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_39(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 1)._0;
  if (_bind.$tag === 7) {
    const _YYObj_String = _bind;
    const __dollar2 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 3)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj__Context______type_Regex = _bind$2;
      const __dollar4 = _YYObj__Context______type_Regex._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context((ctx) => moonbitlang$ulex$lib$parser$$Context$define_regex(ctx, __dollar2, __dollar4(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_40(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String("");
}
function moonbitlang$ulex$lib$parser$$yy_action_41(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 10) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_42(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 2)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => {
        _L: {
          const _bind$3 = __dollar1(ctx).desc;
          if (_bind$3.$tag === 1) {
            const _Character = _bind$3;
            const _cset1 = _Character._0;
            const _bind$4 = __dollar3(ctx).desc;
            if (_bind$4.$tag === 1) {
              const _Character$2 = _bind$4;
              const _cset2 = _Character$2._0;
              return moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$CharSet$difference(_cset1, _cset2), undefined);
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        }
        return $panic();
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_43(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$16$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      return { _0: 1, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 2: {
      return { _0: 2, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 3: {
      return { _0: 3, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 4: {
      return { _0: 4, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 5: {
      return { _0: 5, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 6: {
      return { _0: 6, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 7: {
      return { _0: 7, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 8: {
      return { _0: 8, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 9: {
      return { _0: 9, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 10: {
      return { _0: 10, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 11: {
      return { _0: 11, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 12: {
      return { _0: 12, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      return { _0: 14, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 15: {
      return { _0: 15, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 16: {
      return { _0: 16, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 17: {
      return { _0: 17, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 18: {
      return { _0: 18, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 19: {
      return { _0: 19, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 20: {
      return { _0: 20, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 21: {
      const _RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE = token;
      const _data = _RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE._0;
      return { _0: 21, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(_data) };
    }
    case 22: {
      const _LBRACE_CODE_RBRACE = token;
      const _data$2 = _LBRACE_CODE_RBRACE._0;
      return { _0: 22, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$2) };
    }
    case 23: {
      const _LC_IDENT = token;
      const _data$3 = _LC_IDENT._0;
      return { _0: 23, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$3) };
    }
    case 24: {
      const _CHAR = token;
      const _data$4 = _CHAR._0;
      return { _0: 24, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Char$46$YYObj_Char(_data$4) };
    }
    default: {
      const _STRING = token;
      const _data$5 = _STRING._0;
      return { _0: 25, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$5) };
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_13(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_7);
}
function moonbitlang$ulex$lib$parser$$yy_state_14(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_0);
}
function moonbitlang$ulex$lib$parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_11);
}
function moonbitlang$ulex$lib$parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_41);
}
function moonbitlang$ulex$lib$parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_6);
}
function moonbitlang$ulex$lib$parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_32);
}
function moonbitlang$ulex$lib$parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 44, moonbitlang$ulex$lib$parser$$yy_action_24);
}
function moonbitlang$ulex$lib$parser$$yy_state_11(_lookahead) {
  if (_lookahead === 10) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_12);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_5(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 46, moonbitlang$ulex$lib$parser$$yy_action_36);
}
function moonbitlang$ulex$lib$parser$$yy_state_4(_lookahead) {
  if (_lookahead === 24) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_5);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_3(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 18: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_4);
      }
      case 10: {
        break _L;
      }
      case 24: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 46, moonbitlang$ulex$lib$parser$$yy_action_12);
}
function moonbitlang$ulex$lib$parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 45, moonbitlang$ulex$lib$parser$$yy_action_25);
}
function moonbitlang$ulex$lib$parser$$yy_state_6(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_3);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_6);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_7);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 45, moonbitlang$ulex$lib$parser$$yy_action_43);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_10(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 44, moonbitlang$ulex$lib$parser$$yy_action_8);
}
function moonbitlang$ulex$lib$parser$$yy_state_9(_lookahead) {
  if (_lookahead === 10) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_10);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_3);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_6);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_9);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_2(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_3);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_6);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_8);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_11);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_21(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 43, moonbitlang$ulex$lib$parser$$yy_action_5);
}
function moonbitlang$ulex$lib$parser$$yy_state_20(_lookahead) {
  if (_lookahead === 8) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_21);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$ulex$lib$parser$$yy_action_21);
}
function moonbitlang$ulex$lib$parser$$yy_state_24(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$ulex$lib$parser$$yy_action_38);
}
function moonbitlang$ulex$lib$parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$ulex$lib$parser$$yy_action_35);
}
function moonbitlang$ulex$lib$parser$$yy_state_27(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 41, moonbitlang$ulex$lib$parser$$yy_action_42);
}
function moonbitlang$ulex$lib$parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 41, moonbitlang$ulex$lib$parser$$yy_action_3);
}
function moonbitlang$ulex$lib$parser$$yy_state_32(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 40, moonbitlang$ulex$lib$parser$$yy_action_14);
}
function moonbitlang$ulex$lib$parser$$yy_state_35(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 39, moonbitlang$ulex$lib$parser$$yy_action_2);
}
function moonbitlang$ulex$lib$parser$$yy_state_38(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 38, moonbitlang$ulex$lib$parser$$yy_action_1);
}
function moonbitlang$ulex$lib$parser$$yy_state_37(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_38);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_36(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_37);
      }
      case 0: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 38, moonbitlang$ulex$lib$parser$$yy_action_4);
}
function moonbitlang$ulex$lib$parser$$yy_state_19(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_20);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_22(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 17: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_23);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_24);
      }
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_25);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_26);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 25: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 42, moonbitlang$ulex$lib$parser$$yy_action_27);
}
function moonbitlang$ulex$lib$parser$$yy_state_26(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_27);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_28(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_29);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 40, moonbitlang$ulex$lib$parser$$yy_action_9);
}
function moonbitlang$ulex$lib$parser$$yy_state_29(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_31(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
      }
      case 24: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
      }
      case 23: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
      }
      case 44: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
      }
      case 7: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
      }
      case 43: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
      }
      case 41: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
      }
      case 42: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
      }
      case 40: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_32);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 40, moonbitlang$ulex$lib$parser$$yy_action_26);
}
function moonbitlang$ulex$lib$parser$$yy_state_33(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 14: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_34);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 39, moonbitlang$ulex$lib$parser$$yy_action_17);
}
function moonbitlang$ulex$lib$parser$$yy_state_34(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_35);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_39(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 37, moonbitlang$ulex$lib$parser$$yy_action_13);
}
function moonbitlang$ulex$lib$parser$$yy_state_43(_lookahead) {
  return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Accept;
}
function moonbitlang$ulex$lib$parser$$yy_state_44(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 29, moonbitlang$ulex$lib$parser$$yy_action_29);
}
function moonbitlang$ulex$lib$parser$$yy_state_50(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 32, moonbitlang$ulex$lib$parser$$yy_action_39);
}
function moonbitlang$ulex$lib$parser$$yy_state_49(_lookahead) {
  if (_lookahead === 12) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_50);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_48(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_39);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_49);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_47(_lookahead) {
  if (_lookahead === 11) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_48);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_46(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_47);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_52(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 31, moonbitlang$ulex$lib$parser$$yy_action_23);
}
function moonbitlang$ulex$lib$parser$$yy_state_51(_lookahead) {
  switch (_lookahead) {
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_46);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_51);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_52);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 31, moonbitlang$ulex$lib$parser$$yy_action_22);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_58(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 36, moonbitlang$ulex$lib$parser$$yy_action_10);
}
function moonbitlang$ulex$lib$parser$$yy_state_57(_lookahead) {
  if (_lookahead === 22) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_58);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_56(_lookahead) {
  if (_lookahead === 13) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_57);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_60(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 35, moonbitlang$ulex$lib$parser$$yy_action_16);
}
function moonbitlang$ulex$lib$parser$$yy_state_59(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_39);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_56);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_59);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_60);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 35, moonbitlang$ulex$lib$parser$$yy_action_18);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_63(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 34, moonbitlang$ulex$lib$parser$$yy_action_28);
}
function moonbitlang$ulex$lib$parser$$yy_state_62(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_63);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_61(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_62);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_55(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_39);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_56);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_59);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_61);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 35, moonbitlang$ulex$lib$parser$$yy_action_18);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_54(_lookahead) {
  if (_lookahead === 2) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_55);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_65(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 33, moonbitlang$ulex$lib$parser$$yy_action_30);
}
function moonbitlang$ulex$lib$parser$$yy_state_64(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_54);
      }
      case 34: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_64);
      }
      case 33: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_65);
      }
      case 0: {
        break _L;
      }
      case 22: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 33, moonbitlang$ulex$lib$parser$$yy_action_19);
}
function moonbitlang$ulex$lib$parser$$yy_state_67(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 30, moonbitlang$ulex$lib$parser$$yy_action_31);
}
function moonbitlang$ulex$lib$parser$$yy_state_68(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 28, moonbitlang$ulex$lib$parser$$yy_action_20);
}
function moonbitlang$ulex$lib$parser$$yy_state_66(_lookahead) {
  switch (_lookahead) {
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_67);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_68);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 30, moonbitlang$ulex$lib$parser$$yy_action_40);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_53(_lookahead) {
  switch (_lookahead) {
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_54);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_64);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_66);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_45(_lookahead) {
  switch (_lookahead) {
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_46);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_51);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_53);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 31, moonbitlang$ulex$lib$parser$$yy_action_22);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_70(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 26, moonbitlang$ulex$lib$parser$$yy_action_37);
}
function moonbitlang$ulex$lib$parser$$yy_state_69(_lookahead) {
  if (_lookahead === 0) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_70);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_42(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_43);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_44);
      }
      case 29: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_45);
      }
      case 28: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_69);
      }
      case 0: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 28, moonbitlang$ulex$lib$parser$$yy_action_33);
      }
      case 3: {
        break _L;
      }
      case 21: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 29, moonbitlang$ulex$lib$parser$$yy_action_34);
}
function moonbitlang$ulex$lib$parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }, { _0: 17, _1: 17 }, { _0: 18, _1: 18 }, { _0: 19, _1: 19 }, { _0: 20, _1: 20 }, { _0: 21, _1: 21 }, { _0: 22, _1: 22 }, { _0: 23, _1: 23 }, { _0: 24, _1: 24 }, { _0: 25, _1: 25 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _More = stack$3;
          const _state = _More._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$151$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$list$$T$drop$15$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _More$2 = stack$6;
              const _state$2 = _More$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$list$46$T$More$24$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new Result$Err$32$(new Error$moonbitlang$47$ulex$47$lib$47$parser$46$ParseError$46$UnexpectedToken(token, loc, expected));
}
function moonbitlang$ulex$lib$parser$$yy_parse$186$(read_token, start_pos, start, return_) {
  const _p = $64$moonbitlang$47$core$47$list$46$T$Empty$24$;
  const state_stack = { val: new $64$moonbitlang$47$core$47$list$46$T$More$24$(start, _p) };
  const data_stack = [];
  const last_pos = { val: start_pos };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(47);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          const _bind$3 = read_token();
          const _token = _bind$3._0;
          const _start_pos = _bind$3._1;
          const _end_pos = _bind$3._2;
          const _bind$4 = moonbitlang$ulex$lib$parser$$yy_input(_token, _start_pos, _end_pos);
          const _symbol = _bind$4._0;
          const _data = _bind$4._1;
          lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
          const _func$2 = state.val;
          decision = _func$2(_symbol);
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$33$(return_(moonbitlang$core$array$$Array$unsafe_pop$16$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$16$(data_stack, _la._1);
              const _p$2 = state_stack.val;
              state_stack.val = new $64$moonbitlang$47$core$47$list$46$T$More$24$(_next_state, _p$2);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _p$2 = lookahead;
            let _bind$4;
            if (_p$2 === undefined) {
              _bind$4 = $panic();
            } else {
              const _p$3 = _p$2;
              _bind$4 = _p$3;
            }
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$ulex$lib$parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$16$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos$2;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$16$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$16$(args, args.len - 1 | 0)._2;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$16$(data_stack);
            state_stack.val = moonbitlang$core$list$$T$unsafe_tail$15$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$list$$T$unsafe_head$15$(state_stack.val);
        moonbitlang$core$array$$Array$push$16$(data_stack, { _0: data, _1: start_pos$2, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$33$(return_(moonbitlang$core$array$$Array$unsafe_pop$16$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              const _p$2 = state_stack.val;
              state_stack.val = new $64$moonbitlang$47$core$47$list$46$T$More$24$(_next_state, _p$2);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$ulex$lib$parser$$lex_eoi(read_token, start_pos) {
  return moonbitlang$ulex$lib$parser$$yy_parse$186$(read_token, start_pos, moonbitlang$ulex$lib$parser$$yy_state_42, (it) => {
    if (it.$tag === 15) {
      const _YYObj__Context______type_Lex = it;
      return _YYObj__Context______type_Lex._0;
    } else {
      return $panic();
    }
  });
}
function moonbitlang$ulex$lib$parser$$calc_offset(base, view) {
  return view.start - base.start | 0;
}
function moonbitlang$ulex$lib$parser$$code_rbrace_new(curr, buffer) {
  let _tmp = curr;
  _L: while (true) {
    const curr$2 = _tmp;
    const _data = curr$2.bytes;
    let _cursor = curr$2.start;
    const _end = _cursor + curr$2.len | 0;
    let _match_pattern = 7;
    let _match_start = _cursor;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$2 = 0;
    _L$2: while (true) {
      const _state = _tmp$2;
      switch (_state) {
        case 0: {
          let _char = -1;
          if (_cursor < _end) {
            _char = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char === -1) {
            _tmp$2 = 1;
          } else {
            if (_char >= 0 && _char <= 33) {
              _tmp$2 = 2;
            } else {
              if (_char >= 35 && _char <= 38) {
                _tmp$2 = 2;
              } else {
                if (_char >= 40 && _char <= 46) {
                  _tmp$2 = 2;
                } else {
                  if (_char >= 48 && _char <= 122) {
                    _tmp$2 = 2;
                  } else {
                    if (_char === 124) {
                      _tmp$2 = 2;
                    } else {
                      if (_char >= 126 && _char <= 127) {
                        _tmp$2 = 2;
                      } else {
                        if (_char === 34) {
                          _tmp$2 = 3;
                        } else {
                          if (_char === 39) {
                            _tmp$2 = 4;
                          } else {
                            if (_char === 47) {
                              _tmp$2 = 5;
                            } else {
                              if (_char === 123) {
                                _tmp$2 = 6;
                              } else {
                                if (_char === 125) {
                                  _tmp$2 = 7;
                                } else {
                                  if (_char === 194) {
                                    _tmp$2 = 8;
                                  } else {
                                    if (_char >= 195 && _char <= 222) {
                                      _tmp$2 = 9;
                                    } else {
                                      if (_char === 223) {
                                        _tmp$2 = 10;
                                      } else {
                                        if (_char === 224) {
                                          _tmp$2 = 11;
                                        } else {
                                          if (_char >= 225 && _char <= 236) {
                                            _tmp$2 = 12;
                                          } else {
                                            if (_char === 237) {
                                              _tmp$2 = 13;
                                            } else {
                                              if (_char === 238) {
                                                _tmp$2 = 14;
                                              } else {
                                                if (_char === 239) {
                                                  _tmp$2 = 15;
                                                } else {
                                                  if (_char === 240) {
                                                    _tmp$2 = 16;
                                                  } else {
                                                    if (_char >= 241 && _char <= 243) {
                                                      _tmp$2 = 17;
                                                    } else {
                                                      if (_char === 244) {
                                                        _tmp$2 = 18;
                                                      } else {
                                                        break _L$2;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 6;
          _match_end = _cursor;
          break _L$2;
        }
        case 2: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 3: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$2 = -1;
          if (_cursor < _end) {
            _char$2 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$2 >= 0 && _char$2 <= 33) {
            _tmp$2 = 72;
          } else {
            if (_char$2 >= 35 && _char$2 <= 91) {
              _tmp$2 = 72;
            } else {
              if (_char$2 >= 93 && _char$2 <= 255) {
                _tmp$2 = 72;
              } else {
                if (_char$2 === 34) {
                  _tmp$2 = 73;
                } else {
                  if (_char$2 === 92) {
                    _tmp$2 = 74;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 4: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$3 = -1;
          if (_cursor < _end) {
            _char$3 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$3 >= 0 && _char$3 <= 38) {
            _tmp$2 = 70;
          } else {
            if (_char$3 >= 40 && _char$3 <= 91) {
              _tmp$2 = 70;
            } else {
              if (_char$3 >= 93 && _char$3 <= 255) {
                _tmp$2 = 70;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 5: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$4 = -1;
          if (_cursor < _end) {
            _char$4 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$4 === 47) {
            _tmp$2 = 67;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 6: {
          _match_pattern = 3;
          _match_end = _cursor;
          break _L$2;
        }
        case 7: {
          _match_pattern = 4;
          _match_end = _cursor;
          break _L$2;
        }
        case 8: {
          let _char$5 = -1;
          if (_cursor < _end) {
            _char$5 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$5 === 128) {
            _tmp$2 = 65;
          } else {
            if (_char$5 >= 129 && _char$5 <= 191) {
              _tmp$2 = 66;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 9: {
          let _char$6 = -1;
          if (_cursor < _end) {
            _char$6 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$6 >= 128 && _char$6 <= 191) {
            _tmp$2 = 64;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 10: {
          let _char$7 = -1;
          if (_cursor < _end) {
            _char$7 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$7 >= 128 && _char$7 <= 190) {
            _tmp$2 = 62;
          } else {
            if (_char$7 === 191) {
              _tmp$2 = 63;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 11: {
          let _char$8 = -1;
          if (_cursor < _end) {
            _char$8 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$8 === 160) {
            _tmp$2 = 57;
          } else {
            if (_char$8 >= 161 && _char$8 <= 191) {
              _tmp$2 = 58;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 12: {
          let _char$9 = -1;
          if (_cursor < _end) {
            _char$9 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$9 >= 128 && _char$9 <= 191) {
            _tmp$2 = 55;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 13: {
          let _char$10 = -1;
          if (_cursor < _end) {
            _char$10 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$10 >= 128 && _char$10 <= 158) {
            _tmp$2 = 50;
          } else {
            if (_char$10 === 159) {
              _tmp$2 = 51;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 14: {
          let _char$11 = -1;
          if (_cursor < _end) {
            _char$11 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$11 === 128) {
            _tmp$2 = 45;
          } else {
            if (_char$11 >= 129 && _char$11 <= 191) {
              _tmp$2 = 46;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 15: {
          let _char$12 = -1;
          if (_cursor < _end) {
            _char$12 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$12 >= 128 && _char$12 <= 190) {
            _tmp$2 = 40;
          } else {
            if (_char$12 === 191) {
              _tmp$2 = 41;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 16: {
          let _char$13 = -1;
          if (_cursor < _end) {
            _char$13 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$13 === 144) {
            _tmp$2 = 31;
          } else {
            if (_char$13 >= 145 && _char$13 <= 191) {
              _tmp$2 = 32;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 17: {
          let _char$14 = -1;
          if (_cursor < _end) {
            _char$14 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$14 >= 128 && _char$14 <= 191) {
            _tmp$2 = 28;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 18: {
          let _char$15 = -1;
          if (_cursor < _end) {
            _char$15 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$15 >= 128 && _char$15 <= 142) {
            _tmp$2 = 19;
          } else {
            if (_char$15 === 143) {
              _tmp$2 = 20;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 19: {
          let _char$16 = -1;
          if (_cursor < _end) {
            _char$16 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$16 >= 128 && _char$16 <= 191) {
            _tmp$2 = 26;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 20: {
          let _char$17 = -1;
          if (_cursor < _end) {
            _char$17 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$17 >= 128 && _char$17 <= 190) {
            _tmp$2 = 21;
          } else {
            if (_char$17 === 191) {
              _tmp$2 = 22;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 21: {
          let _char$18 = -1;
          if (_cursor < _end) {
            _char$18 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$18 >= 128 && _char$18 <= 191) {
            _tmp$2 = 25;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 22: {
          let _char$19 = -1;
          if (_cursor < _end) {
            _char$19 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$19 >= 128 && _char$19 <= 190) {
            _tmp$2 = 23;
          } else {
            if (_char$19 === 191) {
              _tmp$2 = 24;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 23: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 24: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 25: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 26: {
          let _char$20 = -1;
          if (_cursor < _end) {
            _char$20 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$20 >= 128 && _char$20 <= 191) {
            _tmp$2 = 27;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 27: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 28: {
          let _char$21 = -1;
          if (_cursor < _end) {
            _char$21 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$21 >= 128 && _char$21 <= 191) {
            _tmp$2 = 29;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 29: {
          let _char$22 = -1;
          if (_cursor < _end) {
            _char$22 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$22 >= 128 && _char$22 <= 191) {
            _tmp$2 = 30;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 30: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 31: {
          let _char$23 = -1;
          if (_cursor < _end) {
            _char$23 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$23 === 128) {
            _tmp$2 = 35;
          } else {
            if (_char$23 >= 129 && _char$23 <= 191) {
              _tmp$2 = 36;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 32: {
          let _char$24 = -1;
          if (_cursor < _end) {
            _char$24 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$24 >= 128 && _char$24 <= 191) {
            _tmp$2 = 33;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 33: {
          let _char$25 = -1;
          if (_cursor < _end) {
            _char$25 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$25 >= 128 && _char$25 <= 191) {
            _tmp$2 = 34;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 34: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 35: {
          let _char$26 = -1;
          if (_cursor < _end) {
            _char$26 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$26 === 128) {
            _tmp$2 = 38;
          } else {
            if (_char$26 >= 129 && _char$26 <= 191) {
              _tmp$2 = 39;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 36: {
          let _char$27 = -1;
          if (_cursor < _end) {
            _char$27 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$27 >= 128 && _char$27 <= 191) {
            _tmp$2 = 37;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 37: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 38: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 39: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 40: {
          let _char$28 = -1;
          if (_cursor < _end) {
            _char$28 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$28 >= 128 && _char$28 <= 191) {
            _tmp$2 = 44;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 41: {
          let _char$29 = -1;
          if (_cursor < _end) {
            _char$29 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$29 >= 128 && _char$29 <= 190) {
            _tmp$2 = 42;
          } else {
            if (_char$29 === 191) {
              _tmp$2 = 43;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 42: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 43: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 44: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 45: {
          let _char$30 = -1;
          if (_cursor < _end) {
            _char$30 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$30 === 128) {
            _tmp$2 = 48;
          } else {
            if (_char$30 >= 129 && _char$30 <= 191) {
              _tmp$2 = 49;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 46: {
          let _char$31 = -1;
          if (_cursor < _end) {
            _char$31 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$31 >= 128 && _char$31 <= 191) {
            _tmp$2 = 47;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 47: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 48: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 49: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 50: {
          let _char$32 = -1;
          if (_cursor < _end) {
            _char$32 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$32 >= 128 && _char$32 <= 191) {
            _tmp$2 = 54;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 51: {
          let _char$33 = -1;
          if (_cursor < _end) {
            _char$33 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$33 >= 128 && _char$33 <= 190) {
            _tmp$2 = 52;
          } else {
            if (_char$33 === 191) {
              _tmp$2 = 53;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 52: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 53: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 54: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 55: {
          let _char$34 = -1;
          if (_cursor < _end) {
            _char$34 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$34 >= 128 && _char$34 <= 191) {
            _tmp$2 = 56;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 56: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 57: {
          let _char$35 = -1;
          if (_cursor < _end) {
            _char$35 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$35 === 128) {
            _tmp$2 = 60;
          } else {
            if (_char$35 >= 129 && _char$35 <= 191) {
              _tmp$2 = 61;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 58: {
          let _char$36 = -1;
          if (_cursor < _end) {
            _char$36 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$36 >= 128 && _char$36 <= 191) {
            _tmp$2 = 59;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 59: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 60: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 61: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 62: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 63: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 64: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 65: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 66: {
          _match_pattern = 5;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 67: {
          _match_pattern = 0;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$37 = -1;
          if (_cursor < _end) {
            _char$37 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$37 >= 0 && _char$37 <= 9) {
            _tmp$2 = 68;
          } else {
            if (_char$37 >= 11 && _char$37 <= 255) {
              _tmp$2 = 68;
            } else {
              if (_char$37 === 10) {
                _tmp$2 = 69;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 68: {
          _match_pattern = 0;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$38 = -1;
          if (_cursor < _end) {
            _char$38 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$38 >= 0 && _char$38 <= 9) {
            _tmp$2 = 68;
          } else {
            if (_char$38 >= 11 && _char$38 <= 255) {
              _tmp$2 = 68;
            } else {
              if (_char$38 === 10) {
                _tmp$2 = 69;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 69: {
          _match_pattern = 0;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 70: {
          let _char$39 = -1;
          if (_cursor < _end) {
            _char$39 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$39 === 39) {
            _tmp$2 = 71;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 71: {
          _match_pattern = 2;
          _match_end = _cursor;
          _capture_0_start = _match_end + -3 | 0;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 72: {
          let _char$40 = -1;
          if (_cursor < _end) {
            _char$40 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$40 >= 0 && _char$40 <= 33) {
            _tmp$2 = 72;
          } else {
            if (_char$40 >= 35 && _char$40 <= 91) {
              _tmp$2 = 72;
            } else {
              if (_char$40 >= 93 && _char$40 <= 255) {
                _tmp$2 = 72;
              } else {
                if (_char$40 === 34) {
                  _tmp$2 = 73;
                } else {
                  if (_char$40 === 92) {
                    _tmp$2 = 74;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 73: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 74: {
          let _char$41 = -1;
          if (_cursor < _end) {
            _char$41 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$41 >= 0 && _char$41 <= 255) {
            _tmp$2 = 75;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 75: {
          let _char$42 = -1;
          if (_cursor < _end) {
            _char$42 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$42 >= 0 && _char$42 <= 33) {
            _tmp$2 = 72;
          } else {
            if (_char$42 >= 35 && _char$42 <= 91) {
              _tmp$2 = 72;
            } else {
              if (_char$42 >= 93 && _char$42 <= 255) {
                _tmp$2 = 72;
              } else {
                if (_char$42 === 34) {
                  _tmp$2 = 73;
                } else {
                  if (_char$42 === 92) {
                    _tmp$2 = 74;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    switch (_match_pattern) {
      case 0: {
        const t = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_string$38$(buffer, moonbitlang$ulex$lib$util$utf8$$decode_utf8(t));
        _tmp = next;
        continue _L;
      }
      case 1: {
        const t$2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_string$38$(buffer, moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$2));
        _tmp = next$2;
        continue _L;
      }
      case 2: {
        const t$3 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$3 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_string$38$(buffer, moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$3));
        _tmp = next$3;
        continue _L;
      }
      case 3: {
        const next$4 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_string$38$(buffer, "{");
        const next2 = moonbitlang$ulex$lib$parser$$code_rbrace_new(next$4, buffer);
        moonbitlang$core$builtin$$Logger$write_string$38$(buffer, "}");
        _tmp = next2;
        continue _L;
      }
      case 4: {
        return moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
      }
      case 5: {
        let c;
        switch (_capture_0_end - _capture_0_start | 0) {
          case 1: {
            c = _data[_capture_0_start];
            break;
          }
          case 2: {
            c = (_data[_capture_0_start] & 31) << 6 | _data[_capture_0_start + 1 | 0] & 63;
            break;
          }
          case 3: {
            c = (_data[_capture_0_start] & 15) << 12 | (_data[_capture_0_start + 1 | 0] & 63) << 6 | _data[_capture_0_start + 2 | 0] & 63;
            break;
          }
          case 4: {
            c = (_data[_capture_0_start] & 7) << 18 | (_data[_capture_0_start + 1 | 0] & 63) << 12 | ((_data[_capture_0_start + 2 | 0] & 63) << 6 | _data[_capture_0_start + 3 | 0] & 63);
            break;
          }
          default: {
            c = $panic();
          }
        }
        const next$5 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, c);
        _tmp = next$5;
        continue _L;
      }
      case 6: {
        return moonbitlang$core$abort$$abort$7$("Unexpected end of input");
      }
      case 7: {
        return $panic();
      }
      default: {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$parser$$string_inner_rquote_new(curr, buffer) {
  let _tmp = curr;
  _L: while (true) {
    const curr$2 = _tmp;
    const _data = curr$2.bytes;
    let _cursor = curr$2.start;
    const _end = _cursor + curr$2.len | 0;
    let _match_pattern = 14;
    let _match_start = _cursor;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$2 = 0;
    _L$2: while (true) {
      const _state = _tmp$2;
      switch (_state) {
        case 0: {
          let _char = -1;
          if (_cursor < _end) {
            _char = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char === -1) {
            _tmp$2 = 1;
          } else {
            if (_char >= 0 && _char <= 33) {
              _tmp$2 = 2;
            } else {
              if (_char >= 35 && _char <= 91) {
                _tmp$2 = 2;
              } else {
                if (_char >= 93 && _char <= 127) {
                  _tmp$2 = 2;
                } else {
                  if (_char === 34) {
                    _tmp$2 = 3;
                  } else {
                    if (_char === 92) {
                      _tmp$2 = 4;
                    } else {
                      if (_char >= 128 && _char <= 193) {
                        _tmp$2 = 5;
                      } else {
                        if (_char >= 245 && _char <= 255) {
                          _tmp$2 = 5;
                        } else {
                          if (_char === 194) {
                            _tmp$2 = 6;
                          } else {
                            if (_char >= 195 && _char <= 222) {
                              _tmp$2 = 7;
                            } else {
                              if (_char === 223) {
                                _tmp$2 = 8;
                              } else {
                                if (_char === 224) {
                                  _tmp$2 = 9;
                                } else {
                                  if (_char >= 225 && _char <= 236) {
                                    _tmp$2 = 10;
                                  } else {
                                    if (_char === 237) {
                                      _tmp$2 = 11;
                                    } else {
                                      if (_char === 238) {
                                        _tmp$2 = 12;
                                      } else {
                                        if (_char === 239) {
                                          _tmp$2 = 13;
                                        } else {
                                          if (_char === 240) {
                                            _tmp$2 = 14;
                                          } else {
                                            if (_char >= 241 && _char <= 243) {
                                              _tmp$2 = 15;
                                            } else {
                                              if (_char === 244) {
                                                _tmp$2 = 16;
                                              } else {
                                                break _L$2;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 13;
          _match_end = _cursor;
          break _L$2;
        }
        case 2: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 3: {
          _match_pattern = 0;
          _match_end = _cursor;
          break _L$2;
        }
        case 4: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$2 = -1;
          if (_cursor < _end) {
            _char$2 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          switch (_char$2) {
            case 34: {
              _tmp$2 = 65;
              break;
            }
            case 92: {
              _tmp$2 = 66;
              break;
            }
            case 98: {
              _tmp$2 = 67;
              break;
            }
            case 110: {
              _tmp$2 = 68;
              break;
            }
            case 114: {
              _tmp$2 = 69;
              break;
            }
            case 116: {
              _tmp$2 = 70;
              break;
            }
            case 117: {
              _tmp$2 = 71;
              break;
            }
            case 118: {
              _tmp$2 = 72;
              break;
            }
            case 120: {
              _tmp$2 = 73;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 5: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 6: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$3 = -1;
          if (_cursor < _end) {
            _char$3 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$3 === 128) {
            _tmp$2 = 63;
          } else {
            if (_char$3 >= 129 && _char$3 <= 191) {
              _tmp$2 = 64;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 7: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$4 = -1;
          if (_cursor < _end) {
            _char$4 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$4 >= 128 && _char$4 <= 191) {
            _tmp$2 = 62;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 8: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$5 = -1;
          if (_cursor < _end) {
            _char$5 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$5 >= 128 && _char$5 <= 190) {
            _tmp$2 = 60;
          } else {
            if (_char$5 === 191) {
              _tmp$2 = 61;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 9: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$6 = -1;
          if (_cursor < _end) {
            _char$6 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$6 === 160) {
            _tmp$2 = 55;
          } else {
            if (_char$6 >= 161 && _char$6 <= 191) {
              _tmp$2 = 56;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 10: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$7 = -1;
          if (_cursor < _end) {
            _char$7 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$7 >= 128 && _char$7 <= 191) {
            _tmp$2 = 53;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 11: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$8 = -1;
          if (_cursor < _end) {
            _char$8 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$8 >= 128 && _char$8 <= 158) {
            _tmp$2 = 48;
          } else {
            if (_char$8 === 159) {
              _tmp$2 = 49;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 12: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$9 = -1;
          if (_cursor < _end) {
            _char$9 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$9 === 128) {
            _tmp$2 = 43;
          } else {
            if (_char$9 >= 129 && _char$9 <= 191) {
              _tmp$2 = 44;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 13: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$10 = -1;
          if (_cursor < _end) {
            _char$10 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$10 >= 128 && _char$10 <= 190) {
            _tmp$2 = 38;
          } else {
            if (_char$10 === 191) {
              _tmp$2 = 39;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 14: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$11 = -1;
          if (_cursor < _end) {
            _char$11 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$11 === 144) {
            _tmp$2 = 29;
          } else {
            if (_char$11 >= 145 && _char$11 <= 191) {
              _tmp$2 = 30;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 15: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$12 = -1;
          if (_cursor < _end) {
            _char$12 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$12 >= 128 && _char$12 <= 191) {
            _tmp$2 = 26;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 16: {
          _match_pattern = 1;
          _match_end = _cursor;
          _capture_0_start = _match_end + -1 | 0;
          _capture_0_end = _match_end;
          let _char$13 = -1;
          if (_cursor < _end) {
            _char$13 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$13 >= 128 && _char$13 <= 142) {
            _tmp$2 = 17;
          } else {
            if (_char$13 === 143) {
              _tmp$2 = 18;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 17: {
          let _char$14 = -1;
          if (_cursor < _end) {
            _char$14 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$14 >= 128 && _char$14 <= 191) {
            _tmp$2 = 24;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 18: {
          let _char$15 = -1;
          if (_cursor < _end) {
            _char$15 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$15 >= 128 && _char$15 <= 190) {
            _tmp$2 = 19;
          } else {
            if (_char$15 === 191) {
              _tmp$2 = 20;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 19: {
          let _char$16 = -1;
          if (_cursor < _end) {
            _char$16 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$16 >= 128 && _char$16 <= 191) {
            _tmp$2 = 23;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 20: {
          let _char$17 = -1;
          if (_cursor < _end) {
            _char$17 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$17 >= 128 && _char$17 <= 190) {
            _tmp$2 = 21;
          } else {
            if (_char$17 === 191) {
              _tmp$2 = 22;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 21: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 22: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 23: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 24: {
          let _char$18 = -1;
          if (_cursor < _end) {
            _char$18 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$18 >= 128 && _char$18 <= 191) {
            _tmp$2 = 25;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 25: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 26: {
          let _char$19 = -1;
          if (_cursor < _end) {
            _char$19 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$19 >= 128 && _char$19 <= 191) {
            _tmp$2 = 27;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 27: {
          let _char$20 = -1;
          if (_cursor < _end) {
            _char$20 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$20 >= 128 && _char$20 <= 191) {
            _tmp$2 = 28;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 28: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 29: {
          let _char$21 = -1;
          if (_cursor < _end) {
            _char$21 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$21 === 128) {
            _tmp$2 = 33;
          } else {
            if (_char$21 >= 129 && _char$21 <= 191) {
              _tmp$2 = 34;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 30: {
          let _char$22 = -1;
          if (_cursor < _end) {
            _char$22 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$22 >= 128 && _char$22 <= 191) {
            _tmp$2 = 31;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 31: {
          let _char$23 = -1;
          if (_cursor < _end) {
            _char$23 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$23 >= 128 && _char$23 <= 191) {
            _tmp$2 = 32;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 32: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 33: {
          let _char$24 = -1;
          if (_cursor < _end) {
            _char$24 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$24 === 128) {
            _tmp$2 = 36;
          } else {
            if (_char$24 >= 129 && _char$24 <= 191) {
              _tmp$2 = 37;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 34: {
          let _char$25 = -1;
          if (_cursor < _end) {
            _char$25 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$25 >= 128 && _char$25 <= 191) {
            _tmp$2 = 35;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 35: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 36: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 37: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 38: {
          let _char$26 = -1;
          if (_cursor < _end) {
            _char$26 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$26 >= 128 && _char$26 <= 191) {
            _tmp$2 = 42;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 39: {
          let _char$27 = -1;
          if (_cursor < _end) {
            _char$27 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$27 >= 128 && _char$27 <= 190) {
            _tmp$2 = 40;
          } else {
            if (_char$27 === 191) {
              _tmp$2 = 41;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 40: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 41: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 42: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 43: {
          let _char$28 = -1;
          if (_cursor < _end) {
            _char$28 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$28 === 128) {
            _tmp$2 = 46;
          } else {
            if (_char$28 >= 129 && _char$28 <= 191) {
              _tmp$2 = 47;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 44: {
          let _char$29 = -1;
          if (_cursor < _end) {
            _char$29 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$29 >= 128 && _char$29 <= 191) {
            _tmp$2 = 45;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 45: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 46: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 47: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 48: {
          let _char$30 = -1;
          if (_cursor < _end) {
            _char$30 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$30 >= 128 && _char$30 <= 191) {
            _tmp$2 = 52;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 49: {
          let _char$31 = -1;
          if (_cursor < _end) {
            _char$31 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$31 >= 128 && _char$31 <= 190) {
            _tmp$2 = 50;
          } else {
            if (_char$31 === 191) {
              _tmp$2 = 51;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 50: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 51: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 52: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 53: {
          let _char$32 = -1;
          if (_cursor < _end) {
            _char$32 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$32 >= 128 && _char$32 <= 191) {
            _tmp$2 = 54;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 54: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 55: {
          let _char$33 = -1;
          if (_cursor < _end) {
            _char$33 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$33 === 128) {
            _tmp$2 = 58;
          } else {
            if (_char$33 >= 129 && _char$33 <= 191) {
              _tmp$2 = 59;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 56: {
          let _char$34 = -1;
          if (_cursor < _end) {
            _char$34 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$34 >= 128 && _char$34 <= 191) {
            _tmp$2 = 57;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 57: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 58: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 59: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 60: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 61: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 62: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 63: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 64: {
          _match_pattern = 12;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 65: {
          _match_pattern = 8;
          _match_end = _cursor;
          break _L$2;
        }
        case 66: {
          _match_pattern = 7;
          _match_end = _cursor;
          break _L$2;
        }
        case 67: {
          _match_pattern = 2;
          _match_end = _cursor;
          break _L$2;
        }
        case 68: {
          _match_pattern = 6;
          _match_end = _cursor;
          break _L$2;
        }
        case 69: {
          _match_pattern = 5;
          _match_end = _cursor;
          break _L$2;
        }
        case 70: {
          _match_pattern = 3;
          _match_end = _cursor;
          break _L$2;
        }
        case 71: {
          let _char$35 = -1;
          if (_cursor < _end) {
            _char$35 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$35 >= 48 && _char$35 <= 57) {
            _tmp$2 = 76;
          } else {
            if (_char$35 >= 65 && _char$35 <= 70) {
              _tmp$2 = 76;
            } else {
              if (_char$35 >= 97 && _char$35 <= 102) {
                _tmp$2 = 76;
              } else {
                if (_char$35 === 123) {
                  _tmp$2 = 77;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 72: {
          _match_pattern = 4;
          _match_end = _cursor;
          break _L$2;
        }
        case 73: {
          let _char$36 = -1;
          if (_cursor < _end) {
            _char$36 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$36 >= 48 && _char$36 <= 57) {
            _tmp$2 = 74;
          } else {
            if (_char$36 >= 65 && _char$36 <= 70) {
              _tmp$2 = 74;
            } else {
              if (_char$36 >= 97 && _char$36 <= 102) {
                _tmp$2 = 74;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 74: {
          let _char$37 = -1;
          if (_cursor < _end) {
            _char$37 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$37 >= 48 && _char$37 <= 57) {
            _tmp$2 = 75;
          } else {
            if (_char$37 >= 65 && _char$37 <= 70) {
              _tmp$2 = 75;
            } else {
              if (_char$37 >= 97 && _char$37 <= 102) {
                _tmp$2 = 75;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 75: {
          _match_pattern = 9;
          _match_end = _cursor;
          _capture_0_start = _match_end + -2 | 0;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 76: {
          let _char$38 = -1;
          if (_cursor < _end) {
            _char$38 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$38 >= 48 && _char$38 <= 57) {
            _tmp$2 = 80;
          } else {
            if (_char$38 >= 65 && _char$38 <= 70) {
              _tmp$2 = 80;
            } else {
              if (_char$38 >= 97 && _char$38 <= 102) {
                _tmp$2 = 80;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 77: {
          let _char$39 = -1;
          if (_cursor < _end) {
            _char$39 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$39 >= 48 && _char$39 <= 57) {
            _tmp$2 = 78;
          } else {
            if (_char$39 >= 65 && _char$39 <= 70) {
              _tmp$2 = 78;
            } else {
              if (_char$39 >= 97 && _char$39 <= 102) {
                _tmp$2 = 78;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 78: {
          let _char$40 = -1;
          if (_cursor < _end) {
            _char$40 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$40 >= 48 && _char$40 <= 57) {
            _tmp$2 = 78;
          } else {
            if (_char$40 >= 65 && _char$40 <= 70) {
              _tmp$2 = 78;
            } else {
              if (_char$40 >= 97 && _char$40 <= 102) {
                _tmp$2 = 78;
              } else {
                if (_char$40 === 125) {
                  _tmp$2 = 79;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 79: {
          _match_pattern = 11;
          _match_end = _cursor;
          _capture_0_start = _match_start + 3 | 0;
          _capture_0_end = _match_end + -1 | 0;
          break _L$2;
        }
        case 80: {
          let _char$41 = -1;
          if (_cursor < _end) {
            _char$41 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$41 >= 48 && _char$41 <= 57) {
            _tmp$2 = 81;
          } else {
            if (_char$41 >= 65 && _char$41 <= 70) {
              _tmp$2 = 81;
            } else {
              if (_char$41 >= 97 && _char$41 <= 102) {
                _tmp$2 = 81;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 81: {
          let _char$42 = -1;
          if (_cursor < _end) {
            _char$42 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$42 >= 48 && _char$42 <= 57) {
            _tmp$2 = 82;
          } else {
            if (_char$42 >= 65 && _char$42 <= 70) {
              _tmp$2 = 82;
            } else {
              if (_char$42 >= 97 && _char$42 <= 102) {
                _tmp$2 = 82;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 82: {
          _match_pattern = 10;
          _match_end = _cursor;
          _capture_0_start = _match_end + -4 | 0;
          _capture_0_end = _match_end;
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    switch (_match_pattern) {
      case 0: {
        return moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
      }
      case 1: {
        const t = _data[_capture_0_start];
        const next = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, t);
        _tmp = next;
        continue _L;
      }
      case 2: {
        const next$2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 8);
        _tmp = next$2;
        continue _L;
      }
      case 3: {
        const next$3 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 9);
        _tmp = next$3;
        continue _L;
      }
      case 4: {
        const next$4 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 11);
        _tmp = next$4;
        continue _L;
      }
      case 5: {
        const next$5 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 13);
        _tmp = next$5;
        continue _L;
      }
      case 6: {
        const next$6 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 10);
        _tmp = next$6;
        continue _L;
      }
      case 7: {
        const next$7 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 92);
        _tmp = next$7;
        continue _L;
      }
      case 8: {
        const next$8 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, 34);
        _tmp = next$8;
        continue _L;
      }
      case 9: {
        const t$2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$9 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$3;
        let _try_err;
        _L$3: {
          _L$4: {
            const _bind = moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$2);
            const _bind$2 = moonbitlang$core$strconv$$parse_int({ str: _bind, start: 0, end: _bind.length }, 16);
            let _tmp$4;
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _tmp$4 = _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$5 = _err._0;
              _try_err = _tmp$5;
              break _L$4;
            }
            _tmp$3 = new Result$Ok$10$(_tmp$4);
            break _L$3;
          }
          _tmp$3 = new Result$Err$10$(_try_err);
        }
        const code = moonbitlang$core$result$$Result$unwrap$67$(_tmp$3);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, code);
        _tmp = next$9;
        continue _L;
      }
      case 10: {
        const t$3 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$10 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$4;
        let _try_err$2;
        _L$4: {
          _L$5: {
            const _bind = moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$3);
            const _bind$2 = moonbitlang$core$strconv$$parse_int({ str: _bind, start: 0, end: _bind.length }, 16);
            let _tmp$5;
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _tmp$5 = _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$6 = _err._0;
              _try_err$2 = _tmp$6;
              break _L$5;
            }
            _tmp$4 = new Result$Ok$10$(_tmp$5);
            break _L$4;
          }
          _tmp$4 = new Result$Err$10$(_try_err$2);
        }
        const code$2 = moonbitlang$core$result$$Result$unwrap$67$(_tmp$4);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, code$2);
        _tmp = next$10;
        continue _L;
      }
      case 11: {
        const t$4 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$11 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$5;
        let _try_err$3;
        _L$5: {
          _L$6: {
            const _bind = moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$4);
            const _bind$2 = moonbitlang$core$strconv$$parse_int({ str: _bind, start: 0, end: _bind.length }, 16);
            let _tmp$6;
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _tmp$6 = _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$7 = _err._0;
              _try_err$3 = _tmp$7;
              break _L$6;
            }
            _tmp$5 = new Result$Ok$10$(_tmp$6);
            break _L$5;
          }
          _tmp$5 = new Result$Err$10$(_try_err$3);
        }
        const code$3 = moonbitlang$core$result$$Result$unwrap$67$(_tmp$5);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, code$3);
        _tmp = next$11;
        continue _L;
      }
      case 12: {
        let c;
        switch (_capture_0_end - _capture_0_start | 0) {
          case 1: {
            c = _data[_capture_0_start];
            break;
          }
          case 2: {
            c = (_data[_capture_0_start] & 31) << 6 | _data[_capture_0_start + 1 | 0] & 63;
            break;
          }
          case 3: {
            c = (_data[_capture_0_start] & 15) << 12 | (_data[_capture_0_start + 1 | 0] & 63) << 6 | _data[_capture_0_start + 2 | 0] & 63;
            break;
          }
          case 4: {
            c = (_data[_capture_0_start] & 7) << 18 | (_data[_capture_0_start + 1 | 0] & 63) << 12 | ((_data[_capture_0_start + 2 | 0] & 63) << 6 | _data[_capture_0_start + 3 | 0] & 63);
            break;
          }
          default: {
            c = $panic();
          }
        }
        const next$12 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        moonbitlang$core$builtin$$Logger$write_char$38$(buffer, c);
        _tmp = next$12;
        continue _L;
      }
      case 13: {
        return moonbitlang$core$abort$$abort$7$("Unexpected end of input");
      }
      case 14: {
        return $panic();
      }
      default: {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$parser$$token_new(curr, base) {
  let _tmp = curr;
  _L: while (true) {
    const curr$2 = _tmp;
    const _data = curr$2.bytes;
    let _cursor = curr$2.start;
    const _end = _cursor + curr$2.len | 0;
    let _match_pattern = 35;
    let _match_start = _cursor;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _tag_3_1 = -1;
    let _tag_3 = -1;
    let _tag_2_1 = -1;
    let _tag_2 = -1;
    let _tag_1_1 = -1;
    let _tag_1 = -1;
    let _tag_0 = -1;
    let _tmp$2 = 0;
    _L$2: while (true) {
      const _state = _tmp$2;
      switch (_state) {
        case 0: {
          let _char = -1;
          if (_cursor < _end) {
            _char = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char === -1) {
            _tmp$2 = 1;
          } else {
            if (_char >= 9 && _char <= 10) {
              _tmp$2 = 2;
            } else {
              if (_char === 13) {
                _tmp$2 = 2;
              } else {
                if (_char === 32) {
                  _tmp$2 = 2;
                } else {
                  if (_char === 34) {
                    _tmp$2 = 3;
                  } else {
                    if (_char === 39) {
                      _tmp$2 = 4;
                    } else {
                      if (_char === 40) {
                        _tmp$2 = 5;
                      } else {
                        if (_char === 41) {
                          _tmp$2 = 6;
                        } else {
                          if (_char === 42) {
                            _tmp$2 = 7;
                          } else {
                            if (_char === 43) {
                              _tmp$2 = 8;
                            } else {
                              if (_char === 45) {
                                _tmp$2 = 9;
                              } else {
                                if (_char === 47) {
                                  _tmp$2 = 10;
                                } else {
                                  if (_char === 59) {
                                    _tmp$2 = 11;
                                  } else {
                                    if (_char === 61) {
                                      _tmp$2 = 12;
                                    } else {
                                      if (_char === 63) {
                                        _tmp$2 = 13;
                                      } else {
                                        if (_char === 91) {
                                          _tmp$2 = 14;
                                        } else {
                                          if (_char === 92) {
                                            _tmp$2 = 15;
                                          } else {
                                            if (_char === 93) {
                                              _tmp$2 = 16;
                                            } else {
                                              if (_char === 94) {
                                                _tmp$2 = 17;
                                              } else {
                                                if (_char === 95) {
                                                  _tmp$2 = 18;
                                                } else {
                                                  if (_char >= 97 && _char <= 111) {
                                                    _tmp$2 = 19;
                                                  } else {
                                                    if (_char === 113) {
                                                      _tmp$2 = 19;
                                                    } else {
                                                      if (_char >= 115 && _char <= 122) {
                                                        _tmp$2 = 19;
                                                      } else {
                                                        if (_char === 112) {
                                                          _tmp$2 = 20;
                                                        } else {
                                                          if (_char === 114) {
                                                            _tmp$2 = 21;
                                                          } else {
                                                            if (_char === 123) {
                                                              _tmp$2 = 22;
                                                            } else {
                                                              if (_char === 124) {
                                                                _tmp$2 = 23;
                                                              } else {
                                                                if (_char === 125) {
                                                                  _tmp$2 = 24;
                                                                } else {
                                                                  break _L$2;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 0;
          _match_end = _cursor;
          break _L$2;
        }
        case 2: {
          _match_pattern = 1;
          _match_end = _cursor;
          let _char$2 = -1;
          if (_cursor < _end) {
            _char$2 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$2 >= 9 && _char$2 <= 10) {
            _tmp$2 = 2;
          } else {
            if (_char$2 === 13) {
              _tmp$2 = 2;
            } else {
              if (_char$2 === 32) {
                _tmp$2 = 2;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 3: {
          _match_pattern = 33;
          _match_end = _cursor;
          break _L$2;
        }
        case 4: {
          let _char$3 = -1;
          if (_cursor < _end) {
            _char$3 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$3 >= 0 && _char$3 <= 38) {
            _tmp$2 = 47;
          } else {
            if (_char$3 >= 40 && _char$3 <= 91) {
              _tmp$2 = 47;
            } else {
              if (_char$3 >= 93 && _char$3 <= 127) {
                _tmp$2 = 47;
              } else {
                if (_char$3 === 92) {
                  _tmp$2 = 48;
                } else {
                  if (_char$3 === 194) {
                    _tmp$2 = 49;
                  } else {
                    if (_char$3 >= 195 && _char$3 <= 222) {
                      _tmp$2 = 50;
                    } else {
                      if (_char$3 === 223) {
                        _tmp$2 = 51;
                      } else {
                        if (_char$3 === 224) {
                          _tmp$2 = 52;
                        } else {
                          if (_char$3 >= 225 && _char$3 <= 236) {
                            _tmp$2 = 53;
                          } else {
                            if (_char$3 === 237) {
                              _tmp$2 = 54;
                            } else {
                              if (_char$3 === 238) {
                                _tmp$2 = 55;
                              } else {
                                if (_char$3 === 239) {
                                  _tmp$2 = 56;
                                } else {
                                  if (_char$3 === 240) {
                                    _tmp$2 = 57;
                                  } else {
                                    if (_char$3 >= 241 && _char$3 <= 243) {
                                      _tmp$2 = 58;
                                    } else {
                                      if (_char$3 === 244) {
                                        _tmp$2 = 59;
                                      } else {
                                        break _L$2;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 5: {
          _match_pattern = 9;
          _match_end = _cursor;
          break _L$2;
        }
        case 6: {
          _match_pattern = 10;
          _match_end = _cursor;
          break _L$2;
        }
        case 7: {
          _match_pattern = 16;
          _match_end = _cursor;
          break _L$2;
        }
        case 8: {
          _match_pattern = 17;
          _match_end = _cursor;
          break _L$2;
        }
        case 9: {
          _match_pattern = 19;
          _match_end = _cursor;
          break _L$2;
        }
        case 10: {
          let _char$4 = -1;
          if (_cursor < _end) {
            _char$4 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$4 === 47) {
            _tmp$2 = 44;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 11: {
          _match_pattern = 14;
          _match_end = _cursor;
          break _L$2;
        }
        case 12: {
          _match_pattern = 13;
          _match_end = _cursor;
          let _char$5 = -1;
          if (_cursor < _end) {
            _char$5 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$5 === 62) {
            _tmp$2 = 43;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 13: {
          _match_pattern = 18;
          _match_end = _cursor;
          break _L$2;
        }
        case 14: {
          _match_pattern = 11;
          _match_end = _cursor;
          break _L$2;
        }
        case 15: {
          _match_pattern = 21;
          _match_end = _cursor;
          break _L$2;
        }
        case 16: {
          _match_pattern = 12;
          _match_end = _cursor;
          break _L$2;
        }
        case 17: {
          _match_pattern = 20;
          _match_end = _cursor;
          break _L$2;
        }
        case 18: {
          _match_pattern = 6;
          _match_end = _cursor;
          let _char$6 = -1;
          if (_cursor < _end) {
            _char$6 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$6 >= 48 && _char$6 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$6 >= 65 && _char$6 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$6 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$6 >= 97 && _char$6 <= 122) {
                  _tmp$2 = 25;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 19: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$7 = -1;
          if (_cursor < _end) {
            _char$7 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$7 >= 48 && _char$7 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$7 >= 65 && _char$7 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$7 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$7 >= 97 && _char$7 <= 122) {
                  _tmp$2 = 25;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 20: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$8 = -1;
          if (_cursor < _end) {
            _char$8 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$8 >= 48 && _char$8 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$8 >= 65 && _char$8 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$8 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$8 >= 98 && _char$8 <= 122) {
                  _tmp$2 = 25;
                } else {
                  if (_char$8 === 97) {
                    _tmp$2 = 37;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 21: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$9 = -1;
          if (_cursor < _end) {
            _char$9 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$9 >= 48 && _char$9 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$9 >= 65 && _char$9 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$9 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$9 >= 97 && _char$9 <= 116) {
                  _tmp$2 = 25;
                } else {
                  if (_char$9 >= 118 && _char$9 <= 122) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$9 === 117) {
                      _tmp$2 = 26;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 22: {
          _match_pattern = 7;
          _match_end = _cursor;
          break _L$2;
        }
        case 23: {
          _match_pattern = 15;
          _match_end = _cursor;
          break _L$2;
        }
        case 24: {
          _match_pattern = 8;
          _match_end = _cursor;
          break _L$2;
        }
        case 25: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$10 = -1;
          if (_cursor < _end) {
            _char$10 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$10 >= 48 && _char$10 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$10 >= 65 && _char$10 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$10 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$10 >= 97 && _char$10 <= 122) {
                  _tmp$2 = 25;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 26: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$11 = -1;
          if (_cursor < _end) {
            _char$11 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$11 >= 48 && _char$11 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$11 >= 65 && _char$11 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$11 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$11 >= 97 && _char$11 <= 107) {
                  _tmp$2 = 25;
                } else {
                  if (_char$11 >= 109 && _char$11 <= 122) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$11 === 108) {
                      _tmp$2 = 27;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 27: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$12 = -1;
          if (_cursor < _end) {
            _char$12 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$12 >= 48 && _char$12 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$12 >= 65 && _char$12 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$12 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$12 >= 97 && _char$12 <= 100) {
                  _tmp$2 = 25;
                } else {
                  if (_char$12 >= 102 && _char$12 <= 122) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$12 === 101) {
                      _tmp$2 = 28;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 28: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$13 = -1;
          if (_cursor < _end) {
            _char$13 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$13 >= 9 && _char$13 <= 10) {
            _tmp$2 = 29;
          } else {
            if (_char$13 === 13) {
              _tmp$2 = 29;
            } else {
              if (_char$13 === 32) {
                _tmp$2 = 29;
              } else {
                if (_char$13 >= 48 && _char$13 <= 57) {
                  _tmp$2 = 25;
                } else {
                  if (_char$13 >= 65 && _char$13 <= 90) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$13 === 95) {
                      _tmp$2 = 25;
                    } else {
                      if (_char$13 >= 97 && _char$13 <= 122) {
                        _tmp$2 = 25;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 29: {
          _tag_0 = _cursor;
          let _char$14 = -1;
          if (_cursor < _end) {
            _char$14 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$14 >= 9 && _char$14 <= 10) {
            _tmp$2 = 29;
          } else {
            if (_char$14 === 13) {
              _tmp$2 = 29;
            } else {
              if (_char$14 === 32) {
                _tmp$2 = 29;
              } else {
                if (_char$14 === 95) {
                  _tmp$2 = 30;
                } else {
                  if (_char$14 >= 97 && _char$14 <= 122) {
                    _tmp$2 = 30;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 30: {
          _tag_1 = _cursor;
          _tag_2 = _cursor;
          let _char$15 = -1;
          if (_cursor < _end) {
            _char$15 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$15 >= 0 && _char$15 <= 47) {
            _tmp$2 = 31;
          } else {
            if (_char$15 >= 58 && _char$15 <= 64) {
              _tmp$2 = 31;
            } else {
              if (_char$15 >= 91 && _char$15 <= 94) {
                _tmp$2 = 31;
              } else {
                if (_char$15 === 96) {
                  _tmp$2 = 31;
                } else {
                  if (_char$15 >= 124 && _char$15 <= 255) {
                    _tmp$2 = 31;
                  } else {
                    if (_char$15 >= 48 && _char$15 <= 57) {
                      _tmp$2 = 32;
                    } else {
                      if (_char$15 >= 65 && _char$15 <= 90) {
                        _tmp$2 = 32;
                      } else {
                        if (_char$15 === 95) {
                          _tmp$2 = 32;
                        } else {
                          if (_char$15 >= 97 && _char$15 <= 122) {
                            _tmp$2 = 32;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 31: {
          _tag_3 = _cursor;
          let _char$16 = -1;
          if (_cursor < _end) {
            _char$16 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$16 >= 0 && _char$16 <= 8) {
            _tmp$2 = 31;
          } else {
            if (_char$16 >= 11 && _char$16 <= 12) {
              _tmp$2 = 31;
            } else {
              if (_char$16 >= 14 && _char$16 <= 31) {
                _tmp$2 = 31;
              } else {
                if (_char$16 >= 33 && _char$16 <= 122) {
                  _tmp$2 = 31;
                } else {
                  if (_char$16 >= 124 && _char$16 <= 255) {
                    _tmp$2 = 31;
                  } else {
                    if (_char$16 >= 9 && _char$16 <= 10) {
                      _tmp$2 = 35;
                    } else {
                      if (_char$16 === 13) {
                        _tmp$2 = 35;
                      } else {
                        if (_char$16 === 32) {
                          _tmp$2 = 35;
                        } else {
                          if (_char$16 === 123) {
                            _tmp$2 = 36;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 32: {
          _tag_1_1 = _tag_1;
          _tag_1 = _cursor;
          _tag_2_1 = _tag_2;
          _tag_2 = _cursor;
          _tag_3 = _cursor;
          let _char$17 = -1;
          if (_cursor < _end) {
            _char$17 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$17 >= 0 && _char$17 <= 8) {
            _tmp$2 = 31;
          } else {
            if (_char$17 >= 11 && _char$17 <= 12) {
              _tmp$2 = 31;
            } else {
              if (_char$17 >= 14 && _char$17 <= 31) {
                _tmp$2 = 31;
              } else {
                if (_char$17 >= 33 && _char$17 <= 47) {
                  _tmp$2 = 31;
                } else {
                  if (_char$17 >= 58 && _char$17 <= 64) {
                    _tmp$2 = 31;
                  } else {
                    if (_char$17 >= 91 && _char$17 <= 94) {
                      _tmp$2 = 31;
                    } else {
                      if (_char$17 === 96) {
                        _tmp$2 = 31;
                      } else {
                        if (_char$17 >= 124 && _char$17 <= 255) {
                          _tmp$2 = 31;
                        } else {
                          if (_char$17 >= 9 && _char$17 <= 10) {
                            _tmp$2 = 33;
                          } else {
                            if (_char$17 === 13) {
                              _tmp$2 = 33;
                            } else {
                              if (_char$17 === 32) {
                                _tmp$2 = 33;
                              } else {
                                if (_char$17 >= 48 && _char$17 <= 57) {
                                  _tmp$2 = 32;
                                } else {
                                  if (_char$17 >= 65 && _char$17 <= 90) {
                                    _tmp$2 = 32;
                                  } else {
                                    if (_char$17 === 95) {
                                      _tmp$2 = 32;
                                    } else {
                                      if (_char$17 >= 97 && _char$17 <= 122) {
                                        _tmp$2 = 32;
                                      } else {
                                        if (_char$17 === 123) {
                                          _tmp$2 = 34;
                                        } else {
                                          break _L$2;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 33: {
          _tag_3_1 = _tag_3;
          _tag_3 = _cursor;
          let _char$18 = -1;
          if (_cursor < _end) {
            _char$18 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$18 >= 0 && _char$18 <= 8) {
            _tmp$2 = 31;
          } else {
            if (_char$18 >= 11 && _char$18 <= 12) {
              _tmp$2 = 31;
            } else {
              if (_char$18 >= 14 && _char$18 <= 31) {
                _tmp$2 = 31;
              } else {
                if (_char$18 >= 33 && _char$18 <= 122) {
                  _tmp$2 = 31;
                } else {
                  if (_char$18 >= 124 && _char$18 <= 255) {
                    _tmp$2 = 31;
                  } else {
                    if (_char$18 >= 9 && _char$18 <= 10) {
                      _tmp$2 = 35;
                    } else {
                      if (_char$18 === 13) {
                        _tmp$2 = 35;
                      } else {
                        if (_char$18 === 32) {
                          _tmp$2 = 35;
                        } else {
                          if (_char$18 === 123) {
                            _tmp$2 = 36;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 34: {
          _tag_1 = _tag_1_1;
          _tag_2 = _tag_2_1;
          _match_pattern = 3;
          _match_end = _cursor;
          _capture_0_start = _tag_0;
          _capture_0_end = _tag_1;
          _capture_1_start = _tag_2;
          _capture_1_end = _tag_3;
          break _L$2;
        }
        case 35: {
          _tag_3_1 = _tag_3;
          _tag_3 = _cursor;
          let _char$19 = -1;
          if (_cursor < _end) {
            _char$19 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$19 >= 0 && _char$19 <= 8) {
            _tmp$2 = 31;
          } else {
            if (_char$19 >= 11 && _char$19 <= 12) {
              _tmp$2 = 31;
            } else {
              if (_char$19 >= 14 && _char$19 <= 31) {
                _tmp$2 = 31;
              } else {
                if (_char$19 >= 33 && _char$19 <= 122) {
                  _tmp$2 = 31;
                } else {
                  if (_char$19 >= 124 && _char$19 <= 255) {
                    _tmp$2 = 31;
                  } else {
                    if (_char$19 >= 9 && _char$19 <= 10) {
                      _tmp$2 = 35;
                    } else {
                      if (_char$19 === 13) {
                        _tmp$2 = 35;
                      } else {
                        if (_char$19 === 32) {
                          _tmp$2 = 35;
                        } else {
                          if (_char$19 === 123) {
                            _tmp$2 = 36;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 36: {
          _match_pattern = 3;
          _match_end = _cursor;
          _capture_0_start = _tag_0;
          _capture_0_end = _tag_1;
          _capture_1_start = _tag_2;
          _capture_1_end = _tag_3;
          break _L$2;
        }
        case 37: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$20 = -1;
          if (_cursor < _end) {
            _char$20 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$20 >= 48 && _char$20 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$20 >= 65 && _char$20 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$20 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$20 >= 97 && _char$20 <= 113) {
                  _tmp$2 = 25;
                } else {
                  if (_char$20 >= 115 && _char$20 <= 122) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$20 === 114) {
                      _tmp$2 = 38;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 38: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$21 = -1;
          if (_cursor < _end) {
            _char$21 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$21 >= 48 && _char$21 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$21 >= 65 && _char$21 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$21 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$21 >= 97 && _char$21 <= 114) {
                  _tmp$2 = 25;
                } else {
                  if (_char$21 >= 116 && _char$21 <= 122) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$21 === 115) {
                      _tmp$2 = 39;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 39: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$22 = -1;
          if (_cursor < _end) {
            _char$22 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$22 >= 48 && _char$22 <= 57) {
            _tmp$2 = 25;
          } else {
            if (_char$22 >= 65 && _char$22 <= 90) {
              _tmp$2 = 25;
            } else {
              if (_char$22 === 95) {
                _tmp$2 = 25;
              } else {
                if (_char$22 >= 97 && _char$22 <= 100) {
                  _tmp$2 = 25;
                } else {
                  if (_char$22 >= 102 && _char$22 <= 122) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$22 === 101) {
                      _tmp$2 = 40;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 40: {
          _match_pattern = 34;
          _match_end = _cursor;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          let _char$23 = -1;
          if (_cursor < _end) {
            _char$23 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$23 >= 9 && _char$23 <= 10) {
            _tmp$2 = 41;
          } else {
            if (_char$23 === 13) {
              _tmp$2 = 41;
            } else {
              if (_char$23 === 32) {
                _tmp$2 = 41;
              } else {
                if (_char$23 >= 48 && _char$23 <= 57) {
                  _tmp$2 = 25;
                } else {
                  if (_char$23 >= 65 && _char$23 <= 90) {
                    _tmp$2 = 25;
                  } else {
                    if (_char$23 === 95) {
                      _tmp$2 = 25;
                    } else {
                      if (_char$23 >= 97 && _char$23 <= 122) {
                        _tmp$2 = 25;
                      } else {
                        if (_char$23 === 123) {
                          _tmp$2 = 42;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 41: {
          let _char$24 = -1;
          if (_cursor < _end) {
            _char$24 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$24 >= 9 && _char$24 <= 10) {
            _tmp$2 = 41;
          } else {
            if (_char$24 === 13) {
              _tmp$2 = 41;
            } else {
              if (_char$24 === 32) {
                _tmp$2 = 41;
              } else {
                if (_char$24 === 123) {
                  _tmp$2 = 42;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 42: {
          _match_pattern = 4;
          _match_end = _cursor;
          break _L$2;
        }
        case 43: {
          _match_pattern = 5;
          _match_end = _cursor;
          break _L$2;
        }
        case 44: {
          _match_pattern = 2;
          _match_end = _cursor;
          let _char$25 = -1;
          if (_cursor < _end) {
            _char$25 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$25 >= 0 && _char$25 <= 9) {
            _tmp$2 = 45;
          } else {
            if (_char$25 >= 11 && _char$25 <= 255) {
              _tmp$2 = 45;
            } else {
              if (_char$25 === 10) {
                _tmp$2 = 46;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 45: {
          _match_pattern = 2;
          _match_end = _cursor;
          let _char$26 = -1;
          if (_cursor < _end) {
            _char$26 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$26 >= 0 && _char$26 <= 9) {
            _tmp$2 = 45;
          } else {
            if (_char$26 >= 11 && _char$26 <= 255) {
              _tmp$2 = 45;
            } else {
              if (_char$26 === 10) {
                _tmp$2 = 46;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 46: {
          _match_pattern = 2;
          _match_end = _cursor;
          break _L$2;
        }
        case 47: {
          let _char$27 = -1;
          if (_cursor < _end) {
            _char$27 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$27 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 48: {
          let _char$28 = -1;
          if (_cursor < _end) {
            _char$28 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          switch (_char$28) {
            case 39: {
              _tmp$2 = 109;
              break;
            }
            case 92: {
              _tmp$2 = 110;
              break;
            }
            case 98: {
              _tmp$2 = 111;
              break;
            }
            case 110: {
              _tmp$2 = 112;
              break;
            }
            case 114: {
              _tmp$2 = 113;
              break;
            }
            case 116: {
              _tmp$2 = 114;
              break;
            }
            case 117: {
              _tmp$2 = 115;
              break;
            }
            case 118: {
              _tmp$2 = 116;
              break;
            }
            case 120: {
              _tmp$2 = 117;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 49: {
          let _char$29 = -1;
          if (_cursor < _end) {
            _char$29 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$29 === 128) {
            _tmp$2 = 107;
          } else {
            if (_char$29 >= 129 && _char$29 <= 191) {
              _tmp$2 = 108;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 50: {
          let _char$30 = -1;
          if (_cursor < _end) {
            _char$30 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$30 >= 128 && _char$30 <= 191) {
            _tmp$2 = 106;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 51: {
          let _char$31 = -1;
          if (_cursor < _end) {
            _char$31 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$31 >= 128 && _char$31 <= 190) {
            _tmp$2 = 104;
          } else {
            if (_char$31 === 191) {
              _tmp$2 = 105;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 52: {
          let _char$32 = -1;
          if (_cursor < _end) {
            _char$32 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$32 === 160) {
            _tmp$2 = 99;
          } else {
            if (_char$32 >= 161 && _char$32 <= 191) {
              _tmp$2 = 100;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 53: {
          let _char$33 = -1;
          if (_cursor < _end) {
            _char$33 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$33 >= 128 && _char$33 <= 191) {
            _tmp$2 = 97;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 54: {
          let _char$34 = -1;
          if (_cursor < _end) {
            _char$34 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$34 >= 128 && _char$34 <= 158) {
            _tmp$2 = 92;
          } else {
            if (_char$34 === 159) {
              _tmp$2 = 93;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 55: {
          let _char$35 = -1;
          if (_cursor < _end) {
            _char$35 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$35 === 128) {
            _tmp$2 = 87;
          } else {
            if (_char$35 >= 129 && _char$35 <= 191) {
              _tmp$2 = 88;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 56: {
          let _char$36 = -1;
          if (_cursor < _end) {
            _char$36 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$36 >= 128 && _char$36 <= 190) {
            _tmp$2 = 82;
          } else {
            if (_char$36 === 191) {
              _tmp$2 = 83;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 57: {
          let _char$37 = -1;
          if (_cursor < _end) {
            _char$37 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$37 === 144) {
            _tmp$2 = 73;
          } else {
            if (_char$37 >= 145 && _char$37 <= 191) {
              _tmp$2 = 74;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 58: {
          let _char$38 = -1;
          if (_cursor < _end) {
            _char$38 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$38 >= 128 && _char$38 <= 191) {
            _tmp$2 = 70;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 59: {
          let _char$39 = -1;
          if (_cursor < _end) {
            _char$39 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$39 >= 128 && _char$39 <= 142) {
            _tmp$2 = 60;
          } else {
            if (_char$39 === 143) {
              _tmp$2 = 61;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 60: {
          let _char$40 = -1;
          if (_cursor < _end) {
            _char$40 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$40 >= 128 && _char$40 <= 191) {
            _tmp$2 = 68;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 61: {
          let _char$41 = -1;
          if (_cursor < _end) {
            _char$41 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$41 >= 128 && _char$41 <= 190) {
            _tmp$2 = 62;
          } else {
            if (_char$41 === 191) {
              _tmp$2 = 63;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 62: {
          let _char$42 = -1;
          if (_cursor < _end) {
            _char$42 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$42 >= 128 && _char$42 <= 191) {
            _tmp$2 = 67;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 63: {
          let _char$43 = -1;
          if (_cursor < _end) {
            _char$43 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$43 >= 128 && _char$43 <= 190) {
            _tmp$2 = 64;
          } else {
            if (_char$43 === 191) {
              _tmp$2 = 65;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 64: {
          let _char$44 = -1;
          if (_cursor < _end) {
            _char$44 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$44 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 65: {
          let _char$45 = -1;
          if (_cursor < _end) {
            _char$45 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$45 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 66: {
          _match_pattern = 22;
          _match_end = _cursor;
          _capture_0_start = _match_start + 1 | 0;
          _capture_0_end = _match_end + -1 | 0;
          break _L$2;
        }
        case 67: {
          let _char$46 = -1;
          if (_cursor < _end) {
            _char$46 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$46 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 68: {
          let _char$47 = -1;
          if (_cursor < _end) {
            _char$47 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$47 >= 128 && _char$47 <= 191) {
            _tmp$2 = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 69: {
          let _char$48 = -1;
          if (_cursor < _end) {
            _char$48 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$48 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 70: {
          let _char$49 = -1;
          if (_cursor < _end) {
            _char$49 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$49 >= 128 && _char$49 <= 191) {
            _tmp$2 = 71;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 71: {
          let _char$50 = -1;
          if (_cursor < _end) {
            _char$50 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$50 >= 128 && _char$50 <= 191) {
            _tmp$2 = 72;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 72: {
          let _char$51 = -1;
          if (_cursor < _end) {
            _char$51 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$51 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 73: {
          let _char$52 = -1;
          if (_cursor < _end) {
            _char$52 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$52 === 128) {
            _tmp$2 = 77;
          } else {
            if (_char$52 >= 129 && _char$52 <= 191) {
              _tmp$2 = 78;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 74: {
          let _char$53 = -1;
          if (_cursor < _end) {
            _char$53 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$53 >= 128 && _char$53 <= 191) {
            _tmp$2 = 75;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 75: {
          let _char$54 = -1;
          if (_cursor < _end) {
            _char$54 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$54 >= 128 && _char$54 <= 191) {
            _tmp$2 = 76;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 76: {
          let _char$55 = -1;
          if (_cursor < _end) {
            _char$55 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$55 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 77: {
          let _char$56 = -1;
          if (_cursor < _end) {
            _char$56 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$56 === 128) {
            _tmp$2 = 80;
          } else {
            if (_char$56 >= 129 && _char$56 <= 191) {
              _tmp$2 = 81;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 78: {
          let _char$57 = -1;
          if (_cursor < _end) {
            _char$57 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$57 >= 128 && _char$57 <= 191) {
            _tmp$2 = 79;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 79: {
          let _char$58 = -1;
          if (_cursor < _end) {
            _char$58 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$58 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 80: {
          let _char$59 = -1;
          if (_cursor < _end) {
            _char$59 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$59 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 81: {
          let _char$60 = -1;
          if (_cursor < _end) {
            _char$60 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$60 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 82: {
          let _char$61 = -1;
          if (_cursor < _end) {
            _char$61 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$61 >= 128 && _char$61 <= 191) {
            _tmp$2 = 86;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 83: {
          let _char$62 = -1;
          if (_cursor < _end) {
            _char$62 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$62 >= 128 && _char$62 <= 190) {
            _tmp$2 = 84;
          } else {
            if (_char$62 === 191) {
              _tmp$2 = 85;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 84: {
          let _char$63 = -1;
          if (_cursor < _end) {
            _char$63 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$63 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 85: {
          let _char$64 = -1;
          if (_cursor < _end) {
            _char$64 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$64 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 86: {
          let _char$65 = -1;
          if (_cursor < _end) {
            _char$65 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$65 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 87: {
          let _char$66 = -1;
          if (_cursor < _end) {
            _char$66 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$66 === 128) {
            _tmp$2 = 90;
          } else {
            if (_char$66 >= 129 && _char$66 <= 191) {
              _tmp$2 = 91;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 88: {
          let _char$67 = -1;
          if (_cursor < _end) {
            _char$67 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$67 >= 128 && _char$67 <= 191) {
            _tmp$2 = 89;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 89: {
          let _char$68 = -1;
          if (_cursor < _end) {
            _char$68 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$68 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 90: {
          let _char$69 = -1;
          if (_cursor < _end) {
            _char$69 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$69 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 91: {
          let _char$70 = -1;
          if (_cursor < _end) {
            _char$70 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$70 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 92: {
          let _char$71 = -1;
          if (_cursor < _end) {
            _char$71 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$71 >= 128 && _char$71 <= 191) {
            _tmp$2 = 96;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 93: {
          let _char$72 = -1;
          if (_cursor < _end) {
            _char$72 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$72 >= 128 && _char$72 <= 190) {
            _tmp$2 = 94;
          } else {
            if (_char$72 === 191) {
              _tmp$2 = 95;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 94: {
          let _char$73 = -1;
          if (_cursor < _end) {
            _char$73 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$73 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 95: {
          let _char$74 = -1;
          if (_cursor < _end) {
            _char$74 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$74 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 96: {
          let _char$75 = -1;
          if (_cursor < _end) {
            _char$75 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$75 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 97: {
          let _char$76 = -1;
          if (_cursor < _end) {
            _char$76 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$76 >= 128 && _char$76 <= 191) {
            _tmp$2 = 98;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 98: {
          let _char$77 = -1;
          if (_cursor < _end) {
            _char$77 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$77 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 99: {
          let _char$78 = -1;
          if (_cursor < _end) {
            _char$78 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$78 === 128) {
            _tmp$2 = 102;
          } else {
            if (_char$78 >= 129 && _char$78 <= 191) {
              _tmp$2 = 103;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 100: {
          let _char$79 = -1;
          if (_cursor < _end) {
            _char$79 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$79 >= 128 && _char$79 <= 191) {
            _tmp$2 = 101;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 101: {
          let _char$80 = -1;
          if (_cursor < _end) {
            _char$80 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$80 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 102: {
          let _char$81 = -1;
          if (_cursor < _end) {
            _char$81 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$81 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 103: {
          let _char$82 = -1;
          if (_cursor < _end) {
            _char$82 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$82 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 104: {
          let _char$83 = -1;
          if (_cursor < _end) {
            _char$83 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$83 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 105: {
          let _char$84 = -1;
          if (_cursor < _end) {
            _char$84 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$84 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 106: {
          let _char$85 = -1;
          if (_cursor < _end) {
            _char$85 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$85 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 107: {
          let _char$86 = -1;
          if (_cursor < _end) {
            _char$86 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$86 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 108: {
          let _char$87 = -1;
          if (_cursor < _end) {
            _char$87 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$87 === 39) {
            _tmp$2 = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 109: {
          let _char$88 = -1;
          if (_cursor < _end) {
            _char$88 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$88 === 39) {
            _tmp$2 = 136;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 110: {
          let _char$89 = -1;
          if (_cursor < _end) {
            _char$89 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$89 === 39) {
            _tmp$2 = 135;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 111: {
          let _char$90 = -1;
          if (_cursor < _end) {
            _char$90 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$90 === 39) {
            _tmp$2 = 134;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 112: {
          let _char$91 = -1;
          if (_cursor < _end) {
            _char$91 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$91 === 39) {
            _tmp$2 = 133;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 113: {
          let _char$92 = -1;
          if (_cursor < _end) {
            _char$92 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$92 === 39) {
            _tmp$2 = 132;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 114: {
          let _char$93 = -1;
          if (_cursor < _end) {
            _char$93 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$93 === 39) {
            _tmp$2 = 131;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 115: {
          let _char$94 = -1;
          if (_cursor < _end) {
            _char$94 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$94 >= 48 && _char$94 <= 57) {
            _tmp$2 = 122;
          } else {
            if (_char$94 >= 65 && _char$94 <= 70) {
              _tmp$2 = 122;
            } else {
              if (_char$94 >= 97 && _char$94 <= 102) {
                _tmp$2 = 122;
              } else {
                if (_char$94 === 123) {
                  _tmp$2 = 123;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 116: {
          let _char$95 = -1;
          if (_cursor < _end) {
            _char$95 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$95 === 39) {
            _tmp$2 = 121;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 117: {
          let _char$96 = -1;
          if (_cursor < _end) {
            _char$96 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$96 >= 48 && _char$96 <= 57) {
            _tmp$2 = 118;
          } else {
            if (_char$96 >= 65 && _char$96 <= 70) {
              _tmp$2 = 118;
            } else {
              if (_char$96 >= 97 && _char$96 <= 102) {
                _tmp$2 = 118;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 118: {
          let _char$97 = -1;
          if (_cursor < _end) {
            _char$97 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$97 >= 48 && _char$97 <= 57) {
            _tmp$2 = 119;
          } else {
            if (_char$97 >= 65 && _char$97 <= 70) {
              _tmp$2 = 119;
            } else {
              if (_char$97 >= 97 && _char$97 <= 102) {
                _tmp$2 = 119;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 119: {
          let _char$98 = -1;
          if (_cursor < _end) {
            _char$98 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$98 === 39) {
            _tmp$2 = 120;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 120: {
          _match_pattern = 30;
          _match_end = _cursor;
          _capture_0_start = _match_end + -3 | 0;
          _capture_0_end = _match_end + -1 | 0;
          break _L$2;
        }
        case 121: {
          _match_pattern = 25;
          _match_end = _cursor;
          break _L$2;
        }
        case 122: {
          let _char$99 = -1;
          if (_cursor < _end) {
            _char$99 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$99 >= 48 && _char$99 <= 57) {
            _tmp$2 = 127;
          } else {
            if (_char$99 >= 65 && _char$99 <= 70) {
              _tmp$2 = 127;
            } else {
              if (_char$99 >= 97 && _char$99 <= 102) {
                _tmp$2 = 127;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 123: {
          let _char$100 = -1;
          if (_cursor < _end) {
            _char$100 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$100 >= 48 && _char$100 <= 57) {
            _tmp$2 = 124;
          } else {
            if (_char$100 >= 65 && _char$100 <= 70) {
              _tmp$2 = 124;
            } else {
              if (_char$100 >= 97 && _char$100 <= 102) {
                _tmp$2 = 124;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 124: {
          let _char$101 = -1;
          if (_cursor < _end) {
            _char$101 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$101 >= 48 && _char$101 <= 57) {
            _tmp$2 = 124;
          } else {
            if (_char$101 >= 65 && _char$101 <= 70) {
              _tmp$2 = 124;
            } else {
              if (_char$101 >= 97 && _char$101 <= 102) {
                _tmp$2 = 124;
              } else {
                if (_char$101 === 125) {
                  _tmp$2 = 125;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 125: {
          let _char$102 = -1;
          if (_cursor < _end) {
            _char$102 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$102 === 39) {
            _tmp$2 = 126;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 126: {
          _match_pattern = 32;
          _match_end = _cursor;
          _capture_0_start = _match_start + 4 | 0;
          _capture_0_end = _match_end + -2 | 0;
          break _L$2;
        }
        case 127: {
          let _char$103 = -1;
          if (_cursor < _end) {
            _char$103 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$103 >= 48 && _char$103 <= 57) {
            _tmp$2 = 128;
          } else {
            if (_char$103 >= 65 && _char$103 <= 70) {
              _tmp$2 = 128;
            } else {
              if (_char$103 >= 97 && _char$103 <= 102) {
                _tmp$2 = 128;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 128: {
          let _char$104 = -1;
          if (_cursor < _end) {
            _char$104 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$104 >= 48 && _char$104 <= 57) {
            _tmp$2 = 129;
          } else {
            if (_char$104 >= 65 && _char$104 <= 70) {
              _tmp$2 = 129;
            } else {
              if (_char$104 >= 97 && _char$104 <= 102) {
                _tmp$2 = 129;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 129: {
          let _char$105 = -1;
          if (_cursor < _end) {
            _char$105 = _data[_cursor];
            _cursor = _cursor + 1 | 0;
          }
          if (_char$105 === 39) {
            _tmp$2 = 130;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 130: {
          _match_pattern = 31;
          _match_end = _cursor;
          _capture_0_start = _match_end + -5 | 0;
          _capture_0_end = _match_end + -1 | 0;
          break _L$2;
        }
        case 131: {
          _match_pattern = 24;
          _match_end = _cursor;
          break _L$2;
        }
        case 132: {
          _match_pattern = 26;
          _match_end = _cursor;
          break _L$2;
        }
        case 133: {
          _match_pattern = 27;
          _match_end = _cursor;
          break _L$2;
        }
        case 134: {
          _match_pattern = 23;
          _match_end = _cursor;
          break _L$2;
        }
        case 135: {
          _match_pattern = 28;
          _match_end = _cursor;
          break _L$2;
        }
        case 136: {
          _match_pattern = 29;
          _match_end = _cursor;
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    switch (_match_pattern) {
      case 0: {
        const offset = moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2);
        return { _0: curr$2, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOI, _2: offset, _3: offset };
      }
      case 1: {
        const next = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        _tmp = next;
        continue _L;
      }
      case 2: {
        const next$2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        _tmp = next$2;
        continue _L;
      }
      case 3: {
        const t1 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const t2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_1_start, _capture_1_end);
        const next$3 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$3, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE({ _0: moonbitlang$ulex$lib$util$utf8$$decode_utf8(t1), _1: `${moonbitlang$ulex$lib$util$utf8$$decode_utf8(t1)}${moonbitlang$ulex$lib$util$utf8$$decode_utf8(t2)}` }), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$3) };
      }
      case 4: {
        const next$4 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$4, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PARSE_LBRACE, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$4) };
      }
      case 5: {
        const next$5 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$5, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$FAT_ARROW, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$5) };
      }
      case 6: {
        const next$6 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$6, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$UNDERSCORE, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$6) };
      }
      case 7: {
        const next$7 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        const buffer = moonbitlang$core$builtin$$StringBuilder$new(0);
        const next2 = moonbitlang$ulex$lib$parser$$code_rbrace_new(next$7, buffer);
        return { _0: next2, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE(buffer.val), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next2) };
      }
      case 8: {
        const next$8 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$8, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACE, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$8) };
      }
      case 9: {
        const next$9 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$9, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LPAREN, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$9) };
      }
      case 10: {
        const next$10 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$10, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RPAREN, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$10) };
      }
      case 11: {
        const next$11 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$11, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACKET, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$11) };
      }
      case 12: {
        const next$12 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$12, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACKET, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$12) };
      }
      case 13: {
        const next$13 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$13, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EQ, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$13) };
      }
      case 14: {
        const next$14 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$14, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$SEMICOLON, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$14) };
      }
      case 15: {
        const next$15 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$15, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BAR, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$15) };
      }
      case 16: {
        const next$16 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$16, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STAR, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$16) };
      }
      case 17: {
        const next$17 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$17, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PLUS, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$17) };
      }
      case 18: {
        const next$18 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$18, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$QUESTION, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$18) };
      }
      case 19: {
        const next$19 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$19, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$MINUS, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$19) };
      }
      case 20: {
        const next$20 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$20, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CARET, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$20) };
      }
      case 21: {
        const next$21 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$21, _1: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BACKSLASH, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$21) };
      }
      case 22: {
        let t;
        switch (_capture_0_end - _capture_0_start | 0) {
          case 1: {
            t = _data[_capture_0_start];
            break;
          }
          case 2: {
            t = (_data[_capture_0_start] & 31) << 6 | _data[_capture_0_start + 1 | 0] & 63;
            break;
          }
          case 3: {
            t = (_data[_capture_0_start] & 15) << 12 | (_data[_capture_0_start + 1 | 0] & 63) << 6 | _data[_capture_0_start + 2 | 0] & 63;
            break;
          }
          case 4: {
            t = (_data[_capture_0_start] & 7) << 18 | (_data[_capture_0_start + 1 | 0] & 63) << 12 | ((_data[_capture_0_start + 2 | 0] & 63) << 6 | _data[_capture_0_start + 3 | 0] & 63);
            break;
          }
          default: {
            t = $panic();
          }
        }
        const next$22 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$22, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(t), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$22) };
      }
      case 23: {
        const next$23 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$23, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(8), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$23) };
      }
      case 24: {
        const next$24 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$24, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(9), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$24) };
      }
      case 25: {
        const next$25 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$25, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(11), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$25) };
      }
      case 26: {
        const next$26 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$26, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(13), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$26) };
      }
      case 27: {
        const next$27 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$27, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(10), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$27) };
      }
      case 28: {
        const next$28 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$28, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(92), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$28) };
      }
      case 29: {
        const next$29 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        return { _0: next$29, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(39), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$29) };
      }
      case 30: {
        const t$2 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$30 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$3;
        let _try_err;
        _L$3: {
          _L$4: {
            const _bind = moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$2);
            const _bind$2 = moonbitlang$core$strconv$$parse_int({ str: _bind, start: 0, end: _bind.length }, 16);
            let _tmp$4;
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _tmp$4 = _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$5 = _err._0;
              _try_err = _tmp$5;
              break _L$4;
            }
            _tmp$3 = new Result$Ok$10$(_tmp$4);
            break _L$3;
          }
          _tmp$3 = new Result$Err$10$(_try_err);
        }
        const code = moonbitlang$core$result$$Result$unwrap$67$(_tmp$3);
        return { _0: next$30, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(code), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$30) };
      }
      case 31: {
        const t$3 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$31 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$4;
        let _try_err$2;
        _L$4: {
          _L$5: {
            const _bind = moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$3);
            const _bind$2 = moonbitlang$core$strconv$$parse_int({ str: _bind, start: 0, end: _bind.length }, 16);
            let _tmp$5;
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _tmp$5 = _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$6 = _err._0;
              _try_err$2 = _tmp$6;
              break _L$5;
            }
            _tmp$4 = new Result$Ok$10$(_tmp$5);
            break _L$4;
          }
          _tmp$4 = new Result$Err$10$(_try_err$2);
        }
        const code$2 = moonbitlang$core$result$$Result$unwrap$67$(_tmp$4);
        return { _0: next$31, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(code$2), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$31) };
      }
      case 32: {
        const t$4 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$32 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$5;
        let _try_err$3;
        _L$5: {
          _L$6: {
            const _bind = moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$4);
            const _bind$2 = moonbitlang$core$strconv$$parse_int({ str: _bind, start: 0, end: _bind.length }, 16);
            let _tmp$6;
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _tmp$6 = _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$7 = _err._0;
              _try_err$3 = _tmp$7;
              break _L$6;
            }
            _tmp$5 = new Result$Ok$10$(_tmp$6);
            break _L$5;
          }
          _tmp$5 = new Result$Err$10$(_try_err$3);
        }
        const code$3 = moonbitlang$core$result$$Result$unwrap$67$(_tmp$5);
        return { _0: next$32, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(code$3), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$32) };
      }
      case 33: {
        const next$33 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        const buffer$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
        const next2$2 = moonbitlang$ulex$lib$parser$$string_inner_rquote_new(next$33, buffer$2);
        return { _0: next2$2, _1: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STRING(buffer$2.val), _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next2$2) };
      }
      case 34: {
        const t$5 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _capture_0_start, _capture_0_end);
        const next$34 = moonbitlang$core$bytes$$Bytes$op_as_view(_data, _match_end, undefined);
        let _tmp$6;
        _L$6: {
          _L$7: {
            if (t$5.len === 3) {
              const _x = t$5.bytes[t$5.start];
              if (_x === 101) {
                const _x$2 = t$5.bytes[t$5.start + 1 | 0];
                if (_x$2 === 111) {
                  const _x$3 = t$5.bytes[t$5.start + 2 | 0];
                  if (_x$3 === 102) {
                    _tmp$6 = $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOF;
                  } else {
                    break _L$7;
                  }
                } else {
                  break _L$7;
                }
              } else {
                break _L$7;
              }
            } else {
              if (t$5.len === 5) {
                const _x = t$5.bytes[t$5.start];
                if (_x === 114) {
                  const _x$2 = t$5.bytes[t$5.start + 1 | 0];
                  if (_x$2 === 101) {
                    const _x$3 = t$5.bytes[t$5.start + 2 | 0];
                    if (_x$3 === 103) {
                      const _x$4 = t$5.bytes[t$5.start + 3 | 0];
                      if (_x$4 === 101) {
                        const _x$5 = t$5.bytes[t$5.start + 4 | 0];
                        if (_x$5 === 120) {
                          _tmp$6 = $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$REGEX;
                        } else {
                          break _L$7;
                        }
                      } else {
                        break _L$7;
                      }
                    } else {
                      break _L$7;
                    }
                  } else {
                    break _L$7;
                  }
                } else {
                  break _L$7;
                }
              } else {
                if (t$5.len === 2) {
                  const _x = t$5.bytes[t$5.start];
                  if (_x === 97) {
                    const _x$2 = t$5.bytes[t$5.start + 1 | 0];
                    if (_x$2 === 115) {
                      _tmp$6 = $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$AS;
                    } else {
                      break _L$7;
                    }
                  } else {
                    break _L$7;
                  }
                } else {
                  break _L$7;
                }
              }
            }
            break _L$6;
          }
          _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LC_IDENT(moonbitlang$ulex$lib$util$utf8$$decode_utf8(t$5));
        }
        return { _0: next$34, _1: _tmp$6, _2: moonbitlang$ulex$lib$parser$$calc_offset(base, curr$2), _3: moonbitlang$ulex$lib$parser$$calc_offset(base, next$34) };
      }
      case 35: {
        return $panic();
      }
      default: {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$parser$$parse_lex_from_string(input) {
  const bytes = moonbitlang$x$encoding$$encode(0, input);
  const base = moonbitlang$core$bytes$$Bytes$op_as_view(bytes, 0, bytes.length);
  const curr = { val: base };
  const _bind = moonbitlang$ulex$lib$parser$$lex_eoi(() => {
    const _bind$2 = moonbitlang$ulex$lib$parser$$token_new(curr.val, base);
    const _next = _bind$2._0;
    const _tok = _bind$2._1;
    const _spos = _bind$2._2;
    const _epos = _bind$2._3;
    curr.val = _next;
    return { _0: _tok, _1: _spos, _2: _epos };
  }, 0);
  let _func;
  if (_bind.$tag === 1) {
    const _ok = _bind;
    _func = _ok._0;
  } else {
    return _bind;
  }
  return new Result$Ok$34$(_func({ named_regexes: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$11$ }));
}
function moonbitlang$core$builtin$$Hash$hash_combine$3$(_x_70, _x_71) {
  moonbitlang$core$builtin$$Hash$hash_combine$8$(_x_70, _x_71);
}
function moonbitlang$core$builtin$$Eq$op_equal$54$(_x_60, _x_61) {
  return moonbitlang$core$builtin$$Eq$op_equal$181$(_x_60, _x_61);
}
function moonbitlang$core$builtin$$Compare$compare$54$(_x_56, _x_57) {
  return moonbitlang$core$builtin$$Compare$compare$181$(_x_56, _x_57);
}
function moonbitlang$core$builtin$$Hash$hash_combine$54$(_x_52, _x_53) {
  moonbitlang$core$builtin$$Hash$hash_combine$181$(_x_52, _x_53);
}
function moonbitlang$ulex$lib$util$eof_char_set$$range(min, max) {
  return moonbitlang$ulex$lib$util$diet$$interval$3$(min, max);
}
function moonbitlang$ulex$lib$util$eof_char_set$$from_char_set(cset) {
  const result = { val: moonbitlang$ulex$lib$util$eof_char_set$$empty };
  const _bind = moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(cset);
  _bind((r) => {
    result.val = moonbitlang$core$builtin$$Add$op_add$54$(result.val, moonbitlang$ulex$lib$util$eof_char_set$$range(r._0, r._1));
    return 1;
  });
  return result.val;
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$is_empty$3$(self);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$contains2(self, x) {
  return moonbitlang$ulex$lib$util$diet$$Tree$contains$3$(self, x);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(self, other) {
  return moonbitlang$ulex$lib$util$diet$$union$3$(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$intersection(self, other) {
  return moonbitlang$ulex$lib$util$diet$$intersection$3$(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$difference(self, other) {
  return moonbitlang$ulex$lib$util$diet$$difference$3$(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$difference(self, other));
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$unsafe_choose(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$unsafe_choose$3$(self);
}
function moonbitlang$core$builtin$$Add$op_add$54$(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$54$(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$difference(self, other);
}
function moonbitlang$core$builtin$$BitAnd$land$54$(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$intersection(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$iter_ranges(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(self);
}
function moonbitlang$ulex$lib$util$bit_array$$BitArray$unsafe_set(self, index, value) {
  const word_index = index / 32 | 0;
  const bit_index = index % 32 | 0;
  $bound_check(self, word_index);
  const word = self[word_index];
  const new_word = value !== 0 ? word | 1 << bit_index : word & ~(1 << bit_index);
  $bound_check(self, word_index);
  self[word_index] = new_word;
}
function moonbitlang$ulex$lib$util$bit_array$$BitArray$iter(self) {
  const _p = (yield_) => {
    const _end4 = self.length;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < _end4) {
        _L: {
          $bound_check(self, i);
          let word = self[i];
          if (word === 0) {
            break _L;
          }
          const base = Math.imul(i, 32) | 0;
          while (true) {
            if (word !== 0) {
              const bit_pos = $i32_ctz(word);
              const _bind = yield_(base + bit_pos | 0);
              if (_bind === 0) {
                return 0;
              }
              word = word & (word - 1 | 0);
              continue;
            } else {
              break;
            }
          }
          break _L;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  };
  return _p;
}
function moonbitlang$ulex$lib$util$immut_map$$InorderIterator$move_left$187$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _self = self;
      moonbitlang$core$array$$Array$push$140$(_self, _Node);
      _tmp = _Node._2;
      continue;
    }
  }
}
function moonbitlang$ulex$lib$util$immut_map$$InorderIterator$new$187$(root) {
  const it = [];
  moonbitlang$ulex$lib$util$immut_map$$InorderIterator$move_left$187$(it, root);
  return it;
}
function moonbitlang$ulex$lib$util$immut_map$$InorderIterator$next$187$(self) {
  const _s = self;
  const _bind = moonbitlang$core$array$$Array$pop$140$(_s);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      moonbitlang$ulex$lib$util$immut_map$$InorderIterator$move_left$187$(self, _Node._3);
      return { _0: _Node._0, _1: _Node._1 };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$util$immut_map$$random_priority() {
  moonbitlang$ulex$lib$util$immut_map$$rand_state.val = (Math.imul(moonbitlang$ulex$lib$util$immut_map$$rand_state.val, 1103515245) | 0) + 12345 & 2147483647;
  return moonbitlang$ulex$lib$util$immut_map$$rand_state.val;
}
function moonbitlang$ulex$lib$util$immut_map$$T$add$187$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(key, value, $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Empty$35$, $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Empty$35$, moonbitlang$ulex$lib$util$immut_map$$random_priority());
  } else {
    const _Node = self;
    if (moonbitlang$core$builtin$$op_lt$109$(key, _Node._0)) {
      const left = moonbitlang$ulex$lib$util$immut_map$$T$add$187$(_Node._2, key, value);
      if (left.$tag === 1) {
        const _Node$2 = left;
        return _Node$2._4 < _Node._4 ? new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(key, value, _Node$2._2, new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(_Node._0, _Node._1, _Node$2._3, _Node._3, _Node._4), _Node$2._4) : new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(_Node._0, _Node._1, _Node$2, _Node._3, _Node._4);
      } else {
        return $panic();
      }
    } else {
      if (moonbitlang$core$builtin$$op_gt$109$(key, _Node._0)) {
        const right = moonbitlang$ulex$lib$util$immut_map$$T$add$187$(_Node._3, key, value);
        if (right.$tag === 1) {
          const _Node$2 = right;
          return _Node$2._4 < _Node._4 ? new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(key, value, new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(_Node._0, _Node._1, _Node._2, _Node$2._2, _Node._4), _Node$2._3, _Node$2._4) : new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(_Node._0, _Node._1, _Node._2, _Node$2, _Node._4);
        } else {
          return $panic();
        }
      } else {
        return new $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Node$35$(_Node._0, value, _Node._2, _Node._3, _Node._4);
      }
    }
  }
}
function moonbitlang$ulex$lib$util$immut_map$$T$get$187$(self, key) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return undefined;
    } else {
      const _Node = self$2;
      if (moonbitlang$core$builtin$$op_lt$109$(key, _Node._0)) {
        _tmp = _Node._2;
        continue;
      } else {
        if (moonbitlang$core$builtin$$op_gt$109$(key, _Node._0)) {
          _tmp = _Node._3;
          continue;
        } else {
          return _Node._1;
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$immut_map$$iter$46$go$47$6831(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _bind = moonbitlang$ulex$lib$util$immut_map$$iter$46$go$47$6831(yield_, _Node._2);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _Node._0, _1: _Node._1 });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _Node._3;
          continue;
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(self) {
  const _p = (yield_) => moonbitlang$ulex$lib$util$immut_map$$iter$46$go$47$6831(yield_, self);
  return _p;
}
function moonbitlang$ulex$lib$util$immut_map$$from_iter$187$(iter) {
  const map = { val: $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Empty$35$ };
  iter((it) => {
    const _key = it._0;
    const _value = it._1;
    map.val = moonbitlang$ulex$lib$util$immut_map$$T$add$187$(map.val, _key, _value);
    return 1;
  });
  return map.val;
}
function moonbitlang$core$builtin$$Eq$op_equal$124$(self, other) {
  const iter = moonbitlang$ulex$lib$util$immut_map$$InorderIterator$new$187$(self);
  const iter1 = moonbitlang$ulex$lib$util$immut_map$$InorderIterator$new$187$(other);
  let _tmp = moonbitlang$ulex$lib$util$immut_map$$InorderIterator$next$187$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$immut_map$$InorderIterator$next$187$(iter1);
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return _param_1 === undefined;
    } else {
      const _Some = _param_0;
      const _a = _Some;
      if (_param_1 === undefined) {
        return false;
      } else {
        const _Some$2 = _param_1;
        const _b = _Some$2;
        if (moonbitlang$core$builtin$$Eq$op_equal$57$(_a, _b)) {
          _tmp = moonbitlang$ulex$lib$util$immut_map$$InorderIterator$next$187$(iter);
          _tmp$2 = moonbitlang$ulex$lib$util$immut_map$$InorderIterator$next$187$(iter1);
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$124$(self, hasher) {
  const _bind = moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(self);
  _bind((e) => {
    moonbitlang$core$builtin$$Hasher$combine$109$(hasher, e._0);
    moonbitlang$core$builtin$$Hasher$combine$141$(hasher, e._1);
    return 1;
  });
}
function moonbitlang$core$builtin$$Compare$compare$149$(_x_671, _x_672) {
  if (_x_671 === 0) {
    if (_x_672 === 0) {
      return 0;
    } else {
      return -1;
    }
  } else {
    if (_x_672 === 0) {
      return 1;
    } else {
      return 0;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$141$(_x_659, _x_660) {
  return moonbitlang$core$builtin$$Eq$op_equal$85$(_x_659, _x_660);
}
function moonbitlang$core$builtin$$Hash$hash_combine$141$(_x_655, _x_656) {
  moonbitlang$core$builtin$$Hash$hash_combine$85$(_x_655, _x_656);
}
function moonbitlang$core$builtin$$Compare$compare$141$(_x_651, _x_652) {
  return moonbitlang$core$builtin$$Compare$compare$85$(_x_651, _x_652);
}
function moonbitlang$core$builtin$$Eq$op_equal$147$(_x_631, _x_632) {
  if (_x_631.$tag === 0) {
    const _Dynamic_dfa = _x_631;
    const _$42$x0_633 = _Dynamic_dfa._0;
    if (_x_632.$tag === 0) {
      const _Dynamic_dfa$2 = _x_632;
      const _$42$y0_634 = _Dynamic_dfa$2._0;
      return _$42$x0_633._0 === _$42$y0_634._0 && _$42$x0_633._1 === _$42$y0_634._1;
    } else {
      return false;
    }
  } else {
    const _Static_dfa = _x_631;
    const _$42$x0_635 = _Static_dfa._0;
    if (_x_632.$tag === 1) {
      const _Static_dfa$2 = _x_632;
      const _$42$y0_636 = _Static_dfa$2._0;
      return moonbitlang$core$builtin$$Eq$op_equal$188$(_$42$x0_635, _$42$y0_636);
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$44$(_x_615, _x_616) {
  return moonbitlang$core$builtin$$Eq$op_equal$148$(_x_615, _x_616);
}
function moonbitlang$core$builtin$$Compare$compare$44$(_x_611, _x_612) {
  return moonbitlang$core$builtin$$Compare$compare$148$(_x_611, _x_612);
}
function moonbitlang$core$builtin$$Eq$op_equal$27$(_x_585, _x_586) {
  if (_x_585.$tag === 0) {
    const _Set = _x_585;
    const _$42$x0_587 = _Set._0;
    if (_x_586.$tag === 0) {
      const _Set$2 = _x_586;
      const _$42$y0_588 = _Set$2._0;
      return _$42$x0_587._0 === _$42$y0_588._0 && _$42$x0_587._1 === _$42$y0_588._1;
    } else {
      return false;
    }
  } else {
    const _Copy = _x_585;
    const _$42$x0_589 = _Copy._0;
    const _$42$x1_590 = _Copy._1;
    if (_x_586.$tag === 1) {
      const _Copy$2 = _x_586;
      const _$42$y0_591 = _Copy$2._0;
      const _$42$y1_592 = _Copy$2._1;
      return _$42$x0_589._0 === _$42$y0_591._0 && _$42$x0_589._1 === _$42$y0_591._1 && (_$42$x1_590._0 === _$42$y1_592._0 && _$42$x1_590._1 === _$42$y1_592._1);
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$27$(_x_567, _x_568) {
  if (_x_567.$tag === 0) {
    const _Set = _x_567;
    const _$42$x0_569 = _Set._0;
    if (_x_568.$tag === 0) {
      const _Set$2 = _x_568;
      const _$42$y0_570 = _Set$2._0;
      const _p = $compare_int(_$42$x0_569._0, _$42$y0_570._0);
      return _p === 0 ? $compare_int(_$42$x0_569._1, _$42$y0_570._1) : _p;
    } else {
      return -1;
    }
  } else {
    const _Copy = _x_567;
    const _$42$x0_571 = _Copy._0;
    const _$42$x1_572 = _Copy._1;
    if (_x_568.$tag === 0) {
      return 1;
    } else {
      const _Copy$2 = _x_568;
      const _$42$y0_573 = _Copy$2._0;
      const _$42$y1_574 = _Copy$2._1;
      const _p = $compare_int(_$42$x0_571._0, _$42$y0_573._0);
      const _bind = _p === 0 ? $compare_int(_$42$x0_571._1, _$42$y0_573._1) : _p;
      if (_bind === 0) {
        const _p$2 = $compare_int(_$42$x1_572._0, _$42$y1_574._0);
        return _p$2 === 0 ? $compare_int(_$42$x1_572._1, _$42$y1_574._1) : _p$2;
      } else {
        return _bind;
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$188$(_x_511, _x_512) {
  if (_x_511.$tag === 0) {
    const _RelativeToStart = _x_511;
    const _$42$x0_513 = _RelativeToStart._0;
    if (_x_512.$tag === 0) {
      const _RelativeToStart$2 = _x_512;
      const _$42$y0_514 = _RelativeToStart$2._0;
      return _$42$x0_513 === _$42$y0_514;
    } else {
      return false;
    }
  } else {
    const _RelativeToEnd = _x_511;
    const _$42$x0_515 = _RelativeToEnd._0;
    if (_x_512.$tag === 1) {
      const _RelativeToEnd$2 = _x_512;
      const _$42$y0_516 = _RelativeToEnd$2._0;
      return _$42$x0_515 === _$42$y0_516;
    } else {
      return false;
    }
  }
}
function moonbitlang$ulex$lib$automaton$$get_regex_static_known_tag_positions(re) {
  let map = $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$;
  const queue = [{ _0: re, _1: 0 }];
  while (true) {
    const _bind = moonbitlang$core$array$$Array$pop$165$(queue);
    if (_bind === undefined) {
      break;
    } else {
      const _Some = _bind;
      const _x = _Some;
      const _re = _x._0;
      const _offset = _x._1;
      const _bind$2 = _re.desc;
      switch (_bind$2.$tag) {
        case 3: {
          break;
        }
        case 0: {
          break;
        }
        case 1: {
          break;
        }
        case 6: {
          const _Capture = _bind$2;
          const _re$2 = _Capture._0;
          const _name = _Capture._1;
          moonbitlang$core$array$$Array$push$165$(queue, { _0: _re$2, _1: _offset });
          map = moonbitlang$core$immut$sorted_map$$T$add$78$(map, { _0: _name, _1: 1 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd(_offset));
          const _bind$3 = _re$2.len;
          if (_bind$3 === undefined) {
          } else {
            const _Some$2 = _bind$3;
            const _len = _Some$2;
            map = moonbitlang$core$immut$sorted_map$$T$add$78$(map, { _0: _name, _1: 0 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd(_offset - _len | 0));
          }
          break;
        }
        case 5: {
          const _Concat = _bind$2;
          const _re1 = _Concat._0;
          const _re2 = _Concat._1;
          moonbitlang$core$array$$Array$push$165$(queue, { _0: _re2, _1: _offset });
          const _bind$4 = _re2.len;
          if (_bind$4 === undefined) {
          } else {
            const _Some$2 = _bind$4;
            const _len = _Some$2;
            moonbitlang$core$array$$Array$push$165$(queue, { _0: _re1, _1: _offset - _len | 0 });
          }
          break;
        }
        case 4: {
          const _Alter = _bind$2;
          const _re1$2 = _Alter._0;
          const _re2$2 = _Alter._1;
          moonbitlang$core$array$$Array$push$165$(queue, { _0: _re1$2, _1: _offset });
          moonbitlang$core$array$$Array$push$165$(queue, { _0: _re2$2, _1: _offset });
          break;
        }
      }
      continue;
    }
  }
  const queue$2 = [{ _0: re, _1: 0 }];
  while (true) {
    const _bind = moonbitlang$core$array$$Array$pop$165$(queue$2);
    if (_bind === undefined) {
      break;
    } else {
      const _Some = _bind;
      const _x = _Some;
      const _re = _x._0;
      const _offset = _x._1;
      const _bind$2 = _re.desc;
      switch (_bind$2.$tag) {
        case 3: {
          break;
        }
        case 0: {
          break;
        }
        case 1: {
          break;
        }
        case 6: {
          const _Capture = _bind$2;
          const _re$2 = _Capture._0;
          const _name = _Capture._1;
          moonbitlang$core$array$$Array$push$165$(queue$2, { _0: _re$2, _1: _offset });
          map = moonbitlang$core$immut$sorted_map$$T$add$78$(map, { _0: _name, _1: 0 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart(_offset));
          const _bind$3 = _re$2.len;
          if (_bind$3 === undefined) {
          } else {
            const _Some$2 = _bind$3;
            const _len = _Some$2;
            map = moonbitlang$core$immut$sorted_map$$T$add$78$(map, { _0: _name, _1: 1 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart(_offset + _len | 0));
          }
          break;
        }
        case 5: {
          const _Concat = _bind$2;
          const _re1 = _Concat._0;
          const _re2 = _Concat._1;
          moonbitlang$core$array$$Array$push$165$(queue$2, { _0: _re1, _1: _offset });
          const _bind$4 = _re1.len;
          if (_bind$4 === undefined) {
          } else {
            const _Some$2 = _bind$4;
            const _len = _Some$2;
            moonbitlang$core$array$$Array$push$165$(queue$2, { _0: _re2, _1: _offset + _len | 0 });
          }
          break;
        }
        case 4: {
          const _Alter = _bind$2;
          const _re1$2 = _Alter._0;
          const _re2$2 = _Alter._1;
          moonbitlang$core$array$$Array$push$165$(queue$2, { _0: _re1$2, _1: _offset });
          moonbitlang$core$array$$Array$push$165$(queue$2, { _0: _re2$2, _1: _offset });
          break;
        }
      }
      continue;
    }
  }
  return map;
}
function moonbitlang$ulex$lib$automaton$$get_regex_captures(re, lowered_re) {
  const vars = moonbitlang$ulex$lib$regex$$get_capture_vars(re);
  const static_tag_positions = moonbitlang$ulex$lib$automaton$$get_regex_static_known_tag_positions(lowered_re);
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$77$(vars);
  return moonbitlang$core$builtin$$Iter$to_array$166$((_p) => _bind((_p$2) => {
    const _name = _p$2._0;
    const _re_class = _p$2._1;
    let var_type;
    if (_re_class === 0) {
      var_type = 0;
    } else {
      var_type = 1;
    }
    const start_pos = moonbitlang$core$immut$sorted_map$$T$get$78$(static_tag_positions, { _0: _name, _1: 0 });
    const end_pos = moonbitlang$core$immut$sorted_map$$T$get$78$(static_tag_positions, { _0: _name, _1: 1 });
    return _p({ _0: _name, _1: { _0: var_type, _1: { _0: start_pos, _1: end_pos } } });
  }));
}
function moonbitlang$ulex$lib$automaton$$NFAEpsClosure$new(nfa) {
  const _p = nfa.node_count;
  const _p$2 = (_p + 31 | 0) / 32 | 0;
  const _tmp = $make_array_len_and_init(_p$2, 0);
  return { nfa: nfa, eps: _tmp, tags: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$, nodes: [] };
}
function moonbitlang$ulex$lib$automaton$$NFAEpsClosure$add(self, node, tags) {
  const _p = self.eps;
  const _p$2 = node.num;
  const _tmp = _p$2 / 32 | 0;
  $bound_check(_p, _tmp);
  if ((_p[_tmp] >> (_p$2 % 32 | 0) & 1) !== 0) {
    const _p$3 = moonbitlang$core$immut$sorted_map$$T$get$76$(self.tags, node);
    const _p$4 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
    let prev_tags;
    if (_p$3 === undefined) {
      prev_tags = _p$4;
    } else {
      const _p$5 = _p$3;
      prev_tags = _p$5;
    }
    const changed = !moonbitlang$core$immut$sorted_set$$T$subset$8$(tags, prev_tags);
    if (changed) {
      self.tags = moonbitlang$core$immut$sorted_map$$T$add$76$(self.tags, node, moonbitlang$core$immut$sorted_set$$T$union$8$(prev_tags, tags));
    }
    return changed;
  } else {
    if (!moonbitlang$core$immut$sorted_set$$T$is_empty$8$(tags)) {
      self.tags = moonbitlang$core$immut$sorted_map$$T$add$76$(self.tags, node, tags);
    }
    moonbitlang$ulex$lib$util$bit_array$$BitArray$unsafe_set(self.eps, node.num, 1);
    if (self.nodes.length < 5) {
      moonbitlang$core$array$$Array$push$109$(self.nodes, node);
    }
    return true;
  }
}
function moonbitlang$ulex$lib$automaton$$NFAEpsClosure$add$46$tags$46$default() {
  return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
}
function moonbitlang$ulex$lib$automaton$$NFAEpsClosure$get(self, node) {
  const _p = self.eps;
  const _p$2 = node.num;
  const _tmp = _p$2 / 32 | 0;
  $bound_check(_p, _tmp);
  if ((_p[_tmp] >> (_p$2 % 32 | 0) & 1) === 0) {
    return undefined;
  } else {
    const _p$3 = moonbitlang$core$immut$sorted_map$$T$get$76$(self.tags, node);
    const _p$4 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
    if (_p$3 === undefined) {
      return _p$4;
    } else {
      const _p$5 = _p$3;
      return _p$5;
    }
  }
}
function moonbitlang$ulex$lib$automaton$$NFAEpsClosure$iter(self) {
  if (self.nodes.length < 5) {
    const _bind = moonbitlang$core$array$$Array$iter$109$(self.nodes);
    return (_p) => _bind((_p$2) => {
      const _p$3 = moonbitlang$core$immut$sorted_map$$T$get$76$(self.tags, _p$2);
      const _p$4 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
      let _tmp;
      if (_p$3 === undefined) {
        _tmp = _p$4;
      } else {
        const _p$5 = _p$3;
        _tmp = _p$5;
      }
      return _p({ _0: _p$2, _1: _tmp });
    });
  } else {
    const _bind = moonbitlang$ulex$lib$util$bit_array$$BitArray$iter(self.eps);
    return (_p) => _bind((_p$2) => {
      const _tmp = moonbitlang$core$array$$Array$op_get$109$(self.nfa.graph, _p$2);
      const _p$3 = moonbitlang$core$immut$sorted_map$$T$get$76$(self.tags, moonbitlang$core$array$$Array$op_get$109$(self.nfa.graph, _p$2));
      const _p$4 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
      let _tmp$2;
      if (_p$3 === undefined) {
        _tmp$2 = _p$4;
      } else {
        const _p$5 = _p$3;
        _tmp$2 = _p$5;
      }
      return _p({ _0: _tmp, _1: _tmp$2 });
    });
  }
}
function moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$385(result, n) {
  const _p = moonbitlang$ulex$lib$automaton$$NFAEpsClosure$get(result, n);
  const _p$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  if (_p === undefined) {
    return _p$2;
  } else {
    const _p$3 = _p;
    return _p$3;
  }
}
function moonbitlang$ulex$lib$automaton$$NFA$get_eps_closure(self) {
  const _p = self.graph;
  const _p$2 = new Array(_p.length);
  const _p$3 = _p.length;
  let _tmp = 0;
  while (true) {
    const _p$4 = _tmp;
    if (_p$4 < _p$3) {
      const _p$5 = _p[_p$4];
      const x = _p$5;
      const result = moonbitlang$ulex$lib$automaton$$NFAEpsClosure$new(self);
      moonbitlang$ulex$lib$automaton$$NFAEpsClosure$add(result, x, moonbitlang$ulex$lib$automaton$$NFAEpsClosure$add$46$tags$46$default());
      const queue = moonbitlang$core$queue$$from_array$109$([x]);
      while (true) {
        const _bind = moonbitlang$core$queue$$T$pop$109$(queue);
        if (_bind === undefined) {
          break;
        } else {
          const _Some = _bind;
          const _o = _Some;
          const o_tags = moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$385(result, _o);
          const _arr = _o.eps;
          const _len = _arr.length;
          let _tmp$2 = 0;
          while (true) {
            const _i = _tmp$2;
            if (_i < _len) {
              const e = _arr[_i];
              const new_u_tags = moonbitlang$core$immut$sorted_set$$T$union$8$(moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$385(result, e), o_tags);
              const changed = moonbitlang$ulex$lib$automaton$$NFAEpsClosure$add(result, e, new_u_tags);
              if (changed) {
                moonbitlang$core$queue$$T$push$109$(queue, e);
              }
              _tmp$2 = _i + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          const _arr$2 = _o.tagged_eps;
          const _len$2 = _arr$2.length;
          let _tmp$3 = 0;
          while (true) {
            const _i = _tmp$3;
            if (_i < _len$2) {
              const e = _arr$2[_i];
              const _u = e._0;
              const _tag = e._1;
              const new_u_tags = moonbitlang$core$immut$sorted_set$$T$add$8$(moonbitlang$core$immut$sorted_set$$T$union$8$(moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$385(result, _u), o_tags), _tag);
              const changed = moonbitlang$ulex$lib$automaton$$NFAEpsClosure$add(result, _u, new_u_tags);
              if (changed) {
                moonbitlang$core$queue$$T$push$109$(queue, _u);
              }
              _tmp$3 = _i + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          continue;
        }
      }
      _p$2[_p$4] = result;
      _tmp = _p$4 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return _p$2;
}
function moonbitlang$core$builtin$$Hash$hash_combine$109$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$ulex$lib$automaton$$NFA$new_nfa() {
  return { graph: [], end_nodes: moonbitlang$core$builtin$$Map$new$75$(8), pattern_captures: [], start_node: -1, node_count: 0, tag_count: 0 };
}
function moonbitlang$ulex$lib$automaton$$NFA$new_node(self) {
  const new_id = self.node_count;
  self.node_count = self.node_count + 1 | 0;
  const node = { num: new_id, eps: [], tagged_eps: [], trans: [] };
  moonbitlang$core$array$$Array$push$109$(self.graph, node);
  return (new_id + 1 | 0) === self.graph.length ? node : $panic();
}
function moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, from, s, to) {
  switch (s.$tag) {
    case 0: {
      moonbitlang$core$array$$Array$push$109$(from.eps, to);
      return;
    }
    case 1: {
      const _EpsWithTag = s;
      const _tag = _EpsWithTag._0;
      moonbitlang$core$array$$Array$push$167$(from.tagged_eps, { _0: to, _1: _tag });
      return;
    }
    default: {
      const _EChar = s;
      const _c = _EChar._0;
      moonbitlang$core$array$$Array$push$157$(from.trans, { _0: _c, _1: to });
      return;
    }
  }
}
function moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, re, start) {
  const name2pos = _env._1;
  const self = _env._0;
  let _tmp = re;
  let _tmp$2 = start;
  _L: while (true) {
    const re$2 = _tmp;
    const start$2 = _tmp$2;
    const _bind = re$2.desc;
    switch (_bind.$tag) {
      case 0: {
        const end = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, start$2, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar(moonbitlang$ulex$lib$util$eof_char_set$$eof), end);
        return end;
      }
      case 1: {
        const _Character = _bind;
        const _c = _Character._0;
        const end$2 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, start$2, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar(moonbitlang$ulex$lib$util$eof_char_set$$from_char_set(_c)), end$2);
        return end$2;
      }
      case 3: {
        return start$2;
      }
      case 2: {
        const _Repetition = _bind;
        const _re = _Repetition._0;
        const loop_start = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, start$2, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, loop_start);
        const loop_end = moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, _re, loop_start);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, loop_end, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, loop_start);
        const end$3 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, loop_end, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, end$3);
        return end$3;
      }
      case 4: {
        const _Alter = _bind;
        const _re1 = _Alter._0;
        const _re2 = _Alter._1;
        const end1 = moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, _re1, start$2);
        const end2 = moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, _re2, start$2);
        const end$4 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, end1, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, end$4);
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, end2, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, end$4);
        return end$4;
      }
      case 5: {
        const _Concat = _bind;
        const _re1$2 = _Concat._0;
        const _re2$2 = _Concat._1;
        const end1$2 = moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, _re1$2, start$2);
        _tmp = _re2$2;
        _tmp$2 = end1$2;
        continue _L;
      }
      default: {
        const _Capture = _bind;
        const _re$2 = _Capture._0;
        const _name = _Capture._1;
        const _bind$2 = name2pos(_name);
        const _begin_tag = _bind$2._0;
        const _end_tag = _bind$2._1;
        const before = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        let _tmp$3;
        if (_begin_tag.$tag === 0) {
          const _Dynamic_nfa = _begin_tag;
          const _begin_tag$2 = _Dynamic_nfa._0;
          _tmp$3 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag(_begin_tag$2);
        } else {
          _tmp$3 = $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps;
        }
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, start$2, _tmp$3, before);
        const after = moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, _re$2, before);
        const end$5 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
        let _tmp$4;
        if (_end_tag.$tag === 0) {
          const _Dynamic_nfa = _end_tag;
          const _end_tag$2 = _Dynamic_nfa._0;
          _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag(_end_tag$2);
        } else {
          _tmp$4 = $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps;
        }
        moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, after, _tmp$4, end$5);
        return end$5;
      }
    }
  }
}
function moonbitlang$ulex$lib$automaton$$NFA$register_regex(self, node, re, name2pos) {
  const _env = { _0: self, _1: name2pos };
  const accept = moonbitlang$ulex$lib$automaton$$register_regex$46$aux$124$308(_env, re, node);
  const id = self.pattern_captures.length;
  moonbitlang$core$builtin$$Map$set$75$(self.end_nodes, accept.num, id);
}
function moonbitlang$ulex$lib$automaton$$from_patterns$46$alloc_tag$124$350(nfa) {
  const tag = nfa.tag_count;
  nfa.tag_count = nfa.tag_count + 1 | 0;
  return tag;
}
function moonbitlang$ulex$lib$automaton$$NFA$from_patterns(patterns, encoding) {
  const nfa = moonbitlang$ulex$lib$automaton$$NFA$new_nfa();
  const node = moonbitlang$ulex$lib$automaton$$NFA$new_node(nfa);
  nfa.start_node = node.num;
  const _len = patterns.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const pattern = patterns[_i];
      const _re = pattern._0;
      const _rest_binder = pattern._1;
      const lowered_re = moonbitlang$ulex$lib$regex$$lower(_re, encoding);
      const _p = moonbitlang$ulex$lib$automaton$$get_regex_captures(_re, lowered_re);
      const _p$2 = new Array(_p.length);
      const _p$3 = _p.length;
      let _tmp$2 = 0;
      while (true) {
        const _p$4 = _tmp$2;
        if (_p$4 < _p$3) {
          const _p$5 = _p[_p$4];
          const it = _p$5;
          const _name = it._0;
          const _x = it._1;
          const _var_type = _x._0;
          const _x$2 = _x._1;
          const _begin = _x$2._0;
          const _end = _x$2._1;
          let begin;
          if (_begin === undefined) {
            begin = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa(moonbitlang$ulex$lib$automaton$$from_patterns$46$alloc_tag$124$350(nfa));
          } else {
            const _Some = _begin;
            const _info = _Some;
            begin = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa(_info);
          }
          let end;
          if (_end === undefined) {
            end = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa(moonbitlang$ulex$lib$automaton$$from_patterns$46$alloc_tag$124$350(nfa));
          } else {
            const _Some = _end;
            const _info = _Some;
            end = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa(_info);
          }
          _p$2[_p$4] = { _0: { _0: _name, _1: _var_type }, _1: { _0: begin, _1: end } };
          _tmp$2 = _p$4 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const capture_names = _p$2;
      const _bind = moonbitlang$core$array$$Array$iter$158$(capture_names);
      const map = moonbitlang$core$builtin$$Map$from_iter$119$((_p$4) => _bind((_p$5) => {
        const _x = _p$5._0;
        const _name = _x._0;
        const _x$2 = _p$5._1;
        const _begin_tag = _x$2._0;
        const _end_tag = _x$2._1;
        return _p$4({ _0: _name, _1: { _0: _begin_tag, _1: _end_tag } });
      }));
      moonbitlang$ulex$lib$automaton$$NFA$register_regex(nfa, node, lowered_re, (x) => {
        const _p$4 = moonbitlang$core$builtin$$Map$get$119$(map, x);
        if (_p$4 === undefined) {
          return $panic();
        } else {
          const _p$5 = _p$4;
          return _p$5;
        }
      });
      moonbitlang$core$array$$Array$push$137$(nfa.pattern_captures, { _0: capture_names, _1: _rest_binder });
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return nfa;
}
function moonbitlang$ulex$lib$automaton$$minimize_tags$46$map_capture_pos$124$285(tag_to_new_tag, pos) {
  _L: {
    if (pos.$tag === 0) {
      const _Dynamic_dfa = pos;
      const _tag_var = _Dynamic_dfa._0;
      const _bind = moonbitlang$core$builtin$$Map$get$75$(tag_to_new_tag, _tag_var._0);
      if (_bind === undefined) {
        break _L;
      } else {
        const _Some = _bind;
        const _new_tag = _Some;
        return new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa({ _0: _new_tag, _1: _tag_var._1 });
      }
    } else {
      break _L;
    }
  }
  return pos;
}
function moonbitlang$ulex$lib$automaton$$DFA$minimize_tags(self) {
  const tag_to_state_actions_map = moonbitlang$core$builtin$$Map$from_array$113$([]);
  const _bind = moonbitlang$core$builtin$$Map$iter2$118$(self.tag_actions);
  _bind((node, action) => {
    const _arr = action;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const op = _arr[_i];
        let dest;
        _L: {
          if (op.$tag === 0) {
            const _Set = op;
            const _dest = _Set._0;
            dest = _dest;
            break _L;
          } else {
            const _Copy = op;
            const _dest = _Copy._0;
            dest = _dest;
            break _L;
          }
        }
        let op2;
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          op2 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set({ _0: -1, _1: _dest._1 });
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          op2 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy({ _0: -1, _1: _dest._1 }, { _0: -1, _1: _src._1 });
        }
        const _bind$2 = moonbitlang$core$builtin$$Map$get$113$(tag_to_state_actions_map, dest._0);
        if (_bind$2 === undefined) {
          moonbitlang$core$builtin$$Map$op_set$113$(tag_to_state_actions_map, dest._0, moonbitlang$core$immut$sorted_map$$T$add$72$($64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$, node, [op2]));
        } else {
          const _Some = _bind$2;
          const _map = _Some;
          const _bind$3 = moonbitlang$core$immut$sorted_map$$T$get$72$(_map, node);
          if (_bind$3.$tag === 0) {
            moonbitlang$core$builtin$$Map$op_set$113$(tag_to_state_actions_map, dest._0, moonbitlang$core$immut$sorted_map$$T$add$72$(_map, node, [op2]));
          } else {
            const _Some$2 = _bind$3;
            const _ops = _Some$2._0;
            moonbitlang$core$array$$Array$push$27$(_ops, op2);
          }
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$113$(tag_to_state_actions_map);
  _bind$2((__, state_actions_map) => {
    const _bind$3 = moonbitlang$core$immut$sorted_map$$T$iter2$72$(state_actions_map);
    _bind$3((__$2, ops) => {
      moonbitlang$core$array$$Array$sort$27$(ops);
      return 1;
    });
    return 1;
  });
  const groups = moonbitlang$core$sorted_map$$new$86$();
  const _bind$3 = moonbitlang$core$builtin$$Map$iter2$113$(tag_to_state_actions_map);
  _bind$3((tag, state_actions_map) => {
    const _p = moonbitlang$core$sorted_map$$T$get$86$(groups, state_actions_map);
    const _p$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
    let _tmp;
    if (_p === undefined) {
      _tmp = _p$2;
    } else {
      const _p$3 = _p;
      _tmp = _p$3;
    }
    moonbitlang$core$sorted_map$$T$op_set$86$(groups, state_actions_map, moonbitlang$core$immut$sorted_set$$T$add$8$(_tmp, tag));
    return 1;
  });
  const tag_to_new_tag = moonbitlang$core$builtin$$Map$from_array$75$([]);
  const num_tags = { val: 0 };
  const _bind$4 = moonbitlang$core$sorted_map$$T$iter2$86$(groups);
  _bind$4((__, tags) => {
    const new_tag = num_tags.val;
    num_tags.val = num_tags.val + 1 | 0;
    const _bind$5 = moonbitlang$core$immut$sorted_set$$T$iter$8$(tags);
    _bind$5((tag) => {
      moonbitlang$core$builtin$$Map$op_set$75$(tag_to_new_tag, tag, new_tag);
      return 1;
    });
    return 1;
  });
  const _tmp = self.graph;
  const _tmp$2 = self.start_node;
  const _bind$5 = moonbitlang$core$builtin$$Map$iter$118$(self.tag_actions);
  const _tmp$3 = moonbitlang$core$builtin$$Map$from_iter$118$((_p) => _bind$5((_p$2) => {
    const _node_id = _p$2._0;
    const _action = _p$2._1;
    const _p$3 = new Array(_action.length);
    const _p$4 = _action.length;
    let _tmp$4 = 0;
    while (true) {
      const _p$5 = _tmp$4;
      if (_p$5 < _p$4) {
        const _p$6 = _action[_p$5];
        const op = _p$6;
        let _tmp$5;
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          const _p$7 = moonbitlang$core$builtin$$Map$get$75$(tag_to_new_tag, _dest._0);
          let _tmp$6;
          if (_p$7 === undefined) {
            _tmp$6 = $panic();
          } else {
            const _p$8 = _p$7;
            _tmp$6 = _p$8;
          }
          const _tmp$7 = _tmp$6;
          _tmp$5 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set({ _0: _tmp$7, _1: _dest._1 });
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          const _p$7 = moonbitlang$core$builtin$$Map$get$75$(tag_to_new_tag, _dest._0);
          let _tmp$6;
          if (_p$7 === undefined) {
            _tmp$6 = $panic();
          } else {
            const _p$8 = _p$7;
            _tmp$6 = _p$8;
          }
          const _tmp$7 = _tmp$6;
          const _p$8 = moonbitlang$core$builtin$$Map$get$75$(tag_to_new_tag, _src._0);
          let _tmp$8;
          if (_p$8 === undefined) {
            _tmp$8 = $panic();
          } else {
            const _p$9 = _p$8;
            _tmp$8 = _p$9;
          }
          const _tmp$9 = _tmp$8;
          _tmp$5 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy({ _0: _tmp$7, _1: _dest._1 }, { _0: _tmp$9, _1: _src._1 });
        }
        _p$3[_p$5] = _tmp$5;
        _tmp$4 = _p$5 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const ops = _p$3;
    moonbitlang$core$array$$Array$dedup$27$(ops);
    return _p({ _0: _node_id, _1: ops });
  }));
  const _bind$6 = moonbitlang$core$builtin$$Map$iter$114$(self.end_nodes);
  const _tmp$4 = moonbitlang$core$builtin$$Map$from_iter$114$((_p) => _bind$6((_p$2) => {
    const _node_id = _p$2._0;
    const _x = _p$2._1;
    const _pattern_id = _x._0;
    const _captures = _x._1;
    const _p$3 = new Array(_captures.length);
    const _p$4 = _captures.length;
    let _tmp$5 = 0;
    while (true) {
      const _p$5 = _tmp$5;
      if (_p$5 < _p$4) {
        const _p$6 = _captures[_p$5];
        const capture = _p$6;
        const _begin = capture._0;
        const _end = capture._1;
        _p$3[_p$5] = { _0: moonbitlang$ulex$lib$automaton$$minimize_tags$46$map_capture_pos$124$285(tag_to_new_tag, _begin), _1: moonbitlang$ulex$lib$automaton$$minimize_tags$46$map_capture_pos$124$285(tag_to_new_tag, _end) };
        _tmp$5 = _p$5 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return _p({ _0: _node_id, _1: { _0: _pattern_id, _1: _p$3 } });
  }));
  const _tmp$5 = self.pattern_captures;
  return { graph: _tmp, start_node: _tmp$2, tag_actions: _tmp$3, end_nodes: _tmp$4, pattern_captures: _tmp$5, node_count: self.node_count };
}
function moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$170(new_temp_char_sets, temp_char_set) {
  if (!moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(temp_char_set)) {
    new_temp_char_sets.val = moonbitlang$core$immut$sorted_set$$T$add$54$(new_temp_char_sets.val, temp_char_set);
    return;
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$automaton$$collect_symbols(dfa) {
  let char_sets = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$;
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const trans = _arr[_i];
      const _len$2 = trans.length;
      let _tmp$2 = 0;
      while (true) {
        const _i$2 = _tmp$2;
        if (_i$2 < _len$2) {
          const tran = trans[_i$2];
          const _input = tran._0;
          char_sets = moonbitlang$core$immut$sorted_set$$T$add$54$(char_sets, _input);
          _tmp$2 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const all_char_set = { val: moonbitlang$ulex$lib$util$eof_char_set$$empty };
  const temp_char_sets = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$54$(char_sets);
  _bind((char_set) => {
    const new_temp_char_sets = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ };
    moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$170(new_temp_char_sets, moonbitlang$core$builtin$$Sub$op_sub$54$(char_set, all_char_set.val));
    const _bind$2 = moonbitlang$core$immut$sorted_set$$T$iter$54$(temp_char_sets.val);
    _bind$2((temp_char_set) => {
      moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$170(new_temp_char_sets, moonbitlang$core$builtin$$BitAnd$land$54$(temp_char_set, char_set));
      moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$170(new_temp_char_sets, moonbitlang$core$builtin$$Sub$op_sub$54$(temp_char_set, char_set));
      return 1;
    });
    all_char_set.val = moonbitlang$core$builtin$$Add$op_add$54$(all_char_set.val, char_set);
    temp_char_sets.val = new_temp_char_sets.val;
    return 1;
  });
  const next_symbol_id = { val: 0 };
  return moonbitlang$core$immut$sorted_set$$T$map$60$(temp_char_sets.val, (char_set) => {
    const symbol = { id: next_symbol_id.val, char_set: char_set };
    next_symbol_id.val = next_symbol_id.val + 1 | 0;
    return symbol;
  });
}
function moonbitlang$ulex$lib$automaton$$DFA$add_edge(self, from, e, to) {
  const _arr = moonbitlang$core$array$$Array$op_get$134$(self.graph, from);
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tran = _arr[_i];
      if (moonbitlang$core$builtin$$Eq$op_equal$54$(tran._0, e) && tran._1 === to) {
        return undefined;
      }
      if (moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(e, tran._0)) {
        $panic();
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$Array$push$162$(moonbitlang$core$array$$Array$op_get$134$(self.graph, from), { _0: e, _1: to });
}
function moonbitlang$ulex$lib$automaton$$DFA$new(captures) {
  const _bind = [];
  const _bind$2 = moonbitlang$core$builtin$$Map$from_array$118$([]);
  const _bind$3 = moonbitlang$core$builtin$$Map$new$114$(8);
  return { graph: _bind, start_node: -1, tag_actions: _bind$2, end_nodes: _bind$3, pattern_captures: captures, node_count: 0 };
}
function moonbitlang$ulex$lib$automaton$$DFA$new_node(self) {
  const id = self.node_count;
  self.node_count = self.node_count + 1 | 0;
  moonbitlang$core$array$$Array$push$134$(self.graph, []);
  return id;
}
function moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$233(_env, state) {
  const state_to_partition = _env._3;
  const new_dfa = _env._2;
  const partition_to_new_state = _env._1;
  const state_to_new_state = _env._0;
  const _p = moonbitlang$core$builtin$$Map$get$115$(state_to_partition, state);
  let partition;
  if (_p === undefined) {
    partition = $panic();
  } else {
    const _p$2 = _p;
    partition = _p$2;
  }
  const _bind = moonbitlang$core$builtin$$Map$get$116$(partition_to_new_state, partition);
  if (_bind === undefined) {
    const new_state = moonbitlang$ulex$lib$automaton$$DFA$new_node(new_dfa);
    moonbitlang$core$builtin$$Map$op_set$116$(partition_to_new_state, partition, new_state);
    const _bind$2 = moonbitlang$core$immut$sorted_set$$T$iter$8$(partition);
    _bind$2((state$2) => {
      moonbitlang$core$builtin$$Map$op_set$75$(state_to_new_state, state$2, new_state);
      return 1;
    });
    return new_state;
  } else {
    const _Some = _bind;
    return _Some;
  }
}
function moonbitlang$ulex$lib$automaton$$DFA$minimize(dfa) {
  const symbols = moonbitlang$ulex$lib$automaton$$collect_symbols(dfa);
  const all_states = moonbitlang$core$immut$sorted_set$$from_iter$8$(moonbitlang$core$int$$Int$until(0, dfa.graph.length - 1 | 0, 1, true));
  const final_states = moonbitlang$core$immut$sorted_set$$from_iter$8$(moonbitlang$core$builtin$$Map$keys$114$(dfa.end_nodes));
  const partitions = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$ };
  const _end188 = dfa.pattern_captures.length;
  let _tmp = 0;
  while (true) {
    const pattern_id = _tmp;
    if (pattern_id < _end188) {
      const groups = { val: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$ };
      const _bind = moonbitlang$core$builtin$$Map$iter2$114$(dfa.end_nodes);
      _bind((end_node, end_node_info) => {
        const tag_action = moonbitlang$core$option$$Option$unwrap$44$(moonbitlang$core$builtin$$Map$get$118$(dfa.tag_actions, end_node));
        if (end_node_info._0 === pattern_id) {
          const _tmp$2 = groups.val;
          const _p = moonbitlang$core$immut$sorted_map$$T$get$73$(groups.val, tag_action);
          const _p$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
          let _tmp$3;
          if (_p === undefined) {
            _tmp$3 = _p$2;
          } else {
            const _p$3 = _p;
            _tmp$3 = _p$3;
          }
          groups.val = moonbitlang$core$immut$sorted_map$$T$add$73$(_tmp$2, tag_action, moonbitlang$core$immut$sorted_set$$T$add$8$(_tmp$3, end_node));
        }
        return 1;
      });
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter2$73$(groups.val);
      _bind$2((__, partition) => {
        partitions.val = moonbitlang$core$immut$sorted_set$$T$add$20$(partitions.val, partition);
        return 1;
      });
      _tmp = pattern_id + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const groups = { val: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$ };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$8$(moonbitlang$core$immut$sorted_set$$T$difference$8$(all_states, final_states));
  _bind((state) => {
    const tag_action = moonbitlang$core$option$$Option$unwrap$44$(moonbitlang$core$builtin$$Map$get$118$(dfa.tag_actions, state));
    const _tmp$2 = groups.val;
    const _p = moonbitlang$core$immut$sorted_map$$T$get$73$(groups.val, tag_action);
    const _p$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
    let _tmp$3;
    if (_p === undefined) {
      _tmp$3 = _p$2;
    } else {
      const _p$3 = _p;
      _tmp$3 = _p$3;
    }
    groups.val = moonbitlang$core$immut$sorted_map$$T$add$73$(_tmp$2, tag_action, moonbitlang$core$immut$sorted_set$$T$add$8$(_tmp$3, state));
    return 1;
  });
  const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter2$73$(groups.val);
  _bind$2((__, partition) => {
    partitions.val = moonbitlang$core$immut$sorted_set$$T$add$20$(partitions.val, partition);
    return 1;
  });
  const result = moonbitlang$core$sorted_map$$new$87$();
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const trans = _arr[_i];
      const _len$2 = trans.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const tran = trans[_i$2];
          const _input = tran._0;
          const _target = tran._1;
          const _bind$3 = moonbitlang$core$immut$sorted_set$$T$iter$30$(symbols);
          _bind$3((symbol) => {
            if (moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(symbol.char_set, _input)) {
              const _p = moonbitlang$core$sorted_map$$T$get$87$(result, _target);
              const _p$2 = $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$;
              let map;
              if (_p === undefined) {
                map = _p$2;
              } else {
                const _p$3 = _p;
                map = _p$3;
              }
              const _p$3 = moonbitlang$core$immut$sorted_map$$T$get$74$(map, symbol);
              const _p$4 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
              let _tmp$4;
              if (_p$3 === undefined) {
                _tmp$4 = _p$4;
              } else {
                const _p$5 = _p$3;
                _tmp$4 = _p$5;
              }
              const map$2 = moonbitlang$core$immut$sorted_map$$T$add$74$(map, symbol, moonbitlang$core$immut$sorted_set$$T$add$8$(_tmp$4, _i));
              moonbitlang$core$sorted_map$$T$op_set$87$(result, _target, map$2);
            }
            return 1;
          });
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const symbolized_invert_map = result;
  const worklist = { val: partitions.val };
  while (true) {
    if (!moonbitlang$core$immut$sorted_set$$T$is_empty$20$(worklist.val)) {
      const a = moonbitlang$core$immut$sorted_set$$T$min$20$(worklist.val);
      worklist.val = moonbitlang$core$immut$sorted_set$$T$remove_min$20$(worklist.val);
      let _foreach_result = $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$36$;
      const _bind$3 = moonbitlang$core$immut$sorted_set$$T$iter$30$(symbols);
      _bind$3((symbol) => {
        const x = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$ };
        const _bind$4 = moonbitlang$core$immut$sorted_set$$T$iter$8$(a);
        _bind$4((target) => {
          const _bind$5 = moonbitlang$core$sorted_map$$T$get$87$(symbolized_invert_map, target);
          let sources;
          if (_bind$5 === undefined) {
            sources = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
          } else {
            const _Some = _bind$5;
            const _map = _Some;
            const _p = moonbitlang$core$immut$sorted_map$$T$get$74$(_map, symbol);
            const _p$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
            if (_p === undefined) {
              sources = _p$2;
            } else {
              const _p$3 = _p;
              sources = _p$3;
            }
          }
          x.val = moonbitlang$core$builtin$$Add$op_add$56$(x.val, sources);
          return 1;
        });
        if (!moonbitlang$core$immut$sorted_set$$T$is_empty$8$(x.val)) {
          const _bind$5 = moonbitlang$core$immut$sorted_set$$T$iter$20$(partitions.val);
          _bind$5((y) => {
            const intersection = moonbitlang$core$immut$sorted_set$$T$intersection$8$(x.val, y);
            const difference = moonbitlang$core$immut$sorted_set$$T$difference$8$(y, x.val);
            if (!moonbitlang$core$immut$sorted_set$$T$is_empty$8$(intersection) && !moonbitlang$core$immut$sorted_set$$T$is_empty$8$(difference)) {
              partitions.val = moonbitlang$core$immut$sorted_set$$T$remove$20$(partitions.val, y);
              partitions.val = moonbitlang$core$immut$sorted_set$$T$add$20$(partitions.val, intersection);
              partitions.val = moonbitlang$core$immut$sorted_set$$T$add$20$(partitions.val, difference);
              if (moonbitlang$core$immut$sorted_set$$T$contains$20$(worklist.val, y)) {
                worklist.val = moonbitlang$core$immut$sorted_set$$T$remove$20$(worklist.val, y);
                worklist.val = moonbitlang$core$immut$sorted_set$$T$add$20$(worklist.val, intersection);
                worklist.val = moonbitlang$core$immut$sorted_set$$T$add$20$(worklist.val, difference);
              } else {
                if (moonbitlang$core$immut$sorted_set$$T$size$8$(intersection) <= moonbitlang$core$immut$sorted_set$$T$size$8$(difference)) {
                  worklist.val = moonbitlang$core$immut$sorted_set$$T$add$20$(worklist.val, intersection);
                } else {
                  worklist.val = moonbitlang$core$immut$sorted_set$$T$add$20$(worklist.val, difference);
                }
              }
            }
            return 1;
          });
        } else {
          return 1;
        }
        return 1;
      });
      const _tmp$3 = _foreach_result;
      switch (_tmp$3.$tag) {
        case 0: {
          break;
        }
        case 1: {
          const _break = _tmp$3;
          _break._0;
          break;
        }
        case 2: {
          const _return = _tmp$3;
          return _return._0;
        }
        case 3: {
          $panic();
          break;
        }
        default: {
          $panic();
        }
      }
      continue;
    } else {
      break;
    }
  }
  const new_dfa = moonbitlang$ulex$lib$automaton$$DFA$new(dfa.pattern_captures);
  const state_to_partition = moonbitlang$core$builtin$$Map$from_array$115$([]);
  const _bind$3 = moonbitlang$core$immut$sorted_set$$T$iter$20$(partitions.val);
  _bind$3((partition) => {
    const _bind$4 = moonbitlang$core$immut$sorted_set$$T$iter$8$(partition);
    _bind$4((state) => {
      moonbitlang$core$builtin$$Map$op_set$115$(state_to_partition, state, partition);
      return 1;
    });
    return 1;
  });
  const partition_to_new_state = moonbitlang$core$builtin$$Map$from_array$116$([]);
  const state_to_new_state = moonbitlang$core$builtin$$Map$from_array$75$([]);
  const _env = { _0: state_to_new_state, _1: partition_to_new_state, _2: new_dfa, _3: state_to_partition };
  new_dfa.start_node = moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$233(_env, dfa.start_node);
  const _bind$4 = moonbitlang$core$immut$sorted_set$$T$iter$20$(partitions.val);
  _bind$4((partition) => {
    const new_state = moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$233(_env, moonbitlang$core$immut$sorted_set$$T$min$8$(partition));
    const _bind$5 = moonbitlang$core$immut$sorted_set$$T$iter$30$(symbols);
    _bind$5((symbol) => {
      const _bind$6 = moonbitlang$core$immut$sorted_set$$T$iter$8$(partition);
      _bind$6((state) => {
        const _arr$2 = moonbitlang$core$array$$Array$op_get$134$(dfa.graph, state);
        const _len$2 = _arr$2.length;
        let _tmp$3 = 0;
        while (true) {
          const _i = _tmp$3;
          if (_i < _len$2) {
            const tran = _arr$2[_i];
            const _input = tran._0;
            const _target = tran._1;
            if (moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$contains2(_input, moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$unsafe_choose(symbol.char_set))) {
              const new_target = moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$233(_env, _target);
              moonbitlang$ulex$lib$automaton$$DFA$add_edge(new_dfa, new_state, symbol.char_set, new_target);
            }
            _tmp$3 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return 1;
      });
      return 1;
    });
    return 1;
  });
  const _bind$5 = moonbitlang$core$builtin$$Map$iter2$118$(dfa.tag_actions);
  _bind$5((node, tag_action) => {
    const _bind$6 = moonbitlang$core$builtin$$Map$get$75$(state_to_new_state, node);
    if (_bind$6 === undefined) {
    } else {
      const _Some = _bind$6;
      const _new_state = _Some;
      moonbitlang$core$builtin$$Map$op_set$118$(new_dfa.tag_actions, _new_state, tag_action);
    }
    return 1;
  });
  const _bind$6 = moonbitlang$core$builtin$$Map$iter2$114$(dfa.end_nodes);
  _bind$6((end_state, end_state_info) => {
    const _bind$7 = moonbitlang$core$builtin$$Map$get$75$(state_to_new_state, end_state);
    if (_bind$7 === undefined) {
    } else {
      const _Some = _bind$7;
      const _new_end_state = _Some;
      _L: {
        _L$2: {
          const _bind$8 = moonbitlang$core$builtin$$Map$get$114$(new_dfa.end_nodes, _new_end_state);
          if (_bind$8 === undefined) {
            break _L$2;
          } else {
            _L$3: {
              const _bind$9 = moonbitlang$core$builtin$$Map$get$114$(new_dfa.end_nodes, _new_end_state);
              if (_bind$9 === undefined) {
                break _L$3;
              } else {
                const _Some$2 = _bind$9;
                const _end_state_info2 = _Some$2;
                if (moonbitlang$core$builtin$$Eq$op_equal$144$(_end_state_info2, end_state_info)) {
                  break _L$2;
                } else {
                  break _L$3;
                }
              }
            }
            $panic();
          }
          break _L;
        }
        moonbitlang$core$builtin$$Map$op_set$114$(new_dfa.end_nodes, _new_end_state, end_state_info);
      }
    }
    return 1;
  });
  return new_dfa;
}
function moonbitlang$ulex$lib$automaton$$TagState$new() {
  return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$;
}
function moonbitlang$ulex$lib$automaton$$TagState$update_by_tag(self, tag, rank) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$get$75$(self, tag);
  if (_bind === undefined) {
    return moonbitlang$core$immut$sorted_map$$T$add$75$(self, tag, rank);
  } else {
    const _Some = _bind;
    const _old_rank = _Some;
    return _old_rank > rank ? moonbitlang$core$immut$sorted_map$$T$add$75$(self, tag, rank) : self;
  }
}
function moonbitlang$ulex$lib$automaton$$TagState$update_by_tags(self, tags) {
  const state = { val: self };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$8$(tags);
  _bind((tag) => {
    state.val = moonbitlang$ulex$lib$automaton$$TagState$update_by_tag(state.val, tag, -1);
    return 1;
  });
  return state.val;
}
function moonbitlang$ulex$lib$automaton$$tagState_merge(self_, other) {
  const tags = moonbitlang$core$builtin$$Add$op_add$56$(moonbitlang$core$immut$sorted_set$$from_array$8$(moonbitlang$core$immut$sorted_map$$T$keys$75$(self_)), moonbitlang$core$immut$sorted_set$$from_array$8$(moonbitlang$core$immut$sorted_map$$T$keys$75$(other)));
  const result = { val: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$ };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$8$(tags);
  _bind((tag) => {
    const _tmp = result.val;
    const _bind$2 = moonbitlang$core$immut$sorted_map$$T$get$75$(self_, tag);
    const _bind$3 = moonbitlang$core$immut$sorted_map$$T$get$75$(other, tag);
    let _tmp$2;
    if (_bind$2 === undefined) {
      if (_bind$3 === undefined) {
        _tmp$2 = $panic();
      } else {
        const _Some = _bind$3;
        _tmp$2 = _Some;
      }
    } else {
      const _Some = _bind$2;
      const _rank = _Some;
      if (_bind$3 === undefined) {
        _tmp$2 = _rank;
      } else {
        const _Some$2 = _bind$3;
        const _rank2 = _Some$2;
        _tmp$2 = _rank > _rank2 ? _rank2 : _rank;
      }
    }
    result.val = moonbitlang$core$immut$sorted_map$$T$add$75$(_tmp, tag, _tmp$2);
    return 1;
  });
  return result.val;
}
function moonbitlang$ulex$lib$automaton$$state_canonicalize(state, tag_count) {
  const ranks_by_tag = moonbitlang$core$array$$Array$makei$36$(tag_count, (_i) => []);
  const _bind = moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(state);
  _bind((pair) => {
    const tags = pair._1;
    const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter2$75$(tags);
    _bind$2((tag, rank) => {
      moonbitlang$core$array$$Array$push$8$(moonbitlang$core$array$$Array$op_get$37$(ranks_by_tag, tag), rank);
      return 1;
    });
    return 1;
  });
  const _p = ranks_by_tag.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = ranks_by_tag[_p$2];
      const x = _p$3;
      moonbitlang$core$array$$Array$op_set$37$(ranks_by_tag, _p$2, moonbitlang$core$sorted_set$$T$to_array$8$(moonbitlang$core$sorted_set$$from_iter$8$(moonbitlang$core$array$$Array$iter$8$(x))));
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind$2 = moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(state);
  const new_state = moonbitlang$ulex$lib$util$immut_map$$from_iter$187$((_p$2) => _bind$2((_p$3) => {
    const tag_state = moonbitlang$core$immut$sorted_map$$T$map_with_key$80$(_p$3._1, (tag, prev_rank) => {
      const ranks = moonbitlang$core$array$$Array$op_get$37$(ranks_by_tag, tag);
      const _bind$3 = moonbitlang$core$array$$Array$search$8$(ranks, prev_rank);
      if (_bind$3 === undefined) {
        return $panic();
      } else {
        const _Some = _bind$3;
        return _Some;
      }
    });
    return _p$2({ _0: _p$3._0, _1: tag_state });
  }));
  const tag_action = [];
  const _len = ranks_by_tag.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const ops = ranks_by_tag[_i];
      let _tmp$3 = ops.length - 1 | 0;
      while (true) {
        const dest_rank = _tmp$3;
        if (dest_rank >= 0) {
          const src_rank = moonbitlang$core$array$$Array$op_get$8$(ops, dest_rank);
          if (src_rank === -1) {
            moonbitlang$core$array$$Array$push$27$(tag_action, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set({ _0: _i, _1: dest_rank }));
          } else {
            if (dest_rank !== src_rank) {
              moonbitlang$core$array$$Array$push$27$(tag_action, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy({ _0: _i, _1: dest_rank }, { _0: _i, _1: src_rank }));
            }
          }
          _tmp$3 = dest_rank - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: new_state, _1: tag_action };
}
function moonbitlang$ulex$lib$automaton$$DFA$register_node(self, nfa, node, os) {
  const code_blocks = moonbitlang$core$builtin$$Iter$collect$8$(moonbitlang$core$builtin$$Iter$filter_map$176$(moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(os), (x) => moonbitlang$core$builtin$$Map$get$75$(nfa.end_nodes, x._0.num)));
  if (!(code_blocks.length === 0)) {
    const _p = moonbitlang$core$array$$Array$op_get$8$(code_blocks, 0);
    let min_code_block;
    let _tmp = 0;
    let _tmp$2 = _p;
    while (true) {
      const _p$2 = _tmp;
      const _p$3 = _tmp$2;
      if (_p$2 < code_blocks.length) {
        _tmp = _p$2 + 1 | 0;
        const _p$4 = moonbitlang$core$array$$Array$op_get$8$(code_blocks, _p$2);
        _tmp$2 = _p$3 > _p$4 ? _p$4 : _p$3;
        continue;
      } else {
        min_code_block = _p$3;
        break;
      }
    }
    const _bind = moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(os);
    const end_nodes = moonbitlang$core$builtin$$Iter$to_array$55$((_p$2) => _bind((_p$3) => moonbitlang$core$builtin$$Eq$op_equal$105$(moonbitlang$core$builtin$$Map$get$75$(nfa.end_nodes, _p$3._0.num), min_code_block) ? _p$2(_p$3) : 1));
    if (end_nodes.length === 1) {
      const tagState = moonbitlang$core$array$$Array$op_get$55$(end_nodes, 0)._1;
      const _p$2 = moonbitlang$core$array$$Array$op_get$137$(nfa.pattern_captures, min_code_block)._0;
      const _p$3 = new Array(_p$2.length);
      const _p$4 = _p$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _p$5 = _tmp$3;
        if (_p$5 < _p$4) {
          const _p$6 = _p$2[_p$5];
          const it = _p$6;
          const _x = it._1;
          const _begin = _x._0;
          const _end = _x._1;
          let _tmp$4;
          if (_begin.$tag === 0) {
            const _Dynamic_nfa = _begin;
            const _tag = _Dynamic_nfa._0;
            const _p$7 = moonbitlang$core$immut$sorted_map$$T$get$75$(tagState, _tag);
            let _tmp$5;
            if (_p$7 === undefined) {
              _tmp$5 = $panic();
            } else {
              const _p$8 = _p$7;
              _tmp$5 = _p$8;
            }
            _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa({ _0: _tag, _1: _tmp$5 });
          } else {
            const _Static_nfa = _begin;
            const _info = _Static_nfa._0;
            _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa(_info);
          }
          const _tmp$5 = _tmp$4;
          let _tmp$6;
          if (_end.$tag === 0) {
            const _Dynamic_nfa = _end;
            const _tag = _Dynamic_nfa._0;
            const _p$7 = moonbitlang$core$immut$sorted_map$$T$get$75$(tagState, _tag);
            let _tmp$7;
            if (_p$7 === undefined) {
              _tmp$7 = $panic();
            } else {
              const _p$8 = _p$7;
              _tmp$7 = _p$8;
            }
            _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa({ _0: _tag, _1: _tmp$7 });
          } else {
            const _Static_nfa = _end;
            const _info = _Static_nfa._0;
            _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa(_info);
          }
          _p$3[_p$5] = { _0: _tmp$5, _1: _tmp$6 };
          _tmp$3 = _p$5 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const min_tags = _p$3;
      moonbitlang$core$builtin$$Map$set$114$(self.end_nodes, node, { _0: min_code_block, _1: min_tags });
      return;
    } else {
      moonbitlang$core$abort$$abort$4$("error");
      return;
    }
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$automaton$$from_nfa$46$get_id$124$17(_env, state, canonicalized_state) {
  const dfa = _env._2;
  const node_map = _env._1;
  const nfa = _env._0;
  return moonbitlang$core$builtin$$Map$get_or_init$110$(node_map, state, () => {
    const node = moonbitlang$ulex$lib$automaton$$DFA$new_node(dfa);
    moonbitlang$ulex$lib$automaton$$DFA$register_node(dfa, nfa, node, canonicalized_state);
    return node;
  });
}
function moonbitlang$ulex$lib$automaton$$from_nfa$46$42$func$124$1781(_env, _p) {
  const _tag_state = _env._1;
  const _bind = _env._0;
  return _bind((_p$2) => {
    const _cset = _p$2._0;
    const _target = _p$2._1;
    return _p({ _0: _cset, _1: { _0: _target, _1: _tag_state } });
  });
}
function moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$41(new_nfa_trans, cset, targets) {
  if (!moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(cset)) {
    moonbitlang$core$array$$Array$push$163$(new_nfa_trans, { _0: cset, _1: targets });
    return;
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$automaton$$DFA$from_nfa(nfa) {
  const eps_closure = moonbitlang$ulex$lib$automaton$$NFA$get_eps_closure(nfa);
  const initial = moonbitlang$core$array$$Array$op_get$135$(eps_closure, nfa.start_node);
  const _bind = moonbitlang$ulex$lib$automaton$$NFAEpsClosure$iter(initial);
  const initial_state = moonbitlang$ulex$lib$util$immut_map$$from_iter$187$((_p) => _bind((_p$2) => {
    const _x = _p$2._0;
    const _y = _p$2._1;
    return _p({ _0: _x, _1: moonbitlang$ulex$lib$automaton$$TagState$update_by_tags(moonbitlang$ulex$lib$automaton$$TagState$new(), _y) });
  }));
  const _bind$2 = moonbitlang$ulex$lib$automaton$$state_canonicalize(initial_state, nfa.tag_count);
  const _canonicalized_initial_state = _bind$2._0;
  const _start_action = _bind$2._1;
  const _p = nfa.pattern_captures;
  const _p$2 = new Array(_p.length);
  const _p$3 = _p.length;
  let _tmp = 0;
  while (true) {
    const _p$4 = _tmp;
    if (_p$4 < _p$3) {
      const _p$5 = _p[_p$4];
      const x = _p$5;
      const _p$6 = x._0;
      const _p$7 = new Array(_p$6.length);
      const _p$8 = _p$6.length;
      let _tmp$2 = 0;
      while (true) {
        const _p$9 = _tmp$2;
        if (_p$9 < _p$8) {
          const _p$10 = _p$6[_p$9];
          const y = _p$10;
          _p$7[_p$9] = y._0;
          _tmp$2 = _p$9 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _p$2[_p$4] = { _0: _p$7, _1: x._1 };
      _tmp = _p$4 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const captures = _p$2;
  const dfa = moonbitlang$ulex$lib$automaton$$DFA$new(captures);
  const node_map = moonbitlang$core$builtin$$Map$new$110$(8);
  const _env = { _0: nfa, _1: node_map, _2: dfa };
  const start_node = moonbitlang$ulex$lib$automaton$$from_nfa$46$get_id$124$17(_env, initial_state, _canonicalized_initial_state);
  dfa.start_node = start_node;
  moonbitlang$core$builtin$$Map$op_set$118$(dfa.tag_actions, start_node, _start_action);
  const queue = moonbitlang$core$queue$$new$179$();
  moonbitlang$core$queue$$T$push$179$(queue, { _0: start_node, _1: _canonicalized_initial_state });
  let visited = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  while (true) {
    const _bind$3 = moonbitlang$core$queue$$T$pop$179$(queue);
    if (_bind$3 === undefined) {
      break;
    } else {
      const _Some = _bind$3;
      const _x = _Some;
      const _from_n = _x._0;
      const _cur_state = _x._1;
      if (moonbitlang$core$immut$sorted_set$$T$contains$8$(visited, _from_n)) {
        continue;
      }
      visited = moonbitlang$core$immut$sorted_set$$T$add$8$(visited, _from_n);
      const _bind$4 = moonbitlang$ulex$lib$util$immut_map$$T$iter$187$(_cur_state);
      const char_set_by_nfa_target = moonbitlang$core$builtin$$Map$from_array$117$([]);
      const _p$4 = (nfa_tran) => {
        const _cset = nfa_tran._0;
        const _target = nfa_tran._1;
        const _bind$5 = moonbitlang$core$builtin$$Map$get$117$(char_set_by_nfa_target, _target);
        if (_bind$5 === undefined) {
          moonbitlang$core$builtin$$Map$op_set$117$(char_set_by_nfa_target, _target, _cset);
        } else {
          const _Some$2 = _bind$5;
          const _old_cset = _Some$2;
          moonbitlang$core$builtin$$Map$op_set$117$(char_set_by_nfa_target, _target, moonbitlang$core$builtin$$Add$op_add$54$(_old_cset, _cset));
        }
        return 1;
      };
      _bind$4((_p$5) => {
        const _nfa_node = _p$5._0;
        const _tag_state = _p$5._1;
        const _bind$5 = moonbitlang$core$array$$Array$iter$157$(_nfa_node.trans);
        const _env$2 = { _0: _bind$5, _1: _tag_state };
        return moonbitlang$ulex$lib$automaton$$from_nfa$46$42$func$124$1781(_env$2, _p$4);
      });
      const nfa_trans = { val: [] };
      const all_char_set = { val: moonbitlang$ulex$lib$util$eof_char_set$$empty };
      const _bind$5 = moonbitlang$core$builtin$$Map$iter2$117$(char_set_by_nfa_target);
      _bind$5((target, char_set) => {
        const targets = new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, 1, target);
        const new_nfa_trans = [];
        moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$41(new_nfa_trans, moonbitlang$core$builtin$$Sub$op_sub$54$(char_set, all_char_set.val), targets);
        const _arr = nfa_trans.val;
        const _len = _arr.length;
        let _tmp$2 = 0;
        while (true) {
          const _i = _tmp$2;
          if (_i < _len) {
            const nfa_tran = _arr[_i];
            const _old_cset = nfa_tran._0;
            const _old_targets = nfa_tran._1;
            moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$41(new_nfa_trans, moonbitlang$core$builtin$$BitAnd$land$54$(_old_cset, char_set), moonbitlang$core$builtin$$Add$op_add$58$(_old_targets, targets));
            moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$41(new_nfa_trans, moonbitlang$core$builtin$$Sub$op_sub$54$(_old_cset, char_set), _old_targets);
            _tmp$2 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        all_char_set.val = moonbitlang$core$builtin$$Add$op_add$54$(all_char_set.val, char_set);
        nfa_trans.val = new_nfa_trans;
        return 1;
      });
      const next_states = moonbitlang$core$builtin$$Map$new$111$(8);
      const _arr = nfa_trans.val;
      const _len = _arr.length;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len) {
          const tran = _arr[_i];
          const _cset = tran._0;
          const _targets = tran._1;
          const _p$5 = moonbitlang$core$builtin$$Map$get$111$(next_states, _cset);
          const _p$6 = $64$moonbitlang$47$ulex$47$lib$47$util$47$immut_map$46$T$Empty$35$;
          let _tmp$3;
          if (_p$5 === undefined) {
            _tmp$3 = _p$6;
          } else {
            const _p$7 = _p$5;
            _tmp$3 = _p$7;
          }
          const state_map = { val: _tmp$3 };
          const _bind$6 = moonbitlang$core$immut$sorted_set$$T$iter$55$(_targets);
          _bind$6((target) => {
            const _step_node = target._0;
            const _from_tagState = target._1;
            const _bind$7 = moonbitlang$ulex$lib$automaton$$NFAEpsClosure$iter(moonbitlang$core$array$$Array$op_get$135$(eps_closure, _step_node.num));
            _bind$7((pair) => {
              const _eps_node = pair._0;
              const _tags = pair._1;
              const upd_tagState = moonbitlang$ulex$lib$automaton$$TagState$update_by_tags(_from_tagState, _tags);
              const old_tagState = moonbitlang$ulex$lib$util$immut_map$$T$get$187$(state_map.val, _eps_node);
              let new_tagState;
              if (old_tagState === undefined) {
                new_tagState = upd_tagState;
              } else {
                const _Some$2 = old_tagState;
                const _old_tagState = _Some$2;
                new_tagState = moonbitlang$ulex$lib$automaton$$tagState_merge(upd_tagState, _old_tagState);
              }
              state_map.val = moonbitlang$ulex$lib$util$immut_map$$T$add$187$(state_map.val, _eps_node, new_tagState);
              return 1;
            });
            return 1;
          });
          moonbitlang$core$builtin$$Map$op_set$111$(next_states, _cset, state_map.val);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const trans = moonbitlang$core$builtin$$Iter$to_array$164$(moonbitlang$core$builtin$$Map$iter$111$(next_states));
      const _len$2 = trans.length;
      let _tmp$3 = 0;
      while (true) {
        const _i = _tmp$3;
        if (_i < _len$2) {
          const tran = trans[_i];
          const _cset = tran._0;
          const _state = tran._1;
          const _bind$6 = moonbitlang$ulex$lib$automaton$$state_canonicalize(_state, nfa.tag_count);
          const _canonicalized_state = _bind$6._0;
          const _action = _bind$6._1;
          const to_n = moonbitlang$ulex$lib$automaton$$from_nfa$46$get_id$124$17(_env, _state, _canonicalized_state);
          moonbitlang$core$queue$$T$push$179$(queue, { _0: to_n, _1: _canonicalized_state });
          moonbitlang$core$builtin$$Map$op_set$118$(dfa.tag_actions, to_n, _action);
          moonbitlang$ulex$lib$automaton$$DFA$add_edge(dfa, _from_n, _cset, to_n);
          _tmp$3 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      continue;
    }
  }
  return dfa;
}
function moonbitlang$ulex$lib$automaton$$DFA$from_patterns(patterns, encoding) {
  return moonbitlang$ulex$lib$automaton$$DFA$minimize_tags(moonbitlang$ulex$lib$automaton$$DFA$minimize(moonbitlang$ulex$lib$automaton$$DFA$from_nfa(moonbitlang$ulex$lib$automaton$$NFA$from_patterns(patterns, encoding))));
}
function moonbitlang$ulex$lib$codegen$codeblock_parser$$scan_codeblock_rbrace$185$(subst, lexbuf) {
  _L: while (true) {
    let _match_pattern = moonbitlang$core$int$$max_value;
    const _match_start = { val: lexbuf.pos };
    const _match_end = { val: -1 };
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _tag_0 = -1;
    let _tag_1 = -1;
    let _tag_2 = -1;
    let _tmp = 0;
    _L$2: while (true) {
      const _param = _tmp;
      switch (_param) {
        case 0: {
          _match_pattern = 5;
          _match_end.val = lexbuf.pos;
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind >= 0 && _bind <= 35) {
            _tmp = 1;
          } else {
            if (_bind === 36) {
              _tmp = 2;
            } else {
              if (_bind >= 37 && _bind <= 122) {
                _tmp = 1;
              } else {
                if (_bind === 123) {
                  _tmp = 3;
                } else {
                  if (_bind === 124) {
                    _tmp = 1;
                  } else {
                    if (_bind === 125) {
                      _tmp = 4;
                    } else {
                      if (_bind >= 126 && _bind <= 1114111) {
                        _tmp = 1;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 4;
          _match_end.val = lexbuf.pos;
          break _L$2;
        }
        case 2: {
          _match_pattern = 4;
          _match_end.val = lexbuf.pos;
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$2 >= 65 && _bind$2 <= 90) {
            _tmp = 5;
          } else {
            if (_bind$2 === 95) {
              _tmp = 5;
            } else {
              if (_bind$2 >= 97 && _bind$2 <= 100) {
                _tmp = 5;
              } else {
                if (_bind$2 === 101) {
                  _tmp = 6;
                } else {
                  if (_bind$2 >= 102 && _bind$2 <= 114) {
                    _tmp = 5;
                  } else {
                    if (_bind$2 === 115) {
                      _tmp = 7;
                    } else {
                      if (_bind$2 >= 116 && _bind$2 <= 122) {
                        _tmp = 5;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 3: {
          _match_pattern = 0;
          _match_end.val = lexbuf.pos;
          break _L$2;
        }
        case 4: {
          _match_pattern = 1;
          _match_end.val = lexbuf.pos;
          break _L$2;
        }
        case 5: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$3 >= 48 && _bind$3 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$3 >= 65 && _bind$3 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$3 === 95) {
                _tmp = 5;
              } else {
                if (_bind$3 >= 97 && _bind$3 <= 122) {
                  _tmp = 5;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 6: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$4 >= 48 && _bind$4 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$4 >= 65 && _bind$4 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$4 === 95) {
                _tmp = 5;
              } else {
                if (_bind$4 >= 97 && _bind$4 <= 109) {
                  _tmp = 5;
                } else {
                  if (_bind$4 === 110) {
                    _tmp = 8;
                  } else {
                    if (_bind$4 >= 111 && _bind$4 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 7: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$5 >= 48 && _bind$5 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$5 >= 65 && _bind$5 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$5 === 95) {
                _tmp = 5;
              } else {
                if (_bind$5 >= 97 && _bind$5 <= 115) {
                  _tmp = 5;
                } else {
                  if (_bind$5 === 116) {
                    _tmp = 9;
                  } else {
                    if (_bind$5 >= 117 && _bind$5 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 8: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$6 >= 65 && _bind$6 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$6 === 95) {
                _tmp = 5;
              } else {
                if (_bind$6 >= 97 && _bind$6 <= 99) {
                  _tmp = 5;
                } else {
                  if (_bind$6 === 100) {
                    _tmp = 10;
                  } else {
                    if (_bind$6 >= 101 && _bind$6 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 9: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$7 >= 48 && _bind$7 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$7 >= 65 && _bind$7 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$7 === 95) {
                _tmp = 5;
              } else {
                if (_bind$7 === 97) {
                  _tmp = 11;
                } else {
                  if (_bind$7 >= 98 && _bind$7 <= 122) {
                    _tmp = 5;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 10: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$8 >= 48 && _bind$8 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$8 >= 65 && _bind$8 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$8 === 95) {
                _tmp = 5;
              } else {
                if (_bind$8 >= 97 && _bind$8 <= 111) {
                  _tmp = 5;
                } else {
                  if (_bind$8 === 112) {
                    _tmp = 12;
                  } else {
                    if (_bind$8 >= 113 && _bind$8 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 11: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$9 === 95) {
                _tmp = 5;
              } else {
                if (_bind$9 >= 97 && _bind$9 <= 113) {
                  _tmp = 5;
                } else {
                  if (_bind$9 === 114) {
                    _tmp = 13;
                  } else {
                    if (_bind$9 >= 115 && _bind$9 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 12: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$10 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$10 >= 48 && _bind$10 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$10 >= 65 && _bind$10 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$10 === 95) {
                _tmp = 5;
              } else {
                if (_bind$10 >= 97 && _bind$10 <= 110) {
                  _tmp = 5;
                } else {
                  if (_bind$10 === 111) {
                    _tmp = 14;
                  } else {
                    if (_bind$10 >= 112 && _bind$10 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 13: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$11 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$11 >= 48 && _bind$11 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$11 >= 65 && _bind$11 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$11 === 95) {
                _tmp = 5;
              } else {
                if (_bind$11 >= 97 && _bind$11 <= 115) {
                  _tmp = 5;
                } else {
                  if (_bind$11 === 116) {
                    _tmp = 10;
                  } else {
                    if (_bind$11 >= 117 && _bind$11 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 14: {
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$12 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$12 >= 48 && _bind$12 <= 57) {
            _tmp = 5;
          } else {
            if (_bind$12 >= 65 && _bind$12 <= 90) {
              _tmp = 5;
            } else {
              if (_bind$12 === 95) {
                _tmp = 5;
              } else {
                if (_bind$12 >= 97 && _bind$12 <= 114) {
                  _tmp = 5;
                } else {
                  if (_bind$12 === 115) {
                    _tmp = 15;
                  } else {
                    if (_bind$12 >= 116 && _bind$12 <= 122) {
                      _tmp = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 15: {
          _tag_0 = lexbuf.pos;
          _match_pattern = 3;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _match_end.val;
          const _bind$13 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$13 === 40) {
            _tmp = 16;
          } else {
            if (_bind$13 >= 48 && _bind$13 <= 57) {
              _tmp = 5;
            } else {
              if (_bind$13 >= 65 && _bind$13 <= 90) {
                _tmp = 5;
              } else {
                if (_bind$13 === 95) {
                  _tmp = 5;
                } else {
                  if (_bind$13 >= 97 && _bind$13 <= 122) {
                    _tmp = 5;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 16: {
          _tag_1 = lexbuf.pos;
          const _bind$14 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$14 === 9) {
            _tmp = 16;
          } else {
            if (_bind$14 === 32) {
              _tmp = 16;
            } else {
              if (_bind$14 >= 65 && _bind$14 <= 90) {
                _tmp = 17;
              } else {
                if (_bind$14 === 95) {
                  _tmp = 17;
                } else {
                  if (_bind$14 >= 97 && _bind$14 <= 122) {
                    _tmp = 17;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 17: {
          _tag_2 = lexbuf.pos;
          const _bind$15 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          if (_bind$15 === 9) {
            _tmp = 18;
          } else {
            if (_bind$15 === 32) {
              _tmp = 18;
            } else {
              if (_bind$15 === 41) {
                _tmp = 19;
              } else {
                if (_bind$15 >= 48 && _bind$15 <= 57) {
                  _tmp = 17;
                } else {
                  if (_bind$15 >= 65 && _bind$15 <= 90) {
                    _tmp = 17;
                  } else {
                    if (_bind$15 === 95) {
                      _tmp = 17;
                    } else {
                      if (_bind$15 >= 97 && _bind$15 <= 122) {
                        _tmp = 17;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 18: {
          const _bind$16 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$185$(lexbuf);
          switch (_bind$16) {
            case 9: {
              _tmp = 18;
              break;
            }
            case 32: {
              _tmp = 18;
              break;
            }
            case 41: {
              _tmp = 19;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 19: {
          _match_pattern = 2;
          _match_end.val = lexbuf.pos;
          _capture_0_start = _match_start.val + 1 | 0;
          _capture_0_end = _tag_0;
          _capture_1_start = _tag_1;
          _capture_1_end = _tag_2;
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 5) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$185$(lexbuf, _match_end.val);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$ulex$lib$codegen$codeblock_parser$$scan_codeblock_rbrace$185$(subst, lexbuf);
          continue _L;
        }
        case 1: {
          return;
        }
        case 2: {
          const t1 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$185$(lexbuf, _capture_0_start, _capture_0_end);
          const t2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$185$(lexbuf, _capture_1_start, _capture_1_end);
          const _tmp$2 = _match_start.val;
          const _tmp$3 = _match_end.val;
          let _tmp$4;
          switch (t1) {
            case "startpos": {
              _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPosOf(t2);
              break;
            }
            case "endpos": {
              _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPosOf(t2);
              break;
            }
            default: {
              _tmp$4 = $panic();
            }
          }
          moonbitlang$core$array$$Array$push$161$(subst, { start: _tmp$2, end: _tmp$3, desc: _tmp$4 });
          continue _L;
        }
        case 3: {
          const t1$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$185$(lexbuf, _capture_0_start, _capture_0_end);
          _L$3: {
            _L$4: {
              switch (t1$2) {
                case "startpos": {
                  break _L$4;
                }
                case "endpos": {
                  break _L$4;
                }
              }
              break _L$3;
            }
            const _tmp$5 = _match_start.val;
            const _tmp$6 = _match_end.val;
            let _tmp$7;
            switch (t1$2) {
              case "startpos": {
                _tmp$7 = $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPos;
                break;
              }
              case "endpos": {
                _tmp$7 = $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPos;
                break;
              }
              default: {
                _tmp$7 = $panic();
              }
            }
            moonbitlang$core$array$$Array$push$161$(subst, { start: _tmp$5, end: _tmp$6, desc: _tmp$7 });
          }
          continue _L;
        }
        case 4: {
          continue _L;
        }
        case 5: {
          return;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$codegen$codeblock_parser$$parse_codeblock(str) {
  const lexbuf = moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(str);
  const subst = [];
  moonbitlang$ulex$lib$codegen$codeblock_parser$$scan_codeblock_rbrace$185$(subst, lexbuf);
  return subst;
}
function moonbitlang$ulex$lib$codegen$$group_trans$46$42$func$124$183(_env, _p) {
  const _state = _env._1;
  const _bind = _env._0;
  return _bind((_p$2) => {
    const _min = _p$2._0;
    const _max = _p$2._1;
    const _bind$2 = _min === -1 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof : new $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(_min);
    let _tmp;
    if (_bind$2.$tag === 0) {
      _tmp = -1;
    } else {
      const _Char = _bind$2;
      const _c = _Char._0;
      _tmp = _c;
    }
    const _tmp$2 = _tmp;
    const _bind$3 = _max === -1 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof : new $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(_max);
    let _tmp$3;
    if (_bind$3.$tag === 0) {
      _tmp$3 = -1;
    } else {
      const _Char = _bind$3;
      const _c = _Char._0;
      _tmp$3 = _c;
    }
    return _p({ _0: { _0: _tmp$2, _1: _tmp$3 }, _1: _state });
  });
}
function moonbitlang$ulex$lib$codegen$$group_trans(trans) {
  const char_set_by_state = moonbitlang$core$builtin$$Map$from_array$112$([]);
  const _len = trans.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tran = trans[_i];
      const _char_set = tran._0;
      const _next_state = tran._1;
      const _bind = moonbitlang$core$builtin$$Map$get$112$(char_set_by_state, _next_state);
      if (_bind === undefined) {
        moonbitlang$core$builtin$$Map$op_set$112$(char_set_by_state, _next_state, _char_set);
      } else {
        const _Some = _bind;
        const _existing_char_set = _Some;
        moonbitlang$core$builtin$$Map$op_set$112$(char_set_by_state, _next_state, moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(_char_set, _existing_char_set));
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$builtin$$Map$iter$112$(char_set_by_state);
  const result = moonbitlang$core$builtin$$Iter$to_array$26$((_p) => _bind((_p$2) => {
    const _state = _p$2._0;
    const _char_set = _p$2._1;
    const _bind$2 = moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$iter_ranges(_char_set);
    const _env = { _0: _bind$2, _1: _state };
    return moonbitlang$ulex$lib$codegen$$group_trans$46$42$func$124$183(_env, _p);
  }));
  moonbitlang$core$array$$Array$sort$26$(result);
  return result;
}
function moonbitlang$ulex$lib$codegen$$rewrite_codeblock$46$index_of_name$124$128(captures, name) {
  const _p = captures.length;
  let _p$2;
  let _tmp = 0;
  while (true) {
    const _p$3 = _tmp;
    if (_p$3 < _p) {
      const _p$4 = captures[_p$3];
      const it = _p$4;
      const _n = it._0;
      if (_n === name) {
        _p$2 = _p$3;
        break;
      }
      _tmp = _p$3 + 1 | 0;
      continue;
    } else {
      _p$2 = undefined;
      break;
    }
  }
  if (_p$2 === undefined) {
    return $panic();
  } else {
    const _p$3 = _p$2;
    return _p$3;
  }
}
function moonbitlang$ulex$lib$codegen$$rewrite_codeblock(codeblock, subst, captures) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  let last_index = 0;
  const _len = subst.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = subst[_i];
      moonbitlang$core$builtin$$Logger$write_substring$38$(buf, codeblock, last_index, item.start - last_index | 0);
      const _bind = item.desc;
      switch (_bind.$tag) {
        case 0: {
          const _StartPosOf = _bind;
          const _name = _StartPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$ulex$lib$codegen$$rewrite_codeblock$46$index_of_name$124$128(captures, _name))}_start`);
          break;
        }
        case 1: {
          const _EndPosOf = _bind;
          const _name$2 = _EndPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$ulex$lib$codegen$$rewrite_codeblock$46$index_of_name$124$128(captures, _name$2))}_end`);
          break;
        }
        case 2: {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, "_match_start");
          break;
        }
        default: {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, "_match_end");
        }
      }
      last_index = item.end;
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (last_index < codeblock.length) {
    moonbitlang$core$builtin$$Logger$write_substring$38$(buf, codeblock, last_index, codeblock.length - last_index | 0);
  }
  return buf.val;
}
function moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(tag_var) {
  if (tag_var._1 < 0) {
    moonbitlang$core$builtin$$println$46$(tag_var);
  }
  return tag_var._1 === 0 ? `_tag_${moonbitlang$core$builtin$$Show$to_string$8$(tag_var._0)}` : `_tag_${moonbitlang$core$builtin$$Show$to_string$8$(tag_var._0)}_${moonbitlang$core$builtin$$Show$to_string$8$(tag_var._1)}`;
}
function moonbitlang$ulex$lib$codegen$$codegen_rule_inner(rule, code_unit, default_encoding) {
  const out = moonbitlang$core$builtin$$StringBuilder$new(0);
  let encoding;
  _L: {
    _L$2: {
      switch (code_unit) {
        case 0: {
          encoding = default_encoding;
          break;
        }
        case 1: {
          break _L$2;
        }
        default: {
          break _L$2;
        }
      }
      break _L;
    }
    encoding = undefined;
  }
  const dfa = moonbitlang$ulex$lib$automaton$$DFA$from_patterns(rule.patterns, encoding);
  const _bind = moonbitlang$core$array$$Array$iter$133$(dfa.pattern_captures);
  const _p = moonbitlang$core$builtin$$Iter$maximum$8$((_p$2) => _bind((_p$3) => _p$2(_p$3._0.length)));
  const _p$2 = 0;
  let max_num_capture_vars;
  if (_p === undefined) {
    max_num_capture_vars = _p$2;
  } else {
    const _p$3 = _p;
    max_num_capture_vars = _p$3;
  }
  const max_pattern_id = dfa.pattern_captures.length - 1 | 0;
  moonbitlang$core$builtin$$Logger$write_string$38$(out, `  // The matched pattern id\n  let mut _match_pattern = @int.max_value\n  let mut _match_start = ${rule.lexee}.curr_pos()\n  let mut _match_end = -1\n`);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i <= max_num_capture_vars) {
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$8$(i)}_start = -1\n  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$8$(i)}_end = -1\n`);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const all_tag_actions = moonbitlang$core$sorted_set$$new$44$();
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$118$(dfa.tag_actions);
  _bind$2((__, tag_action) => {
    moonbitlang$core$sorted_set$$T$add$44$(all_tag_actions, tag_action);
    return 1;
  });
  const all_tag_vars = moonbitlang$core$sorted_set$$new$46$();
  const _bind$3 = moonbitlang$core$sorted_set$$T$iter$44$(all_tag_actions);
  _bind$3((tag_action) => {
    const _arr = tag_action;
    const _len = _arr.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len) {
        const op = _arr[_i];
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          moonbitlang$core$sorted_set$$T$add$46$(all_tag_vars, _dest);
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          moonbitlang$core$sorted_set$$T$add$46$(all_tag_vars, _dest);
          moonbitlang$core$sorted_set$$T$add$46$(all_tag_vars, _src);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _bind$4 = moonbitlang$core$sorted_set$$T$iter$46$(all_tag_vars);
  _bind$4((tag_var) => {
    moonbitlang$core$builtin$$Logger$write_string$38$(out, `  let mut ${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(tag_var)} = -1\n`);
    return 1;
  });
  const start_tags = moonbitlang$core$sorted_set$$new$8$();
  const _bind$5 = moonbitlang$core$sorted_set$$T$iter$8$(start_tags);
  _bind$5((tag) => {
    moonbitlang$core$builtin$$Logger$write_string$38$(out, `  ${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39({ _0: tag, _1: 0 })} = ${rule.lexee}.curr_pos()\n`);
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$38$(out, `  loop ${moonbitlang$core$builtin$$Show$to_string$8$(dfa.start_node)} {\n`);
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const trans = _arr[_i];
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `    ${moonbitlang$core$builtin$$Show$to_string$8$(_i)} => {\n`);
      const tag_action = moonbitlang$core$option$$Option$unwrap$44$(moonbitlang$core$builtin$$Map$get$118$(dfa.tag_actions, _i));
      const buf = [];
      const _arr$2 = tag_action;
      const _len$2 = _arr$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const op = _arr$2[_i$2];
          if (op.$tag === 0) {
            const _Set = op;
            const _dest = _Set._0;
            moonbitlang$core$array$$Array$push$0$(buf, `${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(_dest)} = ${rule.lexee}.curr_pos()`);
          } else {
            const _Copy = op;
            const _dest = _Copy._0;
            const _src = _Copy._1;
            moonbitlang$core$array$$Array$push$0$(buf, `${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(_dest)} = ${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(_src)}`);
          }
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _bind$6;
      if (buf.length === 0) {
        _bind$6 = undefined;
      } else {
        const _bind$7 = moonbitlang$core$array$$Array$iter$0$(buf);
        _bind$6 = moonbitlang$core$builtin$$Iter$join((_p$3) => _bind$7((_p$4) => _p$3(`      ${_p$4}`)), "\n");
      }
      if (_bind$6 === undefined) {
      } else {
        const _Some = _bind$6;
        const _tag_action_code = _Some;
        moonbitlang$core$builtin$$Logger$write_string$38$(out, `${_tag_action_code}\n`);
      }
      const _bind$7 = moonbitlang$core$builtin$$Map$get$114$(dfa.end_nodes, _i);
      if (_bind$7 === undefined) {
      } else {
        const _Some = _bind$7;
        const _x = _Some;
        const _pattern_id = _x._0;
        const _captures = _x._1;
        moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _match_pattern = ${moonbitlang$core$builtin$$Show$to_string$8$(_pattern_id)}\n      _match_end = ${rule.lexee}.curr_pos()\n`);
        const _len$3 = _captures.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const capture = _captures[_i$2];
            const _begin = capture._0;
            const _end = capture._1;
            if (_begin.$tag === 0) {
              const _Dynamic_dfa = _begin;
              const _begin_tag_var = _Dynamic_dfa._0;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = ${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(_begin_tag_var)}\n`);
            } else {
              const _Static_dfa = _begin;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_start + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_end + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              }
            }
            if (_end.$tag === 0) {
              const _Dynamic_dfa = _end;
              const _end_tag_var = _Dynamic_dfa._0;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = ${moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$39(_end_tag_var)}\n`);
            } else {
              const _Static_dfa = _end;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_start + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_end + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              }
            }
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "");
      }
      const grouped_trans = moonbitlang$ulex$lib$codegen$$group_trans(trans);
      if (grouped_trans.length === 0) {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "      break\n");
      } else {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, `      continue match ${rule.lexee}.next_as_int() {\n`);
        const _len$3 = grouped_trans.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const tran = grouped_trans[_i$2];
            const _x = tran._0;
            const _first_char = _x._0;
            const _last_char = _x._1;
            const _next_state = tran._1;
            const pattern = _first_char === _last_char ? moonbitlang$core$builtin$$Show$to_string$8$(_first_char) : `${moonbitlang$core$builtin$$Show$to_string$8$(_first_char)}..=${moonbitlang$core$builtin$$Show$to_string$8$(_last_char)}`;
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `        ${pattern} => ${moonbitlang$core$builtin$$Show$to_string$8$(_next_state)}\n`);
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "        _ => break\n      }\n");
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(out, "    }\n");
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$38$(out, "    _ => panic()\n  }\n");
  moonbitlang$core$builtin$$Logger$write_string$38$(out, `\n  guard _match_pattern <= ${moonbitlang$core$builtin$$Show$to_string$8$(max_pattern_id)} else {\n    // No pattern matched\n    panic()\n  }\n\n  ${rule.lexee}.reset(pos=_match_end)\n  match _match_pattern {\n`);
  const _arr$2 = rule.actions;
  const _len$2 = _arr$2.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$2) {
      const action = _arr$2[_i];
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `    ${moonbitlang$core$builtin$$Show$to_string$8$(_i)} => {\n      ()\n`);
      const subst = moonbitlang$ulex$lib$codegen$codeblock_parser$$parse_codeblock(action);
      const captures = moonbitlang$core$array$$Array$op_get$133$(dfa.pattern_captures, _i);
      const _arr$3 = captures._0;
      const _len$3 = _arr$3.length;
      let _tmp$4 = 0;
      while (true) {
        const _i$2 = _tmp$4;
        if (_i$2 < _len$3) {
          const capture = _arr$3[_i$2];
          const _name = capture._0;
          const _var_type = capture._1;
          if (_var_type === 0) {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let ${_name} = ${rule.lexee}.get_char(_capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start, _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end)\n`);
          } else {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let ${_name} = ${rule.lexee}.get_string(_capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start, _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end)\n`);
          }
          let _tmp$5;
          let _return_value;
          _L$2: {
            _L$3: {
              const _len$4 = subst.length;
              let _tmp$6 = 0;
              while (true) {
                const _i$3 = _tmp$6;
                if (_i$3 < _len$4) {
                  const item = subst[_i$3];
                  let n;
                  _L$4: {
                    _L$5: {
                      const _bind$6 = item.desc;
                      switch (_bind$6.$tag) {
                        case 0: {
                          const _StartPosOf = _bind$6;
                          const _n = _StartPosOf._0;
                          n = _n;
                          break _L$5;
                        }
                        case 1: {
                          const _EndPosOf = _bind$6;
                          const _n$2 = _EndPosOf._0;
                          n = _n$2;
                          break _L$5;
                        }
                        case 2: {
                          break;
                        }
                      }
                      break _L$4;
                    }
                    if (n === _name) {
                      _return_value = true;
                      break _L$3;
                    }
                  }
                  _tmp$6 = _i$3 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              _tmp$5 = false;
              break _L$2;
            }
            _tmp$5 = _return_value;
          }
          if (_tmp$5) {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let _ = ${_name}\n`);
          }
          _tmp$4 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `${moonbitlang$ulex$lib$codegen$$rewrite_codeblock(action, subst, captures._0)}\n`);
      moonbitlang$core$builtin$$Logger$write_string$38$(out, "    }\n");
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$38$(out, "    _ => panic()\n  }");
  return out.val;
}
function moonbitlang$ulex$lib$codegen$$codegen_rule(rule, code_unit, default_encoding) {
  const inner = moonbitlang$ulex$lib$codegen$$codegen_rule_inner(rule, code_unit, default_encoding);
  const signature = rule.signature;
  const _p = moonbitlang$core$string$$String$find(signature, { str: moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$334, start: 0, end: moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$334.length });
  let lparen_index;
  if (_p === undefined) {
    lparen_index = $panic();
  } else {
    const _p$2 = _p;
    lparen_index = _p$2;
  }
  const left_part = moonbitlang$core$string$$String$substring(signature, 0, lparen_index);
  const lbracket_index = moonbitlang$core$string$$String$find(left_part, { str: moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$330, start: 0, end: moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$330.length });
  let _bind;
  _L: {
    _L$2: {
      if (lbracket_index === undefined) {
        break _L$2;
      } else {
        const _Some = lbracket_index;
        const _lbracket_index = _Some;
        if (_lbracket_index < lparen_index) {
          const _p$2 = moonbitlang$core$string$$String$rev_find(left_part, { str: moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$324, start: 0, end: moonbitlang$ulex$lib$codegen$$codegen_rule$46$42$bind$124$324.length });
          let rbracket_index;
          if (_p$2 === undefined) {
            rbracket_index = $panic();
          } else {
            const _p$3 = _p$2;
            rbracket_index = _p$3;
          }
          const generic_part = moonbitlang$core$string$$String$substring(signature, _lbracket_index, rbracket_index + 1 | 0);
          _bind = { _0: generic_part, _1: `${moonbitlang$core$string$$String$substring(signature, 0, _lbracket_index)}${moonbitlang$core$string$$String$substring(signature, rbracket_index + 1 | 0, undefined)}` };
        } else {
          break _L$2;
        }
      }
      break _L;
    }
    _bind = { _0: "", _1: signature };
  }
  const _generic_part = _bind._0;
  const _other_part = _bind._1;
  return `fn${_generic_part} ${_other_part} {\n${inner}\n}\n\n`;
}
function moonbitlang$ulex$lib$codegen$$codegen_lex(lex, code_unit, default_encoding) {
  const _tmp = lex.header;
  const _p = lex.rules;
  const _p$2 = new Array(_p.length);
  const _p$3 = _p.length;
  let _tmp$2 = 0;
  while (true) {
    const _p$4 = _tmp$2;
    if (_p$4 < _p$3) {
      const _p$5 = _p[_p$4];
      const rule = _p$5;
      _p$2[_p$4] = moonbitlang$ulex$lib$codegen$$codegen_rule(rule, code_unit, default_encoding);
      _tmp$2 = _p$4 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _tmp$3 = moonbitlang$core$array$$Array$join(_p$2, { str: moonbitlang$ulex$lib$codegen$$codegen_lex$46$42$bind$124$346, start: 0, end: moonbitlang$ulex$lib$codegen$$codegen_lex$46$42$bind$124$346.length });
  return moonbitlang$core$array$$Array$join([_tmp, _tmp$3, lex.trailer], { str: moonbitlang$ulex$lib$codegen$$codegen_lex$46$42$bind$124$347, start: 0, end: moonbitlang$ulex$lib$codegen$$codegen_lex$46$42$bind$124$347.length });
}
function Yoorkin$trie$$T$lookup$189$(self, path) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  let _tmp = { buf: _bind, start: 0, len: _bind.length };
  let _tmp$2 = self;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param.len === 0) {
      return _param$2.value;
    } else {
      const _x = _param.buf[_param.start];
      const _tmp$3 = _param.buf;
      const _tmp$4 = 1 + _param.start | 0;
      const _some = _param.len;
      const _x$2 = { buf: _tmp$3, start: _tmp$4, len: _some - 1 | 0 };
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$op_get$70$(_param$2.forks, _x);
      if (_bind$2 === undefined) {
        return undefined;
      } else {
        const _Some = _bind$2;
        const _subtree = _Some;
        _tmp = _x$2;
        _tmp$2 = _subtree;
        continue;
      }
    }
  }
}
function Yoorkin$trie$$add$46$aux$47$7786(value, _param18, _param19) {
  if (_param18.len === 0) {
    return { value: value, forks: _param19.forks };
  } else {
    const _x = _param18.buf[_param18.start];
    const _tmp = _param18.buf;
    const _tmp$2 = 1 + _param18.start | 0;
    const _some = _param18.len;
    const _x$2 = { buf: _tmp, start: _tmp$2, len: _some - 1 | 0 };
    const _p = moonbitlang$core$immut$sorted_map$$T$op_get$70$(_param19.forks, _x);
    const _p$2 = { value: undefined, forks: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$ };
    let subtree;
    if (_p === undefined) {
      subtree = _p$2;
    } else {
      const _p$3 = _p;
      subtree = _p$3;
    }
    return { value: _param19.value, forks: moonbitlang$core$immut$sorted_map$$T$add$70$(_param19.forks, _x, Yoorkin$trie$$add$46$aux$47$7786(value, _x$2, subtree)) };
  }
}
function Yoorkin$trie$$T$add$189$(self, path, value) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  return Yoorkin$trie$$add$46$aux$47$7786(value, { buf: _bind, start: 0, len: _bind.length }, self);
}
function Yoorkin$trie$$empty$189$() {
  return { value: undefined, forks: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$ };
}
function Yoorkin$ArgParser$$interpret(trie, xs, fallback) {
  const _bind = xs.length;
  let _tmp = 0;
  let _tmp$2 = _bind;
  _L: while (true) {
    const _param_start = _tmp;
    const _param_len = _tmp$2;
    if (_param_len === 0) {
      return;
    } else {
      const _x = xs[_param_start];
      const _bind$2 = 1 + _param_start | 0;
      const _some = _param_len;
      const _bind$3 = _some - 1 | 0;
      const _bind$4 = Yoorkin$trie$$T$lookup$189$(trie, _x);
      if (_bind$4 === undefined) {
        fallback(_x);
        _tmp = _bind$2;
        _tmp$2 = _bind$3;
        continue;
      } else {
        const _Some = _bind$4;
        const _spec = _Some;
        _L$2: {
          switch (_spec.$tag) {
            case 1: {
              const _String = _spec;
              const _f = _String._0;
              if (_bind$3 >= 1) {
                const _y = xs[_bind$2];
                const _bind$5 = 1 + _bind$2 | 0;
                const _some$2 = _bind$3;
                const _bind$6 = _some$2 - 1 | 0;
                _f(_y);
                _tmp = _bind$5;
                _tmp$2 = _bind$6;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 2: {
              const _Set_string = _spec;
              const _r = _Set_string._0;
              if (_bind$3 >= 1) {
                const _y = xs[_bind$2];
                const _bind$5 = 1 + _bind$2 | 0;
                const _some$2 = _bind$3;
                const _bind$6 = _some$2 - 1 | 0;
                _r.val = _y;
                _tmp = _bind$5;
                _tmp$2 = _bind$6;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 3: {
              const _Set = _spec;
              const _r$2 = _Set._0;
              _r$2.val = true;
              _tmp = _bind$2;
              _tmp$2 = _bind$3;
              continue _L;
            }
            case 4: {
              const _Clear = _spec;
              const _r$3 = _Clear._0;
              _r$3.val = false;
              _tmp = _bind$2;
              _tmp$2 = _bind$3;
              continue _L;
            }
            default: {
              const _Unit = _spec;
              const _f$2 = _Unit._0;
              _f$2();
              _tmp = _bind$2;
              _tmp$2 = _bind$3;
              continue _L;
            }
          }
        }
        moonbitlang$core$builtin$$println$0$(`missing argument for ${_x}`);
        return;
      }
    }
  }
}
function Yoorkin$ArgParser$$parse$46$aux$124$7(_param5, _param6) {
  const _x = _param5._0;
  const _help_msg = _param5._1;
  const _a = _param6._0;
  const _b = _param6._1;
  const _spec = _param6._2;
  const _help = _param6._3;
  const trie = Yoorkin$trie$$T$add$189$(Yoorkin$trie$$T$add$189$(_x, _a, _spec), _b, _spec);
  const help_msg = `${_help_msg}  ${_a}\t${_b}\t${_help}\n`;
  return { _0: trie, _1: help_msg };
}
function Yoorkin$ArgParser$$parse(speclist, rest, usage_msg, argv) {
  const _p = { _0: Yoorkin$trie$$empty$189$(), _1: `${usage_msg}\n options:\n` };
  let _bind;
  let _tmp = 0;
  let _tmp$2 = _p;
  while (true) {
    const _p$2 = _tmp;
    const _p$3 = _tmp$2;
    if (_p$2 < speclist.length) {
      _tmp = _p$2 + 1 | 0;
      _tmp$2 = Yoorkin$ArgParser$$parse$46$aux$124$7(_p$3, moonbitlang$core$array$$Array$op_get$131$(speclist, _p$2));
      continue;
    } else {
      _bind = _p$3;
      break;
    }
  }
  const _trie = _bind._0;
  const _help_msg = _bind._1;
  const help_spec = new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$0$(_help_msg);
  });
  const trie = Yoorkin$trie$$T$add$189$(Yoorkin$trie$$T$add$189$(_trie, "--help", help_spec), "-h", help_spec);
  Yoorkin$ArgParser$$interpret(trie, argv, rest);
}
function moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(str, is_filename) {
  const res = [];
  const len = str.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _p = i;
      $bound_check(str, _p);
      let c = str.charCodeAt(_p);
      if (55296 <= c && c <= 56319) {
        c = c - 55296 | 0;
        i = i + 1 | 0;
        const _p$2 = i;
        $bound_check(str, _p$2);
        const l = str.charCodeAt(_p$2) - 56320 | 0;
        c = ((c << 10) + l | 0) + 65536 | 0;
      }
      if (c < 128) {
        moonbitlang$core$array$$Array$push$17$(res, c & 255);
      } else {
        if (c < 2048) {
          moonbitlang$core$array$$Array$push$17$(res, (192 + (c >> 6) | 0) & 255);
          moonbitlang$core$array$$Array$push$17$(res, (128 + (c & 63) | 0) & 255);
        } else {
          if (c < 65536) {
            moonbitlang$core$array$$Array$push$17$(res, (224 + (c >> 12) | 0) & 255);
            moonbitlang$core$array$$Array$push$17$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$17$(res, (128 + (c & 63) | 0) & 255);
          } else {
            moonbitlang$core$array$$Array$push$17$(res, (240 + (c >> 18) | 0) & 255);
            moonbitlang$core$array$$Array$push$17$(res, (128 + (c >> 12 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$17$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$17$(res, (128 + (c & 63) | 0) & 255);
          }
        }
      }
      i = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (is_filename) {
    moonbitlang$core$array$$Array$push$17$(res, 0 & 255);
  }
  return moonbitlang$core$bytes$$Bytes$from_array(res);
}
function moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes) {
  const res = [];
  const len = bytes.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(bytes, _tmp);
      let c = bytes[_tmp];
      if (c < 128) {
        moonbitlang$core$array$$Array$push$68$(res, c);
        i = i + 1 | 0;
      } else {
        if (c < 224) {
          if ((i + 1 | 0) >= len) {
            break;
          }
          const _tmp$2 = (c & 31) << 6;
          const _tmp$3 = i + 1 | 0;
          $bound_check(bytes, _tmp$3);
          c = _tmp$2 | bytes[_tmp$3] & 63;
          moonbitlang$core$array$$Array$push$68$(res, c);
          i = i + 2 | 0;
        } else {
          if (c < 240) {
            if ((i + 2 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 15) << 12;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 6;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            c = _tmp$4 | bytes[_tmp$5] & 63;
            moonbitlang$core$array$$Array$push$68$(res, c);
            i = i + 3 | 0;
          } else {
            if ((i + 3 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 7) << 18;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 12;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            const _tmp$6 = _tmp$4 | (bytes[_tmp$5] & 63) << 6;
            const _tmp$7 = i + 3 | 0;
            $bound_check(bytes, _tmp$7);
            c = _tmp$6 | bytes[_tmp$7] & 63;
            c = c - 65536 | 0;
            moonbitlang$core$array$$Array$push$68$(res, (c >> 10) + 55296 | 0);
            moonbitlang$core$array$$Array$push$68$(res, (c & 1023) + 56320 | 0);
            i = i + 4 | 0;
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return moonbitlang$core$string$$String$from_array(res);
}
function moonbitlang$x$sys$internal$ffi$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args_internal();
}
function moonbitlang$x$sys$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args();
}
function moonbitlang$x$fs$$read_file_to_bytes_internal(path) {
  const res = moonbitlang$x$fs$$read_file_ffi(path);
  if (res === -1) {
    return new Result$Err$37$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  }
  return new Result$Ok$37$(moonbitlang$x$fs$$get_file_content_ffi());
}
function moonbitlang$x$fs$$read_file_to_string_internal(path, encoding) {
  if (encoding === "utf8") {
    const _bind = moonbitlang$x$fs$$read_file_to_bytes_internal(path);
    let bytes;
    if (_bind.$tag === 1) {
      const _ok = _bind;
      bytes = _ok._0;
    } else {
      return _bind;
    }
    return new Result$Ok$38$(moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes));
  } else {
    return new Result$Err$38$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${encoding}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$write_bytes_to_file_internal(path, content) {
  const res = moonbitlang$x$fs$$write_file_ffi(path, content);
  if (res === -1) {
    return new Result$Err$39$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  } else {
    return new Result$Ok$39$(undefined);
  }
}
function moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding) {
  if (encoding === "utf8") {
    const bytes = moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(content, false);
    return moonbitlang$x$fs$$write_bytes_to_file_internal(path, bytes);
  } else {
    return new Result$Err$39$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${encoding}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$read_file_to_bytes(path) {
  return moonbitlang$x$fs$$read_file_to_bytes_internal(path);
}
function moonbitlang$x$fs$$read_file_to_string(path, encoding) {
  return moonbitlang$x$fs$$read_file_to_string_internal(path, encoding);
}
function moonbitlang$x$fs$$write_string_to_file(path, content, encoding) {
  return moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding);
}
function moonbitlang$ulex$main$util$$exit$4$(code) {
  moonbitlang$ulex$main$util$$ffi_exit(code);
  $panic();
}
function moonbitlang$ulex$main$util$$exit$190$(code) {
  moonbitlang$ulex$main$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$core$builtin$$Show$output$104$(_x_76, _x_77) {
  if (_x_76.$tag === 0) {
    const _InterpLit = _x_76;
    const _$42$arg_78 = _InterpLit._0;
    const _$42$arg_79 = _InterpLit._1;
    _x_77.method_0(_x_77.self, "InterpLit(");
    _x_77.method_0(_x_77.self, "repr=");
    moonbitlang$core$builtin$$Logger$write_object$0$(_x_77, _$42$arg_78);
    _x_77.method_0(_x_77.self, ", ");
    _x_77.method_0(_x_77.self, "loc=");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_77, _$42$arg_79);
    _x_77.method_0(_x_77.self, ")");
    return;
  } else {
    const _InterpSource = _x_76;
    const _$42$arg_80 = _InterpSource._0;
    _x_77.method_0(_x_77.self, "InterpSource(");
    moonbitlang$core$builtin$$Logger$write_object$108$(_x_77, _$42$arg_80);
    _x_77.method_0(_x_77.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$108$(_x_62, _x_63) {
  _x_63.method_0(_x_63.self, "{");
  _x_63.method_0(_x_63.self, "source: ");
  moonbitlang$core$builtin$$Logger$write_object$0$(_x_63, _x_62.source);
  _x_63.method_0(_x_63.self, ", ");
  _x_63.method_0(_x_63.self, "loc: ");
  moonbitlang$core$builtin$$Logger$write_object$107$(_x_63, _x_62.loc);
  _x_63.method_0(_x_63.self, "}");
}
function moonbitlang$core$builtin$$Show$output$92$(_x_55, _x_56) {
  _x_56.method_0(_x_56.self, "{");
  _x_56.method_0(_x_56.self, "fname: ");
  moonbitlang$core$builtin$$Logger$write_object$0$(_x_56, _x_55.fname);
  _x_56.method_0(_x_56.self, ", ");
  _x_56.method_0(_x_56.self, "lnum: ");
  moonbitlang$core$builtin$$Logger$write_object$8$(_x_56, _x_55.lnum);
  _x_56.method_0(_x_56.self, ", ");
  _x_56.method_0(_x_56.self, "bol: ");
  moonbitlang$core$builtin$$Logger$write_object$8$(_x_56, _x_55.bol);
  _x_56.method_0(_x_56.self, ", ");
  _x_56.method_0(_x_56.self, "cnum: ");
  moonbitlang$core$builtin$$Logger$write_object$8$(_x_56, _x_55.cnum);
  _x_56.method_0(_x_56.self, "}");
}
function moonbitlang$core$builtin$$Show$output$96$(_x_48, _x_49) {
  _x_49.method_0(_x_49.self, "{");
  _x_49.method_0(_x_49.self, "content: ");
  moonbitlang$core$builtin$$Logger$write_object$0$(_x_49, _x_48.content);
  _x_49.method_0(_x_49.self, ", ");
  _x_49.method_0(_x_49.self, "kind: ");
  moonbitlang$core$builtin$$Logger$write_object$101$(_x_49, _x_48.kind);
  _x_49.method_0(_x_49.self, ", ");
  _x_49.method_0(_x_49.self, "consumed_by_docstring: ");
  moonbitlang$core$builtin$$Logger$write_object$102$(_x_49, _x_48.consumed_by_docstring);
  _x_49.method_0(_x_49.self, "}");
}
function moonbitlang$core$builtin$$Show$output$101$(_x_40, _x_41) {
  if (_x_40.$tag === 0) {
    _x_41.method_0(_x_41.self, "InlineTrailing");
    return;
  } else {
    const _Ownline = _x_40;
    const _$42$arg_42 = _Ownline._0;
    const _$42$arg_43 = _Ownline._1;
    _x_41.method_0(_x_41.self, "Ownline(");
    _x_41.method_0(_x_41.self, "leading_blank_line=");
    moonbitlang$core$builtin$$Logger$write_object$35$(_x_41, _$42$arg_42);
    _x_41.method_0(_x_41.self, ", ");
    _x_41.method_0(_x_41.self, "trailing_blank_line=");
    moonbitlang$core$builtin$$Logger$write_object$35$(_x_41, _$42$arg_43);
    _x_41.method_0(_x_41.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$107$(_x_36, _x_37) {
  _x_37.method_0(_x_37.self, "{");
  _x_37.method_0(_x_37.self, "start: ");
  moonbitlang$core$builtin$$Logger$write_object$92$(_x_37, _x_36.start);
  _x_37.method_0(_x_37.self, ", ");
  _x_37.method_0(_x_37.self, "end: ");
  moonbitlang$core$builtin$$Logger$write_object$92$(_x_37, _x_36.end);
  _x_37.method_0(_x_37.self, "}");
}
function moonbitlang$core$builtin$$Show$output$91$(_x_4, _x_5) {
  switch (_x_4.$tag) {
    case 0: {
      const _CHAR = _x_4;
      const _$42$arg_6 = _CHAR._0;
      _x_5.method_0(_x_5.self, "CHAR(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_6);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 1: {
      const _INT = _x_4;
      const _$42$arg_7 = _INT._0;
      _x_5.method_0(_x_5.self, "INT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_7);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 2: {
      const _BYTE = _x_4;
      const _$42$arg_8 = _BYTE._0;
      _x_5.method_0(_x_5.self, "BYTE(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_8);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 3: {
      const _BYTES = _x_4;
      const _$42$arg_9 = _BYTES._0;
      _x_5.method_0(_x_5.self, "BYTES(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_9);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 4: {
      const _FLOAT = _x_4;
      const _$42$arg_10 = _FLOAT._0;
      _x_5.method_0(_x_5.self, "FLOAT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_10);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 5: {
      const _STRING = _x_4;
      const _$42$arg_11 = _STRING._0;
      _x_5.method_0(_x_5.self, "STRING(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_11);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 6: {
      const _MULTILINE_STRING = _x_4;
      const _$42$arg_12 = _MULTILINE_STRING._0;
      _x_5.method_0(_x_5.self, "MULTILINE_STRING(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_12);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 7: {
      const _MULTILINE_INTERP = _x_4;
      const _$42$arg_13 = _MULTILINE_INTERP._0;
      _x_5.method_0(_x_5.self, "MULTILINE_INTERP(");
      moonbitlang$core$builtin$$Logger$write_object$2$(_x_5, _$42$arg_13);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 8: {
      const _INTERP = _x_4;
      const _$42$arg_14 = _INTERP._0;
      _x_5.method_0(_x_5.self, "INTERP(");
      moonbitlang$core$builtin$$Logger$write_object$2$(_x_5, _$42$arg_14);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 9: {
      const _ATTRIBUTE = _x_4;
      const _$42$arg_15 = _ATTRIBUTE._0;
      _x_5.method_0(_x_5.self, "ATTRIBUTE(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_15);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 10: {
      const _LIDENT = _x_4;
      const _$42$arg_16 = _LIDENT._0;
      _x_5.method_0(_x_5.self, "LIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_16);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 11: {
      const _UIDENT = _x_4;
      const _$42$arg_17 = _UIDENT._0;
      _x_5.method_0(_x_5.self, "UIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_17);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 12: {
      _x_5.method_0(_x_5.self, "LIDENT_LEX");
      return;
    }
    case 13: {
      _x_5.method_0(_x_5.self, "UIDENT_REGEX");
      return;
    }
    case 14: {
      const _POST_LABEL = _x_4;
      const _$42$arg_18 = _POST_LABEL._0;
      _x_5.method_0(_x_5.self, "POST_LABEL(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_18);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 15: {
      const _COMMENT = _x_4;
      const _$42$arg_19 = _COMMENT._0;
      _x_5.method_0(_x_5.self, "COMMENT(");
      moonbitlang$core$builtin$$Logger$write_object$96$(_x_5, _$42$arg_19);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 16: {
      _x_5.method_0(_x_5.self, "NEWLINE");
      return;
    }
    case 17: {
      const _INFIX1 = _x_4;
      const _$42$arg_20 = _INFIX1._0;
      _x_5.method_0(_x_5.self, "INFIX1(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_20);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 18: {
      const _INFIX2 = _x_4;
      const _$42$arg_21 = _INFIX2._0;
      _x_5.method_0(_x_5.self, "INFIX2(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_21);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 19: {
      const _INFIX3 = _x_4;
      const _$42$arg_22 = _INFIX3._0;
      _x_5.method_0(_x_5.self, "INFIX3(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_22);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 20: {
      const _INFIX4 = _x_4;
      const _$42$arg_23 = _INFIX4._0;
      _x_5.method_0(_x_5.self, "INFIX4(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_23);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 21: {
      const _AUGMENTED_ASSIGNMENT = _x_4;
      const _$42$arg_24 = _AUGMENTED_ASSIGNMENT._0;
      _x_5.method_0(_x_5.self, "AUGMENTED_ASSIGNMENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_24);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 22: {
      _x_5.method_0(_x_5.self, "EOF");
      return;
    }
    case 23: {
      _x_5.method_0(_x_5.self, "FALSE");
      return;
    }
    case 24: {
      _x_5.method_0(_x_5.self, "TRUE");
      return;
    }
    case 25: {
      _x_5.method_0(_x_5.self, "PUB");
      return;
    }
    case 26: {
      _x_5.method_0(_x_5.self, "PRIV");
      return;
    }
    case 27: {
      _x_5.method_0(_x_5.self, "READONLY");
      return;
    }
    case 28: {
      _x_5.method_0(_x_5.self, "IMPORT");
      return;
    }
    case 29: {
      _x_5.method_0(_x_5.self, "EXTERN");
      return;
    }
    case 30: {
      _x_5.method_0(_x_5.self, "BREAK");
      return;
    }
    case 31: {
      _x_5.method_0(_x_5.self, "CONTINUE");
      return;
    }
    case 32: {
      _x_5.method_0(_x_5.self, "STRUCT");
      return;
    }
    case 33: {
      _x_5.method_0(_x_5.self, "ENUM");
      return;
    }
    case 34: {
      _x_5.method_0(_x_5.self, "TRAIT");
      return;
    }
    case 35: {
      _x_5.method_0(_x_5.self, "DERIVE");
      return;
    }
    case 36: {
      _x_5.method_0(_x_5.self, "IMPL");
      return;
    }
    case 37: {
      _x_5.method_0(_x_5.self, "WITH");
      return;
    }
    case 38: {
      _x_5.method_0(_x_5.self, "RAISE");
      return;
    }
    case 39: {
      _x_5.method_0(_x_5.self, "THROW");
      return;
    }
    case 40: {
      _x_5.method_0(_x_5.self, "TRY");
      return;
    }
    case 41: {
      _x_5.method_0(_x_5.self, "CATCH");
      return;
    }
    case 42: {
      _x_5.method_0(_x_5.self, "ASYNC");
      return;
    }
    case 43: {
      _x_5.method_0(_x_5.self, "TYPEALIAS");
      return;
    }
    case 44: {
      _x_5.method_0(_x_5.self, "TRAITALIAS");
      return;
    }
    case 45: {
      _x_5.method_0(_x_5.self, "FNALIAS");
      return;
    }
    case 46: {
      _x_5.method_0(_x_5.self, "EQUAL");
      return;
    }
    case 47: {
      _x_5.method_0(_x_5.self, "LPAREN");
      return;
    }
    case 48: {
      _x_5.method_0(_x_5.self, "RPAREN");
      return;
    }
    case 49: {
      _x_5.method_0(_x_5.self, "COMMA");
      return;
    }
    case 50: {
      _x_5.method_0(_x_5.self, "MINUS");
      return;
    }
    case 51: {
      _x_5.method_0(_x_5.self, "QUESTION");
      return;
    }
    case 52: {
      _x_5.method_0(_x_5.self, "EXCLAMATION");
      return;
    }
    case 53: {
      const _DOT_LIDENT = _x_4;
      const _$42$arg_25 = _DOT_LIDENT._0;
      _x_5.method_0(_x_5.self, "DOT_LIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_25);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 54: {
      const _DOT_UIDENT = _x_4;
      const _$42$arg_26 = _DOT_UIDENT._0;
      _x_5.method_0(_x_5.self, "DOT_UIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_26);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 55: {
      const _DOT_INT = _x_4;
      const _$42$arg_27 = _DOT_INT._0;
      _x_5.method_0(_x_5.self, "DOT_INT(");
      moonbitlang$core$builtin$$Logger$write_object$8$(_x_5, _$42$arg_27);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 56: {
      _x_5.method_0(_x_5.self, "DOT_LPAREN");
      return;
    }
    case 57: {
      _x_5.method_0(_x_5.self, "COLONCOLON");
      return;
    }
    case 58: {
      _x_5.method_0(_x_5.self, "COLON");
      return;
    }
    case 59: {
      const _SEMI = _x_4;
      const _$42$arg_28 = _SEMI._0;
      _x_5.method_0(_x_5.self, "SEMI(");
      moonbitlang$core$builtin$$Logger$write_object$35$(_x_5, _$42$arg_28);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 60: {
      _x_5.method_0(_x_5.self, "LBRACKET");
      return;
    }
    case 61: {
      _x_5.method_0(_x_5.self, "PLUS");
      return;
    }
    case 62: {
      _x_5.method_0(_x_5.self, "RBRACKET");
      return;
    }
    case 63: {
      _x_5.method_0(_x_5.self, "UNDERSCORE");
      return;
    }
    case 64: {
      _x_5.method_0(_x_5.self, "BAR");
      return;
    }
    case 65: {
      _x_5.method_0(_x_5.self, "LBRACE");
      return;
    }
    case 66: {
      _x_5.method_0(_x_5.self, "RBRACE");
      return;
    }
    case 67: {
      _x_5.method_0(_x_5.self, "AMPERAMPER");
      return;
    }
    case 68: {
      _x_5.method_0(_x_5.self, "AMPER");
      return;
    }
    case 69: {
      _x_5.method_0(_x_5.self, "CARET");
      return;
    }
    case 70: {
      _x_5.method_0(_x_5.self, "BARBAR");
      return;
    }
    case 71: {
      const _PACKAGE_NAME = _x_4;
      const _$42$arg_29 = _PACKAGE_NAME._0;
      _x_5.method_0(_x_5.self, "PACKAGE_NAME(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_29);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 72: {
      _x_5.method_0(_x_5.self, "AS");
      return;
    }
    case 73: {
      _x_5.method_0(_x_5.self, "PIPE");
      return;
    }
    case 74: {
      _x_5.method_0(_x_5.self, "ELSE");
      return;
    }
    case 75: {
      _x_5.method_0(_x_5.self, "FN");
      return;
    }
    case 76: {
      _x_5.method_0(_x_5.self, "IF");
      return;
    }
    case 77: {
      _x_5.method_0(_x_5.self, "LET");
      return;
    }
    case 78: {
      _x_5.method_0(_x_5.self, "CONST");
      return;
    }
    case 79: {
      _x_5.method_0(_x_5.self, "MATCH");
      return;
    }
    case 80: {
      _x_5.method_0(_x_5.self, "MUTABLE");
      return;
    }
    case 81: {
      _x_5.method_0(_x_5.self, "TYPE");
      return;
    }
    case 82: {
      _x_5.method_0(_x_5.self, "FAT_ARROW");
      return;
    }
    case 83: {
      _x_5.method_0(_x_5.self, "THIN_ARROW");
      return;
    }
    case 84: {
      _x_5.method_0(_x_5.self, "WHILE");
      return;
    }
    case 85: {
      _x_5.method_0(_x_5.self, "RETURN");
      return;
    }
    case 86: {
      _x_5.method_0(_x_5.self, "DOTDOT");
      return;
    }
    case 87: {
      _x_5.method_0(_x_5.self, "RANGE_INCLUSIVE");
      return;
    }
    case 88: {
      _x_5.method_0(_x_5.self, "RANGE_EXCLUSIVE");
      return;
    }
    case 89: {
      _x_5.method_0(_x_5.self, "ELLIPSIS");
      return;
    }
    case 90: {
      _x_5.method_0(_x_5.self, "TEST");
      return;
    }
    case 91: {
      _x_5.method_0(_x_5.self, "LOOP");
      return;
    }
    case 92: {
      _x_5.method_0(_x_5.self, "GUARD");
      return;
    }
    case 93: {
      _x_5.method_0(_x_5.self, "FOR");
      return;
    }
    case 94: {
      _x_5.method_0(_x_5.self, "IN");
      return;
    }
    default: {
      _x_5.method_0(_x_5.self, "IS");
      return;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$97$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "CHAR";
      break;
    }
    case 1: {
      _tmp = "INT";
      break;
    }
    case 2: {
      _tmp = "BYTE";
      break;
    }
    case 3: {
      _tmp = "BYTES";
      break;
    }
    case 4: {
      _tmp = "FLOAT";
      break;
    }
    case 5: {
      _tmp = "STRING";
      break;
    }
    case 6: {
      _tmp = "MULTILINE_STRING";
      break;
    }
    case 7: {
      _tmp = "MULTILINE_INTERP";
      break;
    }
    case 8: {
      _tmp = "INTERP";
      break;
    }
    case 9: {
      _tmp = "ATTRIBUTE";
      break;
    }
    case 10: {
      _tmp = "LIDENT";
      break;
    }
    case 11: {
      _tmp = "UIDENT";
      break;
    }
    case 12: {
      _tmp = "\"lex\"";
      break;
    }
    case 13: {
      _tmp = "\"Regex\"";
      break;
    }
    case 14: {
      _tmp = "POST_LABEL";
      break;
    }
    case 15: {
      _tmp = "COMMENT";
      break;
    }
    case 16: {
      _tmp = "NEWLINE";
      break;
    }
    case 17: {
      _tmp = "INFIX1";
      break;
    }
    case 18: {
      _tmp = "INFIX2";
      break;
    }
    case 19: {
      _tmp = "INFIX3";
      break;
    }
    case 20: {
      _tmp = "INFIX4";
      break;
    }
    case 21: {
      _tmp = "AUGMENTED_ASSIGNMENT";
      break;
    }
    case 22: {
      _tmp = "EOF";
      break;
    }
    case 23: {
      _tmp = "FALSE";
      break;
    }
    case 24: {
      _tmp = "TRUE";
      break;
    }
    case 25: {
      _tmp = "\"pub\"";
      break;
    }
    case 26: {
      _tmp = "\"priv\"";
      break;
    }
    case 27: {
      _tmp = "\"readonly\"";
      break;
    }
    case 28: {
      _tmp = "\"import\"";
      break;
    }
    case 29: {
      _tmp = "\"extern\"";
      break;
    }
    case 30: {
      _tmp = "\"break\"";
      break;
    }
    case 31: {
      _tmp = "\"continue\"";
      break;
    }
    case 32: {
      _tmp = "\"struct\"";
      break;
    }
    case 33: {
      _tmp = "\"enum\"";
      break;
    }
    case 34: {
      _tmp = "\"trait\"";
      break;
    }
    case 35: {
      _tmp = "\"derive\"";
      break;
    }
    case 36: {
      _tmp = "\"impl\"";
      break;
    }
    case 37: {
      _tmp = "\"with\"";
      break;
    }
    case 38: {
      _tmp = "\"raise\"";
      break;
    }
    case 39: {
      _tmp = "\"throw\"";
      break;
    }
    case 40: {
      _tmp = "\"try\"";
      break;
    }
    case 41: {
      _tmp = "\"catch\"";
      break;
    }
    case 42: {
      _tmp = "\"async\"";
      break;
    }
    case 43: {
      _tmp = "\"typealias\"";
      break;
    }
    case 44: {
      _tmp = "\"traitalias\"";
      break;
    }
    case 45: {
      _tmp = "\"fnalias\"";
      break;
    }
    case 46: {
      _tmp = "\"=\"";
      break;
    }
    case 47: {
      _tmp = "\"(\"";
      break;
    }
    case 48: {
      _tmp = "\")\"";
      break;
    }
    case 49: {
      _tmp = "\",\"";
      break;
    }
    case 50: {
      _tmp = "\"-\"";
      break;
    }
    case 51: {
      _tmp = "\"?\"";
      break;
    }
    case 52: {
      _tmp = "\"!\"";
      break;
    }
    case 53: {
      _tmp = "DOT_LIDENT";
      break;
    }
    case 54: {
      _tmp = "DOT_UIDENT";
      break;
    }
    case 55: {
      _tmp = "DOT_INT";
      break;
    }
    case 56: {
      _tmp = "\".(\"";
      break;
    }
    case 57: {
      _tmp = "\"::\"";
      break;
    }
    case 58: {
      _tmp = "\":\"";
      break;
    }
    case 59: {
      _tmp = "\";\"";
      break;
    }
    case 60: {
      _tmp = "\"[\"";
      break;
    }
    case 61: {
      _tmp = "\"+\"";
      break;
    }
    case 62: {
      _tmp = "\"]\"";
      break;
    }
    case 63: {
      _tmp = "\"_\"";
      break;
    }
    case 64: {
      _tmp = "\"|\"";
      break;
    }
    case 65: {
      _tmp = "\"{\"";
      break;
    }
    case 66: {
      _tmp = "\"}\"";
      break;
    }
    case 67: {
      _tmp = "\"&&\"";
      break;
    }
    case 68: {
      _tmp = "\"&\"";
      break;
    }
    case 69: {
      _tmp = "\"^\"";
      break;
    }
    case 70: {
      _tmp = "\"||\"";
      break;
    }
    case 71: {
      _tmp = "PACKAGE_NAME";
      break;
    }
    case 72: {
      _tmp = "\"as\"";
      break;
    }
    case 73: {
      _tmp = "\"|>\"";
      break;
    }
    case 74: {
      _tmp = "\"else\"";
      break;
    }
    case 75: {
      _tmp = "\"fn\"";
      break;
    }
    case 76: {
      _tmp = "\"if\"";
      break;
    }
    case 77: {
      _tmp = "\"let\"";
      break;
    }
    case 78: {
      _tmp = "\"const\"";
      break;
    }
    case 79: {
      _tmp = "\"match\"";
      break;
    }
    case 80: {
      _tmp = "\"mut\"";
      break;
    }
    case 81: {
      _tmp = "\"type\"";
      break;
    }
    case 82: {
      _tmp = "\"=>\"";
      break;
    }
    case 83: {
      _tmp = "\"->\"";
      break;
    }
    case 84: {
      _tmp = "\"while\"";
      break;
    }
    case 85: {
      _tmp = "\"return\"";
      break;
    }
    case 86: {
      _tmp = "\"..\"";
      break;
    }
    case 87: {
      _tmp = "\"..=\"";
      break;
    }
    case 88: {
      _tmp = "\"..<\"";
      break;
    }
    case 89: {
      _tmp = "\"...\"";
      break;
    }
    case 90: {
      _tmp = "\"test\"";
      break;
    }
    case 91: {
      _tmp = "\"loop\"";
      break;
    }
    case 92: {
      _tmp = "\"guard\"";
      break;
    }
    case 93: {
      _tmp = "\"for\"";
      break;
    }
    case 94: {
      _tmp = "\"in\"";
      break;
    }
    default: {
      _tmp = "\"is\"";
    }
  }
  logger.method_0(logger.self, _tmp);
}
function moonbitlang$ulex$lib$new_frontend$lexer$$digit_value(c) {
  if (c >= 97 && c <= 102) {
    const _tmp = (c >>> 0) + (10 >>> 0) | 0;
    const _p = 97;
    return (_tmp >>> 0) - (_p >>> 0) | 0;
  } else {
    if (c >= 65 && c <= 70) {
      const _tmp = (c >>> 0) + (10 >>> 0) | 0;
      const _p = 65;
      return (_tmp >>> 0) - (_p >>> 0) | 0;
    } else {
      if (c >= 48 && c <= 57) {
        const _p = 48;
        return (c >>> 0) - (_p >>> 0) | 0;
      } else {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$char_for_hex_escape(hex) {
  const codep = { val: 0 };
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$40$ };
  const _bind = moonbitlang$core$string$$String$iter(hex);
  _bind((c) => {
    const digit = moonbitlang$ulex$lib$new_frontend$lexer$$digit_value(c);
    codep.val = ((Math.imul(codep.val, 16) | 0) >>> 0) + (digit >>> 0) | 0;
    if (codep.val >>> 0 > 1114111 >>> 0) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$40$(undefined);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return codep.val;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, cnum) {
  const _bind = self.file;
  const _bind$2 = self.current_line;
  const _bind$3 = self.start_cnum + cnum | 0;
  const _bind$4 = self.current_bol;
  return { fname: _bind, lnum: _bind$2, bol: _bind$4, cnum: _bind$3 };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(self, start, end, err) {
  const loc_start = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, start);
  const loc_end = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, end);
  moonbitlang$core$array$$Array$push$159$(self.errors, { _0: loc_start, _1: loc_end, _2: err });
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(self, start, end) {
  _L: {
    const _bind = moonbitlang$core$bytes$$Bytes$op_as_view(self.content, start, end);
    if (_bind.len === 1) {
      const _x = _bind.bytes[_bind.start];
      if (_x >= 0 && _x <= 127) {
        return _x;
      } else {
        break _L;
      }
    } else {
      if (_bind.len === 2) {
        const _x = _bind.bytes[_bind.start];
        if (_x >= 192 && _x <= 223) {
          const _x$2 = _bind.bytes[_bind.start + 1 | 0];
          if (_x$2 >= 128 && _x$2 <= 191) {
            return (_x & 31) << 6 | _x$2 & 63;
          } else {
            break _L;
          }
        } else {
          break _L;
        }
      } else {
        if (_bind.len === 3) {
          const _x = _bind.bytes[_bind.start];
          if (_x >= 224 && _x <= 239) {
            const _x$2 = _bind.bytes[_bind.start + 1 | 0];
            if (_x$2 >= 128 && _x$2 <= 191) {
              const _x$3 = _bind.bytes[_bind.start + 2 | 0];
              if (_x$3 >= 128 && _x$3 <= 191) {
                return (_x & 15) << 12 | (_x$2 & 63) << 6 | _x$3 & 63;
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        } else {
          if (_bind.len === 4) {
            const _x = _bind.bytes[_bind.start];
            if (_x >= 240 && _x <= 247) {
              const _x$2 = _bind.bytes[_bind.start + 1 | 0];
              if (_x$2 >= 128 && _x$2 <= 191) {
                const _x$3 = _bind.bytes[_bind.start + 2 | 0];
                if (_x$3 >= 128 && _x$3 <= 191) {
                  const _x$4 = _bind.bytes[_bind.start + 3 | 0];
                  if (_x$4 >= 128 && _x$4 <= 191) {
                    return (_x & 7) << 18 | (_x$2 & 63) << 12 | (_x$3 & 63) << 6 | _x$4 & 63;
                  } else {
                    break _L;
                  }
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        }
      }
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(self) {
  const pos = self.pos;
  const end = self.end;
  if (pos < end) {
    const c = self.content[pos];
    self.pos = self.pos + 1 | 0;
    return c;
  }
  return -1;
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$lib$new_frontend$lexer$$interp_handle(lexbuf, env) {
  _L: while (true) {
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp = 0;
    _L$2: while (true) {
      const _param = _tmp;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind === -1) {
            _tmp = 1;
          } else {
            if (_bind >= 0 && _bind <= 8) {
              _tmp = 2;
            } else {
              if (_bind === 9) {
                _tmp = 3;
              } else {
                if (_bind === 10) {
                  _tmp = 4;
                } else {
                  if (_bind >= 11 && _bind <= 12) {
                    _tmp = 3;
                  } else {
                    if (_bind === 13) {
                      _tmp = 4;
                    } else {
                      if (_bind >= 14 && _bind <= 31) {
                        _tmp = 2;
                      } else {
                        if (_bind === 32) {
                          _tmp = 3;
                        } else {
                          if (_bind === 33) {
                            _tmp = 2;
                          } else {
                            if (_bind === 34) {
                              _tmp = 5;
                            } else {
                              if (_bind >= 35 && _bind <= 122) {
                                _tmp = 2;
                              } else {
                                if (_bind === 123) {
                                  _tmp = 5;
                                } else {
                                  if (_bind === 124) {
                                    _tmp = 2;
                                  } else {
                                    if (_bind === 125) {
                                      _tmp = 6;
                                    } else {
                                      if (_bind >= 126 && _bind <= 127) {
                                        _tmp = 2;
                                      } else {
                                        if (_bind === 194) {
                                          _tmp = 7;
                                        } else {
                                          if (_bind >= 195 && _bind <= 223) {
                                            _tmp = 8;
                                          } else {
                                            if (_bind === 224) {
                                              _tmp = 9;
                                            } else {
                                              if (_bind === 225) {
                                                _tmp = 10;
                                              } else {
                                                if (_bind === 226) {
                                                  _tmp = 11;
                                                } else {
                                                  if (_bind === 227) {
                                                    _tmp = 12;
                                                  } else {
                                                    if (_bind >= 228 && _bind <= 236) {
                                                      _tmp = 9;
                                                    } else {
                                                      if (_bind === 237) {
                                                        _tmp = 13;
                                                      } else {
                                                        if (_bind === 238) {
                                                          _tmp = 9;
                                                        } else {
                                                          if (_bind === 239) {
                                                            _tmp = 14;
                                                          } else {
                                                            if (_bind === 240) {
                                                              _tmp = 15;
                                                            } else {
                                                              if (_bind >= 241 && _bind <= 244) {
                                                                _tmp = 16;
                                                              } else {
                                                                break _L$2;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 1;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 2: {
          _match_pattern = 4;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 3: {
          _match_pattern = 4;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$2 === 9) {
            _tmp = 22;
          } else {
            if (_bind$2 >= 11 && _bind$2 <= 12) {
              _tmp = 22;
            } else {
              if (_bind$2 === 32) {
                _tmp = 22;
              } else {
                if (_bind$2 === 125) {
                  _tmp = 6;
                } else {
                  if (_bind$2 === 194) {
                    _tmp = 23;
                  } else {
                    if (_bind$2 === 225) {
                      _tmp = 24;
                    } else {
                      if (_bind$2 === 226) {
                        _tmp = 25;
                      } else {
                        if (_bind$2 === 227) {
                          _tmp = 26;
                        } else {
                          if (_bind$2 === 239) {
                            _tmp = 27;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 4: {
          _match_pattern = 2;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 5: {
          _match_pattern = 5;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 6: {
          _match_pattern = 0;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 7: {
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$3 >= 128 && _bind$3 <= 159) {
            _tmp = 2;
          } else {
            if (_bind$3 === 160) {
              _tmp = 3;
            } else {
              if (_bind$3 >= 161 && _bind$3 <= 191) {
                _tmp = 2;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 8: {
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$4 >= 128 && _bind$4 <= 191) {
            _tmp = 2;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 9: {
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$5 >= 128 && _bind$5 <= 191) {
            _tmp = 8;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 10: {
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$6 >= 128 && _bind$6 <= 153) {
            _tmp = 8;
          } else {
            if (_bind$6 === 154) {
              _tmp = 19;
            } else {
              if (_bind$6 >= 155 && _bind$6 <= 191) {
                _tmp = 8;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 11: {
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$7 === 128) {
            _tmp = 20;
          } else {
            if (_bind$7 === 129) {
              _tmp = 21;
            } else {
              if (_bind$7 >= 130 && _bind$7 <= 191) {
                _tmp = 8;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 12: {
          const _bind$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$8 === 128) {
            _tmp = 19;
          } else {
            if (_bind$8 >= 129 && _bind$8 <= 191) {
              _tmp = 8;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 13: {
          const _bind$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$9 >= 128 && _bind$9 <= 159) {
            _tmp = 8;
          } else {
            if (_bind$9 >= 160 && _bind$9 <= 191) {
              _tmp = 17;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 14: {
          const _bind$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$10 >= 128 && _bind$10 <= 186) {
            _tmp = 8;
          } else {
            if (_bind$10 === 187) {
              _tmp = 18;
            } else {
              if (_bind$10 >= 188 && _bind$10 <= 191) {
                _tmp = 8;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 15: {
          const _bind$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$11 >= 144 && _bind$11 <= 191) {
            _tmp = 9;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 16: {
          const _bind$12 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$12 >= 128 && _bind$12 <= 191) {
            _tmp = 9;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 17: {
          const _bind$13 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$13 >= 128 && _bind$13 <= 191) {
            _tmp = 5;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 18: {
          const _bind$14 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$14 >= 128 && _bind$14 <= 190) {
            _tmp = 2;
          } else {
            if (_bind$14 === 191) {
              _tmp = 3;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 19: {
          const _bind$15 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$15 === 128) {
            _tmp = 3;
          } else {
            if (_bind$15 >= 129 && _bind$15 <= 191) {
              _tmp = 2;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 20: {
          const _bind$16 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$16 >= 128 && _bind$16 <= 138) {
            _tmp = 3;
          } else {
            if (_bind$16 >= 139 && _bind$16 <= 174) {
              _tmp = 2;
            } else {
              if (_bind$16 === 175) {
                _tmp = 3;
              } else {
                if (_bind$16 >= 176 && _bind$16 <= 191) {
                  _tmp = 2;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 21: {
          const _bind$17 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$17 >= 128 && _bind$17 <= 158) {
            _tmp = 2;
          } else {
            if (_bind$17 === 159) {
              _tmp = 3;
            } else {
              if (_bind$17 >= 160 && _bind$17 <= 191) {
                _tmp = 2;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 22: {
          const _bind$18 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$18 === 9) {
            _tmp = 22;
          } else {
            if (_bind$18 >= 11 && _bind$18 <= 12) {
              _tmp = 22;
            } else {
              if (_bind$18 === 32) {
                _tmp = 22;
              } else {
                if (_bind$18 === 125) {
                  _tmp = 6;
                } else {
                  if (_bind$18 === 194) {
                    _tmp = 23;
                  } else {
                    if (_bind$18 === 225) {
                      _tmp = 24;
                    } else {
                      if (_bind$18 === 226) {
                        _tmp = 25;
                      } else {
                        if (_bind$18 === 227) {
                          _tmp = 26;
                        } else {
                          if (_bind$18 === 239) {
                            _tmp = 27;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 23: {
          const _bind$19 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$19 === 160) {
            _tmp = 22;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 24: {
          const _bind$20 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$20 === 154) {
            _tmp = 29;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 25: {
          const _bind$21 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$21) {
            case 128: {
              _tmp = 30;
              break;
            }
            case 129: {
              _tmp = 31;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 26: {
          const _bind$22 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$22 === 128) {
            _tmp = 29;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 27: {
          const _bind$23 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$23 === 187) {
            _tmp = 28;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 28: {
          const _bind$24 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$24 === 191) {
            _tmp = 22;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 29: {
          const _bind$25 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$25 === 128) {
            _tmp = 22;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 30: {
          const _bind$26 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$26 >= 128 && _bind$26 <= 138) {
            _tmp = 22;
          } else {
            if (_bind$26 === 175) {
              _tmp = 22;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 31: {
          const _bind$27 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$27 === 159) {
            _tmp = 22;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 5) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          return _match_start;
        }
        case 1: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString);
          return _match_start;
        }
        case 2: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedStringInVariableInterploation);
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, _match_start);
          return _match_start;
        }
        case 3: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedStringInVariableInterploation);
          return _match_start;
        }
        case 4: {
          const c = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, c);
          continue _L;
        }
        case 5: {
          const c$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter(c$2));
          continue _L;
        }
        default: {
          return $panic();
        }
      }
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(self, start, end) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  const _bind = moonbitlang$core$bytes$$Bytes$op_as_view(self.content, start, end);
  let _tmp = _bind.bytes;
  let _tmp$2 = _bind.start;
  let _tmp$3 = _bind.len;
  while (true) {
    const _param_bytes = _tmp;
    const _param_start = _tmp$2;
    const _param_len = _tmp$3;
    let next;
    _L: {
      if (_param_len >= 1) {
        const _x = _param_bytes[_param_start];
        if (_x >= 0 && _x <= 127) {
          const _bind$2 = _param_start + 1 | 0;
          const _bind$3 = _param_len - 1 | 0;
          moonbitlang$core$builtin$$Logger$write_char$38$(buf, _x);
          _tmp$2 = _bind$2;
          _tmp$3 = _bind$3;
          continue;
        } else {
          if (_param_len >= 2) {
            if (_x >= 192 && _x <= 223) {
              const _x$2 = _param_bytes[_param_start + 1 | 0];
              if (_x$2 >= 128 && _x$2 <= 191) {
                const _bind$2 = _param_start + 2 | 0;
                const _bind$3 = _param_len - 2 | 0;
                moonbitlang$core$builtin$$Logger$write_char$38$(buf, (_x & 31) << 6 | _x$2 & 63);
                _tmp$2 = _bind$2;
                _tmp$3 = _bind$3;
                continue;
              } else {
                if (_param_len >= 3) {
                  if (_param_len >= 4) {
                    const _x$3 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                    next = _x$3;
                    break _L;
                  } else {
                    const _x$3 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                    next = _x$3;
                    break _L;
                  }
                } else {
                  const _x$3 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                  next = _x$3;
                  break _L;
                }
              }
            } else {
              if (_param_len >= 3) {
                if (_x >= 224 && _x <= 239) {
                  const _x$2 = _param_bytes[_param_start + 1 | 0];
                  if (_x$2 >= 128 && _x$2 <= 191) {
                    const _x$3 = _param_bytes[_param_start + 2 | 0];
                    if (_x$3 >= 128 && _x$3 <= 191) {
                      const _bind$2 = _param_start + 3 | 0;
                      const _bind$3 = _param_len - 3 | 0;
                      moonbitlang$core$builtin$$Logger$write_char$38$(buf, (_x & 15) << 12 | (_x$2 & 63) << 6 | _x$3 & 63);
                      _tmp$2 = _bind$2;
                      _tmp$3 = _bind$3;
                      continue;
                    } else {
                      if (_param_len >= 4) {
                        const _x$4 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                        next = _x$4;
                        break _L;
                      } else {
                        const _x$4 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                        next = _x$4;
                        break _L;
                      }
                    }
                  } else {
                    if (_param_len >= 4) {
                      const _x$3 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                      next = _x$3;
                      break _L;
                    } else {
                      const _x$3 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                      next = _x$3;
                      break _L;
                    }
                  }
                } else {
                  if (_param_len >= 4) {
                    if (_x >= 240 && _x <= 247) {
                      const _x$2 = _param_bytes[_param_start + 1 | 0];
                      if (_x$2 >= 128 && _x$2 <= 191) {
                        const _x$3 = _param_bytes[_param_start + 2 | 0];
                        if (_x$3 >= 128 && _x$3 <= 191) {
                          const _x$4 = _param_bytes[_param_start + 3 | 0];
                          if (_x$4 >= 128 && _x$4 <= 191) {
                            const _bind$2 = _param_start + 4 | 0;
                            const _bind$3 = _param_len - 4 | 0;
                            moonbitlang$core$builtin$$Logger$write_char$38$(buf, (_x & 7) << 18 | (_x$2 & 63) << 12 | (_x$3 & 63) << 6 | _x$4 & 63);
                            _tmp$2 = _bind$2;
                            _tmp$3 = _bind$3;
                            continue;
                          } else {
                            const _x$5 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                            next = _x$5;
                            break _L;
                          }
                        } else {
                          const _x$4 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                          next = _x$4;
                          break _L;
                        }
                      } else {
                        const _x$3 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                        next = _x$3;
                        break _L;
                      }
                    } else {
                      const _x$2 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                      next = _x$2;
                      break _L;
                    }
                  } else {
                    const _x$2 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                    next = _x$2;
                    break _L;
                  }
                }
              } else {
                const _x$2 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
                next = _x$2;
                break _L;
              }
            }
          } else {
            const _x$2 = { bytes: _param_bytes, start: _param_start + 1 | 0, len: _param_len - 1 | 0 };
            next = _x$2;
            break _L;
          }
        }
      } else {
        break;
      }
    }
    _tmp = next.bytes;
    _tmp$2 = next.start;
    _tmp$3 = next.len;
    continue;
  }
  return buf.val;
}
function moonbitlang$ulex$lib$new_frontend$lexer$$normal(lexbuf, env, end_with_newline, allow_interp, startpos) {
  _L: while (true) {
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp = 0;
    _L$2: while (true) {
      const _param = _tmp;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind === -1) {
            _tmp = 1;
          } else {
            if (_bind >= 0 && _bind <= 12) {
              _tmp = 2;
            } else {
              if (_bind === 13) {
                _tmp = 3;
              } else {
                if (_bind >= 14 && _bind <= 33) {
                  _tmp = 2;
                } else {
                  if (_bind === 34) {
                    _tmp = 4;
                  } else {
                    if (_bind >= 35 && _bind <= 91) {
                      _tmp = 2;
                    } else {
                      if (_bind === 92) {
                        _tmp = 5;
                      } else {
                        if (_bind >= 93 && _bind <= 127) {
                          _tmp = 2;
                        } else {
                          if (_bind >= 194 && _bind <= 223) {
                            _tmp = 6;
                          } else {
                            if (_bind >= 224 && _bind <= 239) {
                              _tmp = 7;
                            } else {
                              if (_bind === 240) {
                                _tmp = 8;
                              } else {
                                if (_bind >= 241 && _bind <= 244) {
                                  _tmp = 9;
                                } else {
                                  break _L$2;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 11;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 2: {
          _match_pattern = 13;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 3: {
          _match_pattern = 13;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$2 === 10) {
            _tmp = 20;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 4: {
          _match_pattern = 0;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 5: {
          _match_pattern = 13;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$3 >= 0 && _bind$3 <= 31) {
            _tmp = 10;
          } else {
            if (_bind$3 === 32) {
              _tmp = 11;
            } else {
              if (_bind$3 === 33) {
                _tmp = 10;
              } else {
                if (_bind$3 === 34) {
                  _tmp = 11;
                } else {
                  if (_bind$3 >= 35 && _bind$3 <= 38) {
                    _tmp = 10;
                  } else {
                    if (_bind$3 === 39) {
                      _tmp = 11;
                    } else {
                      if (_bind$3 >= 40 && _bind$3 <= 91) {
                        _tmp = 10;
                      } else {
                        if (_bind$3 === 92) {
                          _tmp = 11;
                        } else {
                          if (_bind$3 >= 93 && _bind$3 <= 97) {
                            _tmp = 10;
                          } else {
                            if (_bind$3 === 98) {
                              _tmp = 11;
                            } else {
                              if (_bind$3 >= 99 && _bind$3 <= 109) {
                                _tmp = 10;
                              } else {
                                if (_bind$3 === 110) {
                                  _tmp = 11;
                                } else {
                                  if (_bind$3 === 111) {
                                    _tmp = 12;
                                  } else {
                                    if (_bind$3 >= 112 && _bind$3 <= 113) {
                                      _tmp = 10;
                                    } else {
                                      if (_bind$3 === 114) {
                                        _tmp = 11;
                                      } else {
                                        if (_bind$3 === 115) {
                                          _tmp = 10;
                                        } else {
                                          if (_bind$3 === 116) {
                                            _tmp = 11;
                                          } else {
                                            if (_bind$3 === 117) {
                                              _tmp = 13;
                                            } else {
                                              if (_bind$3 >= 118 && _bind$3 <= 119) {
                                                _tmp = 10;
                                              } else {
                                                if (_bind$3 === 120) {
                                                  _tmp = 14;
                                                } else {
                                                  if (_bind$3 >= 121 && _bind$3 <= 122) {
                                                    _tmp = 10;
                                                  } else {
                                                    if (_bind$3 === 123) {
                                                      _tmp = 15;
                                                    } else {
                                                      if (_bind$3 >= 124 && _bind$3 <= 127) {
                                                        _tmp = 10;
                                                      } else {
                                                        if (_bind$3 >= 194 && _bind$3 <= 223) {
                                                          _tmp = 16;
                                                        } else {
                                                          if (_bind$3 >= 224 && _bind$3 <= 239) {
                                                            _tmp = 17;
                                                          } else {
                                                            if (_bind$3 === 240) {
                                                              _tmp = 18;
                                                            } else {
                                                              if (_bind$3 >= 241 && _bind$3 <= 244) {
                                                                _tmp = 19;
                                                              } else {
                                                                break _L$2;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 6: {
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$4 >= 128 && _bind$4 <= 191) {
            _tmp = 2;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 7: {
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$5 >= 128 && _bind$5 <= 191) {
            _tmp = 6;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 8: {
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$6 >= 144 && _bind$6 <= 191) {
            _tmp = 7;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 9: {
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$7 >= 128 && _bind$7 <= 191) {
            _tmp = 7;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 10: {
          _match_pattern = 10;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 11: {
          _match_pattern = 1;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 2 | 0;
          break _L$2;
        }
        case 12: {
          _match_pattern = 10;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$8 >= 0 && _bind$8 <= 47) {
            _tmp = 28;
          } else {
            if (_bind$8 >= 48 && _bind$8 <= 51) {
              _tmp = 29;
            } else {
              if (_bind$8 >= 52 && _bind$8 <= 127) {
                _tmp = 28;
              } else {
                if (_bind$8 >= 194 && _bind$8 <= 223) {
                  _tmp = 30;
                } else {
                  if (_bind$8 >= 224 && _bind$8 <= 239) {
                    _tmp = 31;
                  } else {
                    if (_bind$8 === 240) {
                      _tmp = 32;
                    } else {
                      if (_bind$8 >= 241 && _bind$8 <= 244) {
                        _tmp = 33;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 13: {
          _match_pattern = 10;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp = 26;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 70) {
              _tmp = 26;
            } else {
              if (_bind$9 >= 97 && _bind$9 <= 102) {
                _tmp = 26;
              } else {
                if (_bind$9 === 123) {
                  _tmp = 27;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 14: {
          _match_pattern = 10;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$10 >= 0 && _bind$10 <= 47) {
            _tmp = 34;
          } else {
            if (_bind$10 >= 48 && _bind$10 <= 57) {
              _tmp = 35;
            } else {
              if (_bind$10 >= 58 && _bind$10 <= 64) {
                _tmp = 34;
              } else {
                if (_bind$10 >= 65 && _bind$10 <= 70) {
                  _tmp = 35;
                } else {
                  if (_bind$10 >= 71 && _bind$10 <= 96) {
                    _tmp = 34;
                  } else {
                    if (_bind$10 >= 97 && _bind$10 <= 102) {
                      _tmp = 35;
                    } else {
                      if (_bind$10 >= 103 && _bind$10 <= 127) {
                        _tmp = 34;
                      } else {
                        if (_bind$10 >= 194 && _bind$10 <= 223) {
                          _tmp = 36;
                        } else {
                          if (_bind$10 >= 224 && _bind$10 <= 239) {
                            _tmp = 37;
                          } else {
                            if (_bind$10 === 240) {
                              _tmp = 38;
                            } else {
                              if (_bind$10 >= 241 && _bind$10 <= 244) {
                                _tmp = 39;
                              } else {
                                break _L$2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 15: {
          _match_pattern = 9;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          const _bind$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$11 === 9) {
            _tmp = 15;
          } else {
            if (_bind$11 >= 11 && _bind$11 <= 12) {
              _tmp = 15;
            } else {
              if (_bind$11 === 32) {
                _tmp = 15;
              } else {
                if (_bind$11 === 194) {
                  _tmp = 21;
                } else {
                  if (_bind$11 === 225) {
                    _tmp = 22;
                  } else {
                    if (_bind$11 === 226) {
                      _tmp = 23;
                    } else {
                      if (_bind$11 === 227) {
                        _tmp = 24;
                      } else {
                        if (_bind$11 === 239) {
                          _tmp = 25;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 16: {
          const _bind$12 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$12 >= 128 && _bind$12 <= 191) {
            _tmp = 10;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 17: {
          const _bind$13 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$13 >= 128 && _bind$13 <= 191) {
            _tmp = 16;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 18: {
          const _bind$14 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$14 >= 144 && _bind$14 <= 191) {
            _tmp = 17;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 19: {
          const _bind$15 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$15 >= 128 && _bind$15 <= 191) {
            _tmp = 17;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 20: {
          _match_pattern = 12;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 21: {
          const _bind$16 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$16 === 160) {
            _tmp = 15;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 22: {
          const _bind$17 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$17 === 154) {
            _tmp = 41;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 23: {
          const _bind$18 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$18) {
            case 128: {
              _tmp = 42;
              break;
            }
            case 129: {
              _tmp = 43;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 24: {
          const _bind$19 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$19 === 128) {
            _tmp = 41;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 25: {
          const _bind$20 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$20 === 187) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 26: {
          const _bind$21 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$21 >= 48 && _bind$21 <= 57) {
            _tmp = 51;
          } else {
            if (_bind$21 >= 65 && _bind$21 <= 70) {
              _tmp = 51;
            } else {
              if (_bind$21 >= 97 && _bind$21 <= 102) {
                _tmp = 51;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 27: {
          const _bind$22 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$22 >= 0 && _bind$22 <= 9) {
            _tmp = 44;
          } else {
            if (_bind$22 >= 11 && _bind$22 <= 12) {
              _tmp = 44;
            } else {
              if (_bind$22 >= 14 && _bind$22 <= 47) {
                _tmp = 44;
              } else {
                if (_bind$22 >= 48 && _bind$22 <= 57) {
                  _tmp = 45;
                } else {
                  if (_bind$22 >= 58 && _bind$22 <= 64) {
                    _tmp = 44;
                  } else {
                    if (_bind$22 >= 65 && _bind$22 <= 70) {
                      _tmp = 45;
                    } else {
                      if (_bind$22 >= 71 && _bind$22 <= 96) {
                        _tmp = 44;
                      } else {
                        if (_bind$22 >= 97 && _bind$22 <= 102) {
                          _tmp = 45;
                        } else {
                          if (_bind$22 >= 103 && _bind$22 <= 124) {
                            _tmp = 44;
                          } else {
                            if (_bind$22 === 125) {
                              _tmp = 46;
                            } else {
                              if (_bind$22 >= 126 && _bind$22 <= 127) {
                                _tmp = 44;
                              } else {
                                if (_bind$22 >= 194 && _bind$22 <= 223) {
                                  _tmp = 47;
                                } else {
                                  if (_bind$22 >= 224 && _bind$22 <= 239) {
                                    _tmp = 48;
                                  } else {
                                    if (_bind$22 === 240) {
                                      _tmp = 49;
                                    } else {
                                      if (_bind$22 >= 241 && _bind$22 <= 244) {
                                        _tmp = 50;
                                      } else {
                                        break _L$2;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 28: {
          const _bind$23 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$23 >= 0 && _bind$23 <= 127) {
            _tmp = 52;
          } else {
            if (_bind$23 >= 194 && _bind$23 <= 223) {
              _tmp = 53;
            } else {
              if (_bind$23 >= 224 && _bind$23 <= 239) {
                _tmp = 54;
              } else {
                if (_bind$23 === 240) {
                  _tmp = 55;
                } else {
                  if (_bind$23 >= 241 && _bind$23 <= 244) {
                    _tmp = 56;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 29: {
          const _bind$24 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$24 >= 0 && _bind$24 <= 47) {
            _tmp = 52;
          } else {
            if (_bind$24 >= 48 && _bind$24 <= 55) {
              _tmp = 57;
            } else {
              if (_bind$24 >= 56 && _bind$24 <= 127) {
                _tmp = 52;
              } else {
                if (_bind$24 >= 194 && _bind$24 <= 223) {
                  _tmp = 53;
                } else {
                  if (_bind$24 >= 224 && _bind$24 <= 239) {
                    _tmp = 54;
                  } else {
                    if (_bind$24 === 240) {
                      _tmp = 55;
                    } else {
                      if (_bind$24 >= 241 && _bind$24 <= 244) {
                        _tmp = 56;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 30: {
          const _bind$25 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$25 >= 128 && _bind$25 <= 191) {
            _tmp = 28;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 31: {
          const _bind$26 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$26 >= 128 && _bind$26 <= 191) {
            _tmp = 30;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 32: {
          const _bind$27 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$27 >= 144 && _bind$27 <= 191) {
            _tmp = 31;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 33: {
          const _bind$28 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$28 >= 128 && _bind$28 <= 191) {
            _tmp = 31;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 34: {
          const _bind$29 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$29 >= 0 && _bind$29 <= 127) {
            _tmp = 58;
          } else {
            if (_bind$29 >= 194 && _bind$29 <= 223) {
              _tmp = 59;
            } else {
              if (_bind$29 >= 224 && _bind$29 <= 239) {
                _tmp = 60;
              } else {
                if (_bind$29 === 240) {
                  _tmp = 61;
                } else {
                  if (_bind$29 >= 241 && _bind$29 <= 244) {
                    _tmp = 62;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 35: {
          const _bind$30 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$30 >= 0 && _bind$30 <= 47) {
            _tmp = 58;
          } else {
            if (_bind$30 >= 48 && _bind$30 <= 57) {
              _tmp = 63;
            } else {
              if (_bind$30 >= 58 && _bind$30 <= 64) {
                _tmp = 58;
              } else {
                if (_bind$30 >= 65 && _bind$30 <= 70) {
                  _tmp = 63;
                } else {
                  if (_bind$30 >= 71 && _bind$30 <= 96) {
                    _tmp = 58;
                  } else {
                    if (_bind$30 >= 97 && _bind$30 <= 102) {
                      _tmp = 63;
                    } else {
                      if (_bind$30 >= 103 && _bind$30 <= 127) {
                        _tmp = 58;
                      } else {
                        if (_bind$30 >= 194 && _bind$30 <= 223) {
                          _tmp = 59;
                        } else {
                          if (_bind$30 >= 224 && _bind$30 <= 239) {
                            _tmp = 60;
                          } else {
                            if (_bind$30 === 240) {
                              _tmp = 61;
                            } else {
                              if (_bind$30 >= 241 && _bind$30 <= 244) {
                                _tmp = 62;
                              } else {
                                break _L$2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 36: {
          const _bind$31 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$31 >= 128 && _bind$31 <= 191) {
            _tmp = 34;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 37: {
          const _bind$32 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$32 >= 128 && _bind$32 <= 191) {
            _tmp = 36;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 38: {
          const _bind$33 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$33 >= 144 && _bind$33 <= 191) {
            _tmp = 37;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 39: {
          const _bind$34 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$34 >= 128 && _bind$34 <= 191) {
            _tmp = 37;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 40: {
          const _bind$35 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$35 === 191) {
            _tmp = 15;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 41: {
          const _bind$36 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$36 === 128) {
            _tmp = 15;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 42: {
          const _bind$37 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$37 >= 128 && _bind$37 <= 138) {
            _tmp = 15;
          } else {
            if (_bind$37 === 175) {
              _tmp = 15;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 43: {
          const _bind$38 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$38 === 159) {
            _tmp = 15;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 44: {
          const _bind$39 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$39 >= 0 && _bind$39 <= 9) {
            _tmp = 44;
          } else {
            if (_bind$39 >= 11 && _bind$39 <= 12) {
              _tmp = 44;
            } else {
              if (_bind$39 >= 14 && _bind$39 <= 124) {
                _tmp = 44;
              } else {
                if (_bind$39 === 125) {
                  _tmp = 46;
                } else {
                  if (_bind$39 >= 126 && _bind$39 <= 127) {
                    _tmp = 44;
                  } else {
                    if (_bind$39 >= 194 && _bind$39 <= 223) {
                      _tmp = 47;
                    } else {
                      if (_bind$39 >= 224 && _bind$39 <= 239) {
                        _tmp = 48;
                      } else {
                        if (_bind$39 === 240) {
                          _tmp = 49;
                        } else {
                          if (_bind$39 >= 241 && _bind$39 <= 244) {
                            _tmp = 50;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 45: {
          const _bind$40 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$40 >= 0 && _bind$40 <= 9) {
            _tmp = 44;
          } else {
            if (_bind$40 >= 11 && _bind$40 <= 12) {
              _tmp = 44;
            } else {
              if (_bind$40 >= 14 && _bind$40 <= 47) {
                _tmp = 44;
              } else {
                if (_bind$40 >= 48 && _bind$40 <= 57) {
                  _tmp = 45;
                } else {
                  if (_bind$40 >= 58 && _bind$40 <= 64) {
                    _tmp = 44;
                  } else {
                    if (_bind$40 >= 65 && _bind$40 <= 70) {
                      _tmp = 45;
                    } else {
                      if (_bind$40 >= 71 && _bind$40 <= 96) {
                        _tmp = 44;
                      } else {
                        if (_bind$40 >= 97 && _bind$40 <= 102) {
                          _tmp = 45;
                        } else {
                          if (_bind$40 >= 103 && _bind$40 <= 124) {
                            _tmp = 44;
                          } else {
                            if (_bind$40 === 125) {
                              _tmp = 64;
                            } else {
                              if (_bind$40 >= 126 && _bind$40 <= 127) {
                                _tmp = 44;
                              } else {
                                if (_bind$40 >= 194 && _bind$40 <= 223) {
                                  _tmp = 47;
                                } else {
                                  if (_bind$40 >= 224 && _bind$40 <= 239) {
                                    _tmp = 48;
                                  } else {
                                    if (_bind$40 === 240) {
                                      _tmp = 49;
                                    } else {
                                      if (_bind$40 >= 241 && _bind$40 <= 244) {
                                        _tmp = 50;
                                      } else {
                                        break _L$2;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 46: {
          _match_pattern = 8;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 47: {
          const _bind$41 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$41 >= 128 && _bind$41 <= 191) {
            _tmp = 44;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 48: {
          const _bind$42 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$42 >= 128 && _bind$42 <= 191) {
            _tmp = 47;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 49: {
          const _bind$43 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$43 >= 144 && _bind$43 <= 191) {
            _tmp = 48;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 50: {
          const _bind$44 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$44 >= 128 && _bind$44 <= 191) {
            _tmp = 48;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 51: {
          const _bind$45 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$45 >= 48 && _bind$45 <= 57) {
            _tmp = 65;
          } else {
            if (_bind$45 >= 65 && _bind$45 <= 70) {
              _tmp = 65;
            } else {
              if (_bind$45 >= 97 && _bind$45 <= 102) {
                _tmp = 65;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 52: {
          const _bind$46 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$46 >= 0 && _bind$46 <= 127) {
            _tmp = 66;
          } else {
            if (_bind$46 >= 194 && _bind$46 <= 223) {
              _tmp = 67;
            } else {
              if (_bind$46 >= 224 && _bind$46 <= 239) {
                _tmp = 68;
              } else {
                if (_bind$46 === 240) {
                  _tmp = 69;
                } else {
                  if (_bind$46 >= 241 && _bind$46 <= 244) {
                    _tmp = 70;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 53: {
          const _bind$47 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$47 >= 128 && _bind$47 <= 191) {
            _tmp = 52;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 54: {
          const _bind$48 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$48 >= 128 && _bind$48 <= 191) {
            _tmp = 53;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 55: {
          const _bind$49 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$49 >= 144 && _bind$49 <= 191) {
            _tmp = 54;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 56: {
          const _bind$50 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$50 >= 128 && _bind$50 <= 191) {
            _tmp = 54;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 57: {
          const _bind$51 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$51 >= 0 && _bind$51 <= 47) {
            _tmp = 66;
          } else {
            if (_bind$51 >= 48 && _bind$51 <= 55) {
              _tmp = 71;
            } else {
              if (_bind$51 >= 56 && _bind$51 <= 127) {
                _tmp = 66;
              } else {
                if (_bind$51 >= 194 && _bind$51 <= 223) {
                  _tmp = 67;
                } else {
                  if (_bind$51 >= 224 && _bind$51 <= 239) {
                    _tmp = 68;
                  } else {
                    if (_bind$51 === 240) {
                      _tmp = 69;
                    } else {
                      if (_bind$51 >= 241 && _bind$51 <= 244) {
                        _tmp = 70;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 58: {
          _match_pattern = 3;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 59: {
          const _bind$52 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$52 >= 128 && _bind$52 <= 191) {
            _tmp = 58;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 60: {
          const _bind$53 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$53 >= 128 && _bind$53 <= 191) {
            _tmp = 59;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 61: {
          const _bind$54 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$54 >= 144 && _bind$54 <= 191) {
            _tmp = 60;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 62: {
          const _bind$55 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$55 >= 128 && _bind$55 <= 191) {
            _tmp = 60;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 63: {
          _match_pattern = 2;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 4 | 0;
          break _L$2;
        }
        case 64: {
          _match_pattern = 7;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 65: {
          const _bind$56 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$56 >= 48 && _bind$56 <= 57) {
            _tmp = 72;
          } else {
            if (_bind$56 >= 65 && _bind$56 <= 70) {
              _tmp = 72;
            } else {
              if (_bind$56 >= 97 && _bind$56 <= 102) {
                _tmp = 72;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 66: {
          _match_pattern = 5;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 67: {
          const _bind$57 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$57 >= 128 && _bind$57 <= 191) {
            _tmp = 66;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 68: {
          const _bind$58 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$58 >= 128 && _bind$58 <= 191) {
            _tmp = 67;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 69: {
          const _bind$59 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$59 >= 144 && _bind$59 <= 191) {
            _tmp = 68;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 70: {
          const _bind$60 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$60 >= 128 && _bind$60 <= 191) {
            _tmp = 68;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 71: {
          _match_pattern = 4;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 5 | 0;
          break _L$2;
        }
        case 72: {
          _match_pattern = 6;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 6 | 0;
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 13) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          if (end_with_newline) {
            moonbitlang$core$builtin$$Logger$write_char$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, 34);
            continue _L;
          } else {
            if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
              moonbitlang$core$array$$Array$push$104$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, _match_end) }));
              return;
            } else {
              return;
            }
          }
        }
        case 1: {
          const repr = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr);
          continue _L;
        }
        case 2: {
          const repr$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$2);
          continue _L;
        }
        case 3: {
          const repr$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$3));
          continue _L;
        }
        case 4: {
          const repr$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$4);
          continue _L;
        }
        case 5: {
          const repr$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$5));
          continue _L;
        }
        case 6: {
          const repr$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$6);
          continue _L;
        }
        case 7: {
          const repr$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$7);
          continue _L;
        }
        case 8: {
          const repr$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$8));
          continue _L;
        }
        case 9: {
          const repr$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          if (allow_interp) {
            if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
              moonbitlang$core$array$$Array$push$104$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, _match_end) }));
            }
            moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf);
            const apos = _match_end;
            const bpos = moonbitlang$ulex$lib$new_frontend$lexer$$interp_handle(lexbuf, env);
            const loc = { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, apos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, bpos) };
            if (moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "") {
              moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpMissingExpression);
            } else {
              const source = moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val;
              moonbitlang$core$array$$Array$push$104$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpSource({ source: source, loc: loc }));
            }
            moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf);
          } else {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$9));
          }
          continue _L;
        }
        case 10: {
          const repr$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$10));
          continue _L;
        }
        case 11: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString);
          if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
            moonbitlang$core$array$$Array$push$104$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, _match_end) }));
            return;
          } else {
            return;
          }
        }
        case 12: {
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, lexbuf.pos - 1 | 0);
          if (!end_with_newline) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString);
          }
          if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
            moonbitlang$core$array$$Array$push$104$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, _match_end) }));
            return;
          } else {
            return;
          }
        }
        case 13: {
          const repr$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start, _capture_0_end);
          const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$38$(_self, repr$11);
          const _p = _self;
          moonbitlang$core$builtin$$Logger$write_string$38$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, _p.val);
          continue _L;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf, env, end_with_newline, allow_interp, startpos) {
  moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf);
  moonbitlang$ulex$lib$new_frontend$lexer$$normal(lexbuf, env, end_with_newline, allow_interp, startpos);
  if (moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val.length === 0) {
    return [new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit("", { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, lexbuf.pos) })];
  } else {
    const interps = moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val;
    moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val = [];
    return interps;
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte(lexbuf, env, start) {
  _L: while (true) {
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp = 0;
    _L$2: while (true) {
      const _param = _tmp;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind === -1) {
            _tmp = 1;
          } else {
            if (_bind >= 0 && _bind <= 9) {
              _tmp = 2;
            } else {
              if (_bind === 10) {
                _tmp = 1;
              } else {
                if (_bind >= 11 && _bind <= 12) {
                  _tmp = 2;
                } else {
                  if (_bind === 13) {
                    _tmp = 1;
                  } else {
                    if (_bind >= 14 && _bind <= 38) {
                      _tmp = 2;
                    } else {
                      if (_bind === 39) {
                        _tmp = 1;
                      } else {
                        if (_bind >= 40 && _bind <= 127) {
                          _tmp = 2;
                        } else {
                          if (_bind >= 194 && _bind <= 223) {
                            _tmp = 3;
                          } else {
                            if (_bind >= 224 && _bind <= 236) {
                              _tmp = 4;
                            } else {
                              if (_bind === 237) {
                                _tmp = 5;
                              } else {
                                if (_bind >= 238 && _bind <= 239) {
                                  _tmp = 4;
                                } else {
                                  if (_bind === 240) {
                                    _tmp = 6;
                                  } else {
                                    if (_bind >= 241 && _bind <= 244) {
                                      _tmp = 7;
                                    } else {
                                      break _L$2;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 0;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 2: {
          _match_pattern = 1;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          break _L$2;
        }
        case 3: {
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$2 >= 128 && _bind$2 <= 191) {
            _tmp = 2;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 4: {
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$3 >= 128 && _bind$3 <= 191) {
            _tmp = 3;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 5: {
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$4 >= 128 && _bind$4 <= 159) {
            _tmp = 3;
          } else {
            if (_bind$4 >= 160 && _bind$4 <= 191) {
              _tmp = 8;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 6: {
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$5 >= 144 && _bind$5 <= 191) {
            _tmp = 4;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 7: {
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$6 >= 128 && _bind$6 <= 191) {
            _tmp = 4;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 8: {
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$7 >= 128 && _bind$7 <= 191) {
            _tmp = 9;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 9: {
          _match_pattern = 2;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 2) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidByteLiteral(moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf.val));
          moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf);
          return;
        }
        case 1: {
          const c = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$38$(moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf, c);
          continue _L;
        }
        case 2: {
          continue _L;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_after_semicolon(token) {
  switch (token.$tag) {
    case 11: {
      return true;
    }
    case 10: {
      return true;
    }
    case 4: {
      return true;
    }
    case 1: {
      return true;
    }
    case 2: {
      return true;
    }
    case 3: {
      return true;
    }
    case 24: {
      return true;
    }
    case 23: {
      return true;
    }
    case 5: {
      return true;
    }
    case 6: {
      return true;
    }
    case 7: {
      return true;
    }
    case 8: {
      return true;
    }
    case 0: {
      return true;
    }
    case 65: {
      return true;
    }
    case 47: {
      return true;
    }
    case 60: {
      return true;
    }
    case 63: {
      return true;
    }
    case 30: {
      return true;
    }
    case 31: {
      return true;
    }
    case 85: {
      return true;
    }
    case 39: {
      return true;
    }
    case 38: {
      return true;
    }
    case 81: {
      return true;
    }
    case 43: {
      return true;
    }
    case 32: {
      return true;
    }
    case 34: {
      return true;
    }
    case 44: {
      return true;
    }
    case 71: {
      return true;
    }
    case 80: {
      return true;
    }
    case 79: {
      return true;
    }
    case 40: {
      return true;
    }
    case 77: {
      return true;
    }
    case 78: {
      return true;
    }
    case 36: {
      return true;
    }
    case 28: {
      return true;
    }
    case 29: {
      return true;
    }
    case 76: {
      return true;
    }
    case 92: {
      return true;
    }
    case 84: {
      return true;
    }
    case 42: {
      return true;
    }
    case 75: {
      return true;
    }
    case 45: {
      return true;
    }
    case 22: {
      return true;
    }
    case 33: {
      return true;
    }
    case 25: {
      return true;
    }
    case 26: {
      return true;
    }
    case 27: {
      return true;
    }
    case 90: {
      return true;
    }
    case 91: {
      return true;
    }
    case 93: {
      return true;
    }
    case 89: {
      return true;
    }
    case 14: {
      return true;
    }
    case 9: {
      return true;
    }
    case 12: {
      return true;
    }
    case 13: {
      return true;
    }
    case 15: {
      return true;
    }
    case 16: {
      return true;
    }
    case 50: {
      return true;
    }
    case 61: {
      return true;
    }
    case 17: {
      return true;
    }
    case 18: {
      return true;
    }
    case 19: {
      return true;
    }
    case 20: {
      return true;
    }
    case 67: {
      return true;
    }
    case 70: {
      return true;
    }
    case 69: {
      return true;
    }
    case 68: {
      return true;
    }
    case 66: {
      return false;
    }
    case 54: {
      return false;
    }
    case 53: {
      return false;
    }
    case 56: {
      return false;
    }
    case 55: {
      return false;
    }
    case 57: {
      return false;
    }
    case 48: {
      return false;
    }
    case 62: {
      return false;
    }
    case 59: {
      return false;
    }
    case 82: {
      return false;
    }
    case 83: {
      return false;
    }
    case 94: {
      return false;
    }
    case 73: {
      return false;
    }
    case 46: {
      return false;
    }
    case 21: {
      return false;
    }
    case 74: {
      return false;
    }
    case 41: {
      return false;
    }
    case 49: {
      return false;
    }
    case 58: {
      return false;
    }
    case 64: {
      return false;
    }
    case 72: {
      return false;
    }
    case 95: {
      return false;
    }
    case 86: {
      return false;
    }
    case 35: {
      return false;
    }
    case 37: {
      return false;
    }
    case 51: {
      return false;
    }
    case 87: {
      return false;
    }
    case 88: {
      return false;
    }
    default: {
      return false;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_before_semicolon(token) {
  switch (token.$tag) {
    case 11: {
      return true;
    }
    case 10: {
      return true;
    }
    case 54: {
      return true;
    }
    case 53: {
      return true;
    }
    case 55: {
      return true;
    }
    case 4: {
      return true;
    }
    case 1: {
      return true;
    }
    case 2: {
      return true;
    }
    case 3: {
      return true;
    }
    case 24: {
      return true;
    }
    case 23: {
      return true;
    }
    case 5: {
      return true;
    }
    case 6: {
      return true;
    }
    case 7: {
      return true;
    }
    case 8: {
      return true;
    }
    case 0: {
      return true;
    }
    case 66: {
      return true;
    }
    case 48: {
      return true;
    }
    case 62: {
      return true;
    }
    case 63: {
      return true;
    }
    case 30: {
      return true;
    }
    case 31: {
      return true;
    }
    case 85: {
      return true;
    }
    case 39: {
      return true;
    }
    case 51: {
      return true;
    }
    case 52: {
      return true;
    }
    case 87: {
      return true;
    }
    case 88: {
      return true;
    }
    case 73: {
      return true;
    }
    case 89: {
      return true;
    }
    case 14: {
      return true;
    }
    case 81: {
      return false;
    }
    case 43: {
      return false;
    }
    case 32: {
      return false;
    }
    case 59: {
      return false;
    }
    case 61: {
      return false;
    }
    case 71: {
      return false;
    }
    case 16: {
      return false;
    }
    case 80: {
      return false;
    }
    case 50: {
      return false;
    }
    case 79: {
      return false;
    }
    case 40: {
      return false;
    }
    case 41: {
      return false;
    }
    case 47: {
      return false;
    }
    case 56: {
      return false;
    }
    case 77: {
      return false;
    }
    case 78: {
      return false;
    }
    case 60: {
      return false;
    }
    case 65: {
      return false;
    }
    case 17: {
      return false;
    }
    case 20: {
      return false;
    }
    case 19: {
      return false;
    }
    case 18: {
      return false;
    }
    case 36: {
      return false;
    }
    case 37: {
      return false;
    }
    case 28: {
      return false;
    }
    case 76: {
      return false;
    }
    case 92: {
      return false;
    }
    case 84: {
      return false;
    }
    case 42: {
      return false;
    }
    case 75: {
      return false;
    }
    case 45: {
      return false;
    }
    case 82: {
      return false;
    }
    case 83: {
      return false;
    }
    case 94: {
      return false;
    }
    case 46: {
      return false;
    }
    case 21: {
      return false;
    }
    case 22: {
      return false;
    }
    case 33: {
      return false;
    }
    case 74: {
      return false;
    }
    case 29: {
      return false;
    }
    case 15: {
      return false;
    }
    case 49: {
      return false;
    }
    case 58: {
      return false;
    }
    case 70: {
      return false;
    }
    case 64: {
      return false;
    }
    case 72: {
      return false;
    }
    case 95: {
      return false;
    }
    case 67: {
      return false;
    }
    case 86: {
      return false;
    }
    case 25: {
      return false;
    }
    case 26: {
      return false;
    }
    case 27: {
      return false;
    }
    case 34: {
      return false;
    }
    case 44: {
      return false;
    }
    case 35: {
      return false;
    }
    case 57: {
      return false;
    }
    case 90: {
      return false;
    }
    case 91: {
      return false;
    }
    case 93: {
      return false;
    }
    case 68: {
      return false;
    }
    case 69: {
      return false;
    }
    case 38: {
      return false;
    }
    case 9: {
      return false;
    }
    case 12: {
      return false;
    }
    default: {
      return false;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$add_token$96$(self, tokens, last_unhandled_comment, next_token) {
  switch (next_token.$tag) {
    case 15: {
      return;
    }
    case 16: {
      if (self.last_unhandled_newline < 0) {
        self.last_unhandled_newline = tokens.length;
        return;
      } else {
        return;
      }
    }
    default: {
      if (self.last_unhandled_newline >= 0) {
        let _tmp = self.last_unhandled_newline - 1 | 0;
        _L: while (true) {
          const _param = _tmp;
          if (_param >= 0) {
            const _bind = moonbitlang$core$array$$Array$op_get$132$(tokens, _param);
            const _x = _bind._0;
            if (_x.$tag === 15) {
              _tmp = _param - 1 | 0;
              continue;
            } else {
              const _endp = _bind._2;
              if (moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_before_semicolon(_x) && moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_after_semicolon(next_token)) {
                _L$2: {
                  switch (_x.$tag) {
                    case 6: {
                      switch (next_token.$tag) {
                        case 6: {
                          break _L;
                        }
                        case 7: {
                          break _L;
                        }
                        default: {
                          break _L$2;
                        }
                      }
                    }
                    case 7: {
                      switch (next_token.$tag) {
                        case 6: {
                          break _L;
                        }
                        case 7: {
                          break _L;
                        }
                        default: {
                          break _L$2;
                        }
                      }
                    }
                    default: {
                      break _L$2;
                    }
                  }
                }
                moonbitlang$core$array$$Array$insert$132$(tokens, _param + 1 | 0, { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI(false), _1: _endp, _2: _endp });
                const _bind$2 = last_unhandled_comment.val;
                if (_bind$2 === undefined) {
                  break;
                } else {
                  const _Some = _bind$2;
                  const _x$2 = _Some;
                  const _c = _x$2._0;
                  const _i = _x$2._1;
                  if (_i >= (_param + 1 | 0)) {
                    last_unhandled_comment.val = { _0: _c, _1: _i + 1 | 0 };
                    break;
                  } else {
                    break;
                  }
                }
              } else {
                break;
              }
            }
          } else {
            break;
          }
        }
        self.last_unhandled_newline = -1;
        return;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$count_newlines$124$57(_env, start_index, direction) {
  const self = _env._1;
  const at_file_start = _env._0;
  let count = 0;
  let index = start_index;
  while (true) {
    const target_index = index + direction | 0;
    _L: {
      _L$2: {
        const _bind = moonbitlang$core$array$$Array$get$132$(self.tokens, target_index);
        if (_bind === undefined) {
          break _L$2;
        } else {
          const _Some = _bind;
          const _x = _Some;
          const _x$2 = _x._0;
          switch (_x$2.$tag) {
            case 15: {
              return count;
            }
            case 16: {
              if (count >= 2) {
                return count;
              } else {
                count = count + 1 | 0;
                index = target_index;
              }
              break;
            }
            case 22: {
              break _L$2;
            }
            default: {
              return count;
            }
          }
        }
        break _L;
      }
      if (direction < 0) {
        at_file_start.val = true;
      }
      return 0;
    }
    continue;
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$handle_comment$124$51(self, ci) {
  const _c = ci._0;
  const _i = ci._1;
  const at_file_start = { val: false };
  const _env = { _0: at_file_start, _1: self };
  const _p = 2;
  const _p$2 = moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$count_newlines$124$57(_env, _i, -1);
  const leading_newlines = _p > _p$2 ? _p$2 : _p;
  const _p$3 = 2;
  const _p$4 = moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$count_newlines$124$57(_env, _i, 1);
  const trailing_newlines = _p$3 > _p$4 ? _p$4 : _p$3;
  const _bind = moonbitlang$core$array$$Array$op_get$132$(self.tokens, _i);
  const _start = _bind._1;
  const _end = _bind._2;
  const kind = leading_newlines === 0 && !at_file_start.val ? $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$InlineTrailing : new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$Ownline(leading_newlines === 2 && !at_file_start.val, trailing_newlines === 2);
  moonbitlang$core$array$$Array$op_set$132$(self.tokens, _i, { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT({ content: _c.content, kind: kind, consumed_by_docstring: _c.consumed_by_docstring }), _1: _start, _2: _end });
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(self, tok, start, end) {
  moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$add_token$96$(self.asi_context, self.tokens, self.last_unhandled_comment, tok);
  moonbitlang$core$array$$Array$push$132$(self.tokens, { _0: tok, _1: start, _2: end });
  if (self.comment) {
    const tok_index = self.tokens.length - 1 | 0;
    let c;
    _L: {
      const _bind = self.last_unhandled_comment.val;
      if (tok.$tag === 16) {
        return;
      } else {
        if (_bind === undefined) {
          if (tok.$tag === 15) {
            const _COMMENT = tok;
            const _c = _COMMENT._0;
            c = _c;
            break _L;
          } else {
            return;
          }
        } else {
          const _Some = _bind;
          const _ci = _Some;
          if (tok.$tag === 15) {
            const _COMMENT = tok;
            const _c = _COMMENT._0;
            moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$handle_comment$124$51(self, _ci);
            c = _c;
            break _L;
          } else {
            moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$handle_comment$124$51(self, _ci);
            return;
          }
        }
      }
    }
    self.last_unhandled_comment.val = { _0: c, _1: tok_index };
    return;
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(self, tok, start, end, start_offset) {
  const start$2 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, start + start_offset | 0);
  const end$2 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, end);
  moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(self, tok, start$2, end$2);
}
function moonbitlang$ulex$lib$new_frontend$lexer$$tokens(lexbuf, env, preserve_comment) {
  _L: while (true) {
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf.pos;
    let _match_end = -1;
    const _capture_0_start = { val: -1 };
    const _capture_0_end = { val: -1 };
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _tmp = 0;
    _L$2: while (true) {
      const _param = _tmp;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind === -1) {
            _tmp = 1;
          } else {
            if (_bind >= 0 && _bind <= 8) {
              _tmp = 2;
            } else {
              if (_bind === 9) {
                _tmp = 3;
              } else {
                if (_bind === 10) {
                  _tmp = 4;
                } else {
                  if (_bind >= 11 && _bind <= 12) {
                    _tmp = 3;
                  } else {
                    if (_bind === 13) {
                      _tmp = 5;
                    } else {
                      if (_bind >= 14 && _bind <= 31) {
                        _tmp = 2;
                      } else {
                        if (_bind === 32) {
                          _tmp = 3;
                        } else {
                          if (_bind === 33) {
                            _tmp = 6;
                          } else {
                            if (_bind === 34) {
                              _tmp = 7;
                            } else {
                              if (_bind === 35) {
                                _tmp = 8;
                              } else {
                                if (_bind === 36) {
                                  _tmp = 9;
                                } else {
                                  if (_bind === 37) {
                                    _tmp = 10;
                                  } else {
                                    if (_bind === 38) {
                                      _tmp = 11;
                                    } else {
                                      if (_bind === 39) {
                                        _tmp = 12;
                                      } else {
                                        if (_bind === 40) {
                                          _tmp = 13;
                                        } else {
                                          if (_bind === 41) {
                                            _tmp = 14;
                                          } else {
                                            if (_bind === 42) {
                                              _tmp = 15;
                                            } else {
                                              if (_bind === 43) {
                                                _tmp = 16;
                                              } else {
                                                if (_bind === 44) {
                                                  _tmp = 17;
                                                } else {
                                                  if (_bind === 45) {
                                                    _tmp = 18;
                                                  } else {
                                                    if (_bind === 46) {
                                                      _tmp = 19;
                                                    } else {
                                                      if (_bind === 47) {
                                                        _tmp = 20;
                                                      } else {
                                                        if (_bind === 48) {
                                                          _tmp = 21;
                                                        } else {
                                                          if (_bind >= 49 && _bind <= 57) {
                                                            _tmp = 22;
                                                          } else {
                                                            if (_bind === 58) {
                                                              _tmp = 23;
                                                            } else {
                                                              if (_bind === 59) {
                                                                _tmp = 24;
                                                              } else {
                                                                if (_bind === 60) {
                                                                  _tmp = 25;
                                                                } else {
                                                                  if (_bind === 61) {
                                                                    _tmp = 26;
                                                                  } else {
                                                                    if (_bind === 62) {
                                                                      _tmp = 27;
                                                                    } else {
                                                                      if (_bind === 63) {
                                                                        _tmp = 28;
                                                                      } else {
                                                                        if (_bind === 64) {
                                                                          _tmp = 29;
                                                                        } else {
                                                                          if (_bind >= 65 && _bind <= 90) {
                                                                            _tmp = 30;
                                                                          } else {
                                                                            if (_bind === 91) {
                                                                              _tmp = 31;
                                                                            } else {
                                                                              if (_bind === 92) {
                                                                                _tmp = 2;
                                                                              } else {
                                                                                if (_bind === 93) {
                                                                                  _tmp = 32;
                                                                                } else {
                                                                                  if (_bind === 94) {
                                                                                    _tmp = 33;
                                                                                  } else {
                                                                                    if (_bind === 95) {
                                                                                      _tmp = 34;
                                                                                    } else {
                                                                                      if (_bind === 96) {
                                                                                        _tmp = 2;
                                                                                      } else {
                                                                                        if (_bind === 97) {
                                                                                          _tmp = 34;
                                                                                        } else {
                                                                                          if (_bind === 98) {
                                                                                            _tmp = 35;
                                                                                          } else {
                                                                                            if (_bind >= 99 && _bind <= 122) {
                                                                                              _tmp = 34;
                                                                                            } else {
                                                                                              if (_bind === 123) {
                                                                                                _tmp = 36;
                                                                                              } else {
                                                                                                if (_bind === 124) {
                                                                                                  _tmp = 37;
                                                                                                } else {
                                                                                                  if (_bind === 125) {
                                                                                                    _tmp = 38;
                                                                                                  } else {
                                                                                                    if (_bind >= 126 && _bind <= 127) {
                                                                                                      _tmp = 2;
                                                                                                    } else {
                                                                                                      if (_bind === 194) {
                                                                                                        _tmp = 39;
                                                                                                      } else {
                                                                                                        if (_bind >= 195 && _bind <= 201) {
                                                                                                          _tmp = 40;
                                                                                                        } else {
                                                                                                          if (_bind === 202) {
                                                                                                            _tmp = 41;
                                                                                                          } else {
                                                                                                            if (_bind >= 203 && _bind <= 223) {
                                                                                                              _tmp = 42;
                                                                                                            } else {
                                                                                                              if (_bind === 224) {
                                                                                                                _tmp = 43;
                                                                                                              } else {
                                                                                                                if (_bind === 225) {
                                                                                                                  _tmp = 44;
                                                                                                                } else {
                                                                                                                  if (_bind === 226) {
                                                                                                                    _tmp = 45;
                                                                                                                  } else {
                                                                                                                    if (_bind === 227) {
                                                                                                                      _tmp = 46;
                                                                                                                    } else {
                                                                                                                      if (_bind >= 228 && _bind <= 233) {
                                                                                                                        _tmp = 47;
                                                                                                                      } else {
                                                                                                                        if (_bind === 234) {
                                                                                                                          _tmp = 48;
                                                                                                                        } else {
                                                                                                                          if (_bind >= 235 && _bind <= 236) {
                                                                                                                            _tmp = 47;
                                                                                                                          } else {
                                                                                                                            if (_bind === 237) {
                                                                                                                              _tmp = 49;
                                                                                                                            } else {
                                                                                                                              if (_bind === 238) {
                                                                                                                                _tmp = 43;
                                                                                                                              } else {
                                                                                                                                if (_bind === 239) {
                                                                                                                                  _tmp = 50;
                                                                                                                                } else {
                                                                                                                                  if (_bind === 240) {
                                                                                                                                    _tmp = 51;
                                                                                                                                  } else {
                                                                                                                                    if (_bind >= 241 && _bind <= 242) {
                                                                                                                                      _tmp = 52;
                                                                                                                                    } else {
                                                                                                                                      if (_bind === 243) {
                                                                                                                                        _tmp = 53;
                                                                                                                                      } else {
                                                                                                                                        if (_bind === 244) {
                                                                                                                                          _tmp = 52;
                                                                                                                                        } else {
                                                                                                                                          break _L$2;
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 1: {
          _match_pattern = 66;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 2: {
          _match_pattern = 70;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          break _L$2;
        }
        case 3: {
          _match_pattern = 1;
          _match_end = lexbuf.pos;
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$2 === 9) {
            _tmp = 3;
          } else {
            if (_bind$2 >= 11 && _bind$2 <= 12) {
              _tmp = 3;
            } else {
              if (_bind$2 === 32) {
                _tmp = 3;
              } else {
                if (_bind$2 === 194) {
                  _tmp = 95;
                } else {
                  if (_bind$2 === 225) {
                    _tmp = 96;
                  } else {
                    if (_bind$2 === 226) {
                      _tmp = 97;
                    } else {
                      if (_bind$2 === 227) {
                        _tmp = 98;
                      } else {
                        if (_bind$2 === 239) {
                          _tmp = 99;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 4: {
          _match_pattern = 0;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 5: {
          _match_pattern = 0;
          _match_end = lexbuf.pos;
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$3 === 10) {
            _tmp = 4;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 6: {
          _match_pattern = 62;
          _match_end = lexbuf.pos;
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$4 === 61) {
            _tmp = 100;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 7: {
          _match_pattern = 11;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 8: {
          _match_pattern = 70;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$5 >= 65 && _bind$5 <= 90) {
            _tmp = 129;
          } else {
            if (_bind$5 >= 97 && _bind$5 <= 122) {
              _tmp = 129;
            } else {
              if (_bind$5 === 124) {
                _tmp = 130;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 9: {
          _match_pattern = 70;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$6 === 124) {
            _tmp = 131;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 10: {
          _match_pattern = 30;
          _match_end = lexbuf.pos;
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$7 === 61) {
            _tmp = 101;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 11: {
          _match_pattern = 23;
          _match_end = lexbuf.pos;
          const _bind$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$8 === 38) {
            _tmp = 127;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 12: {
          _match_pattern = 70;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$9 >= 0 && _bind$9 <= 9) {
            _tmp = 86;
          } else {
            if (_bind$9 >= 11 && _bind$9 <= 12) {
              _tmp = 86;
            } else {
              if (_bind$9 >= 14 && _bind$9 <= 38) {
                _tmp = 86;
              } else {
                if (_bind$9 >= 40 && _bind$9 <= 91) {
                  _tmp = 86;
                } else {
                  if (_bind$9 === 92) {
                    _tmp = 87;
                  } else {
                    if (_bind$9 >= 93 && _bind$9 <= 127) {
                      _tmp = 86;
                    } else {
                      if (_bind$9 >= 194 && _bind$9 <= 223) {
                        _tmp = 88;
                      } else {
                        if (_bind$9 >= 224 && _bind$9 <= 239) {
                          _tmp = 89;
                        } else {
                          if (_bind$9 === 240) {
                            _tmp = 90;
                          } else {
                            if (_bind$9 >= 241 && _bind$9 <= 244) {
                              _tmp = 91;
                            } else {
                              break _L$2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 13: {
          _match_pattern = 25;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 14: {
          _match_pattern = 26;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 15: {
          _match_pattern = 28;
          _match_end = lexbuf.pos;
          const _bind$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$10 === 61) {
            _tmp = 101;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 16: {
          _match_pattern = 58;
          _match_end = lexbuf.pos;
          const _bind$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$11 === 61) {
            _tmp = 101;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 17: {
          _match_pattern = 31;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 18: {
          _match_pattern = 59;
          _match_end = lexbuf.pos;
          const _bind$12 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$12) {
            case 61: {
              _tmp = 101;
              break;
            }
            case 62: {
              _tmp = 134;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 19: {
          _match_pattern = 70;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$13 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$13 === 40) {
            _tmp = 109;
          } else {
            if (_bind$13 === 46) {
              _tmp = 110;
            } else {
              if (_bind$13 >= 48 && _bind$13 <= 57) {
                _tmp = 111;
              } else {
                if (_bind$13 >= 65 && _bind$13 <= 90) {
                  _tmp = 112;
                } else {
                  if (_bind$13 === 95) {
                    _tmp = 113;
                  } else {
                    if (_bind$13 >= 97 && _bind$13 <= 122) {
                      _tmp = 113;
                    } else {
                      if (_bind$13 === 194) {
                        _tmp = 114;
                      } else {
                        if (_bind$13 >= 195 && _bind$13 <= 201) {
                          _tmp = 115;
                        } else {
                          if (_bind$13 === 202) {
                            _tmp = 116;
                          } else {
                            if (_bind$13 === 225) {
                              _tmp = 117;
                            } else {
                              if (_bind$13 === 226) {
                                _tmp = 118;
                              } else {
                                if (_bind$13 === 227) {
                                  _tmp = 119;
                                } else {
                                  if (_bind$13 >= 228 && _bind$13 <= 233) {
                                    _tmp = 120;
                                  } else {
                                    if (_bind$13 === 234) {
                                      _tmp = 121;
                                    } else {
                                      if (_bind$13 >= 235 && _bind$13 <= 236) {
                                        _tmp = 120;
                                      } else {
                                        if (_bind$13 === 237) {
                                          _tmp = 122;
                                        } else {
                                          if (_bind$13 === 239) {
                                            _tmp = 123;
                                          } else {
                                            if (_bind$13 === 240) {
                                              _tmp = 124;
                                            } else {
                                              if (_bind$13 === 243) {
                                                _tmp = 125;
                                              } else {
                                                break _L$2;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 20: {
          _match_pattern = 29;
          _match_end = lexbuf.pos;
          const _bind$14 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$14) {
            case 47: {
              _tmp = 126;
              break;
            }
            case 61: {
              _tmp = 101;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 21: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$15 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$15 === 46) {
            _tmp = 80;
          } else {
            if (_bind$15 >= 48 && _bind$15 <= 57) {
              _tmp = 22;
            } else {
              if (_bind$15 === 66) {
                _tmp = 81;
              } else {
                if (_bind$15 === 76) {
                  _tmp = 82;
                } else {
                  if (_bind$15 === 78) {
                    _tmp = 82;
                  } else {
                    if (_bind$15 === 79) {
                      _tmp = 83;
                    } else {
                      if (_bind$15 === 85) {
                        _tmp = 84;
                      } else {
                        if (_bind$15 === 88) {
                          _tmp = 85;
                        } else {
                          if (_bind$15 === 95) {
                            _tmp = 22;
                          } else {
                            if (_bind$15 === 98) {
                              _tmp = 81;
                            } else {
                              if (_bind$15 === 111) {
                                _tmp = 83;
                              } else {
                                if (_bind$15 === 120) {
                                  _tmp = 85;
                                } else {
                                  break _L$2;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 22: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$16 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$16 === 46) {
            _tmp = 80;
          } else {
            if (_bind$16 >= 48 && _bind$16 <= 57) {
              _tmp = 22;
            } else {
              if (_bind$16 === 76) {
                _tmp = 82;
              } else {
                if (_bind$16 === 78) {
                  _tmp = 82;
                } else {
                  if (_bind$16 === 85) {
                    _tmp = 84;
                  } else {
                    if (_bind$16 === 95) {
                      _tmp = 22;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 23: {
          _match_pattern = 41;
          _match_end = lexbuf.pos;
          const _bind$17 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$17 === 58) {
            _tmp = 108;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 24: {
          _match_pattern = 42;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 25: {
          _match_pattern = 50;
          _match_end = lexbuf.pos;
          const _bind$18 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$18) {
            case 60: {
              _tmp = 106;
              break;
            }
            case 61: {
              _tmp = 107;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 26: {
          _match_pattern = 44;
          _match_end = lexbuf.pos;
          const _bind$19 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$19) {
            case 61: {
              _tmp = 135;
              break;
            }
            case 62: {
              _tmp = 136;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 27: {
          _match_pattern = 48;
          _match_end = lexbuf.pos;
          const _bind$20 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$20) {
            case 61: {
              _tmp = 104;
              break;
            }
            case 62: {
              _tmp = 105;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 28: {
          _match_pattern = 60;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 29: {
          _match_pattern = 70;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$21 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$21 >= 65 && _bind$21 <= 90) {
            _tmp = 128;
          } else {
            if (_bind$21 === 95) {
              _tmp = 128;
            } else {
              if (_bind$21 >= 97 && _bind$21 <= 122) {
                _tmp = 128;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 30: {
          _match_pattern = 67;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$22 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$22 >= 48 && _bind$22 <= 57) {
            _tmp = 30;
          } else {
            if (_bind$22 >= 65 && _bind$22 <= 90) {
              _tmp = 30;
            } else {
              if (_bind$22 === 95) {
                _tmp = 30;
              } else {
                if (_bind$22 >= 97 && _bind$22 <= 122) {
                  _tmp = 30;
                } else {
                  if (_bind$22 === 194) {
                    _tmp = 68;
                  } else {
                    if (_bind$22 >= 195 && _bind$22 <= 201) {
                      _tmp = 69;
                    } else {
                      if (_bind$22 === 202) {
                        _tmp = 70;
                      } else {
                        if (_bind$22 === 225) {
                          _tmp = 71;
                        } else {
                          if (_bind$22 === 226) {
                            _tmp = 72;
                          } else {
                            if (_bind$22 === 227) {
                              _tmp = 73;
                            } else {
                              if (_bind$22 >= 228 && _bind$22 <= 233) {
                                _tmp = 74;
                              } else {
                                if (_bind$22 === 234) {
                                  _tmp = 75;
                                } else {
                                  if (_bind$22 >= 235 && _bind$22 <= 236) {
                                    _tmp = 74;
                                  } else {
                                    if (_bind$22 === 237) {
                                      _tmp = 76;
                                    } else {
                                      if (_bind$22 === 239) {
                                        _tmp = 77;
                                      } else {
                                        if (_bind$22 === 240) {
                                          _tmp = 78;
                                        } else {
                                          if (_bind$22 === 243) {
                                            _tmp = 79;
                                          } else {
                                            break _L$2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 31: {
          _match_pattern = 51;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 32: {
          _match_pattern = 52;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 33: {
          _match_pattern = 24;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 34: {
          _match_pattern = 69;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$23 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$23 >= 48 && _bind$23 <= 57) {
            _tmp = 34;
          } else {
            if (_bind$23 >= 65 && _bind$23 <= 90) {
              _tmp = 34;
            } else {
              if (_bind$23 === 95) {
                _tmp = 34;
              } else {
                if (_bind$23 >= 97 && _bind$23 <= 122) {
                  _tmp = 34;
                } else {
                  if (_bind$23 === 126) {
                    _tmp = 57;
                  } else {
                    if (_bind$23 === 194) {
                      _tmp = 58;
                    } else {
                      if (_bind$23 >= 195 && _bind$23 <= 201) {
                        _tmp = 40;
                      } else {
                        if (_bind$23 === 202) {
                          _tmp = 59;
                        } else {
                          if (_bind$23 === 225) {
                            _tmp = 60;
                          } else {
                            if (_bind$23 === 226) {
                              _tmp = 61;
                            } else {
                              if (_bind$23 === 227) {
                                _tmp = 62;
                              } else {
                                if (_bind$23 >= 228 && _bind$23 <= 233) {
                                  _tmp = 47;
                                } else {
                                  if (_bind$23 === 234) {
                                    _tmp = 63;
                                  } else {
                                    if (_bind$23 >= 235 && _bind$23 <= 236) {
                                      _tmp = 47;
                                    } else {
                                      if (_bind$23 === 237) {
                                        _tmp = 64;
                                      } else {
                                        if (_bind$23 === 239) {
                                          _tmp = 65;
                                        } else {
                                          if (_bind$23 === 240) {
                                            _tmp = 66;
                                          } else {
                                            if (_bind$23 === 243) {
                                              _tmp = 67;
                                            } else {
                                              break _L$2;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 35: {
          _match_pattern = 69;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$24 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$24 === 34) {
            _tmp = 132;
          } else {
            if (_bind$24 === 39) {
              _tmp = 133;
            } else {
              if (_bind$24 >= 48 && _bind$24 <= 57) {
                _tmp = 34;
              } else {
                if (_bind$24 >= 65 && _bind$24 <= 90) {
                  _tmp = 34;
                } else {
                  if (_bind$24 === 95) {
                    _tmp = 34;
                  } else {
                    if (_bind$24 >= 97 && _bind$24 <= 122) {
                      _tmp = 34;
                    } else {
                      if (_bind$24 === 126) {
                        _tmp = 57;
                      } else {
                        if (_bind$24 === 194) {
                          _tmp = 58;
                        } else {
                          if (_bind$24 >= 195 && _bind$24 <= 201) {
                            _tmp = 40;
                          } else {
                            if (_bind$24 === 202) {
                              _tmp = 59;
                            } else {
                              if (_bind$24 === 225) {
                                _tmp = 60;
                              } else {
                                if (_bind$24 === 226) {
                                  _tmp = 61;
                                } else {
                                  if (_bind$24 === 227) {
                                    _tmp = 62;
                                  } else {
                                    if (_bind$24 >= 228 && _bind$24 <= 233) {
                                      _tmp = 47;
                                    } else {
                                      if (_bind$24 === 234) {
                                        _tmp = 63;
                                      } else {
                                        if (_bind$24 >= 235 && _bind$24 <= 236) {
                                          _tmp = 47;
                                        } else {
                                          if (_bind$24 === 237) {
                                            _tmp = 64;
                                          } else {
                                            if (_bind$24 === 239) {
                                              _tmp = 65;
                                            } else {
                                              if (_bind$24 === 240) {
                                                _tmp = 66;
                                              } else {
                                                if (_bind$24 === 243) {
                                                  _tmp = 67;
                                                } else {
                                                  break _L$2;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 36: {
          _match_pattern = 53;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 37: {
          _match_pattern = 57;
          _match_end = lexbuf.pos;
          const _bind$25 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$25) {
            case 62: {
              _tmp = 102;
              break;
            }
            case 124: {
              _tmp = 103;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 38: {
          _match_pattern = 54;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 39: {
          const _bind$26 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$26 >= 128 && _bind$26 <= 159) {
            _tmp = 2;
          } else {
            if (_bind$26 === 160) {
              _tmp = 3;
            } else {
              if (_bind$26 >= 161 && _bind$26 <= 172) {
                _tmp = 34;
              } else {
                if (_bind$26 === 173) {
                  _tmp = 2;
                } else {
                  if (_bind$26 >= 174 && _bind$26 <= 191) {
                    _tmp = 34;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 40: {
          const _bind$27 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$27 >= 128 && _bind$27 <= 191) {
            _tmp = 34;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 41: {
          const _bind$28 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$28 >= 128 && _bind$28 <= 175) {
            _tmp = 34;
          } else {
            if (_bind$28 >= 176 && _bind$28 <= 191) {
              _tmp = 2;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 42: {
          const _bind$29 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$29 >= 128 && _bind$29 <= 191) {
            _tmp = 2;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 43: {
          const _bind$30 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$30 >= 128 && _bind$30 <= 191) {
            _tmp = 42;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 44: {
          const _bind$31 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$31 >= 128 && _bind$31 <= 131) {
            _tmp = 42;
          } else {
            if (_bind$31 >= 132 && _bind$31 <= 135) {
              _tmp = 40;
            } else {
              if (_bind$31 >= 136 && _bind$31 <= 153) {
                _tmp = 42;
              } else {
                if (_bind$31 === 154) {
                  _tmp = 94;
                } else {
                  if (_bind$31 >= 155 && _bind$31 <= 183) {
                    _tmp = 42;
                  } else {
                    if (_bind$31 >= 184 && _bind$31 <= 187) {
                      _tmp = 40;
                    } else {
                      if (_bind$31 >= 188 && _bind$31 <= 191) {
                        _tmp = 42;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 45: {
          const _bind$32 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$32 === 128) {
            _tmp = 137;
          } else {
            if (_bind$32 === 129) {
              _tmp = 138;
            } else {
              if (_bind$32 === 130) {
                _tmp = 40;
              } else {
                if (_bind$32 >= 131 && _bind$32 <= 132) {
                  _tmp = 42;
                } else {
                  if (_bind$32 >= 133 && _bind$32 <= 134) {
                    _tmp = 40;
                  } else {
                    if (_bind$32 >= 135 && _bind$32 <= 185) {
                      _tmp = 42;
                    } else {
                      if (_bind$32 >= 186 && _bind$32 <= 187) {
                        _tmp = 40;
                      } else {
                        if (_bind$32 >= 188 && _bind$32 <= 190) {
                          _tmp = 42;
                        } else {
                          if (_bind$32 === 191) {
                            _tmp = 139;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 46: {
          const _bind$33 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$33 === 128) {
            _tmp = 93;
          } else {
            if (_bind$33 >= 129 && _bind$33 <= 131) {
              _tmp = 40;
            } else {
              if (_bind$33 >= 132 && _bind$33 <= 134) {
                _tmp = 42;
              } else {
                if (_bind$33 >= 135 && _bind$33 <= 191) {
                  _tmp = 40;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 47: {
          const _bind$34 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$34 >= 128 && _bind$34 <= 191) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 48: {
          const _bind$35 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$35 >= 128 && _bind$35 <= 175) {
            _tmp = 42;
          } else {
            if (_bind$35 >= 176 && _bind$35 <= 191) {
              _tmp = 40;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 49: {
          const _bind$36 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$36 >= 128 && _bind$36 <= 159) {
            _tmp = 40;
          } else {
            if (_bind$36 >= 160 && _bind$36 <= 191) {
              _tmp = 42;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 50: {
          const _bind$37 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$37 >= 128 && _bind$37 <= 163) {
            _tmp = 42;
          } else {
            if (_bind$37 >= 164 && _bind$37 <= 171) {
              _tmp = 40;
            } else {
              if (_bind$37 >= 172 && _bind$37 <= 183) {
                _tmp = 42;
              } else {
                if (_bind$37 >= 184 && _bind$37 <= 185) {
                  _tmp = 40;
                } else {
                  if (_bind$37 === 186) {
                    _tmp = 42;
                  } else {
                    if (_bind$37 === 187) {
                      _tmp = 92;
                    } else {
                      if (_bind$37 >= 188 && _bind$37 <= 191) {
                        _tmp = 42;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 51: {
          const _bind$38 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$38 >= 144 && _bind$38 <= 158) {
            _tmp = 43;
          } else {
            if (_bind$38 === 159) {
              _tmp = 55;
            } else {
              if (_bind$38 >= 160 && _bind$38 <= 174) {
                _tmp = 47;
              } else {
                if (_bind$38 === 175) {
                  _tmp = 56;
                } else {
                  if (_bind$38 >= 176 && _bind$38 <= 178) {
                    _tmp = 47;
                  } else {
                    if (_bind$38 >= 179 && _bind$38 <= 191) {
                      _tmp = 43;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 52: {
          const _bind$39 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$39 >= 128 && _bind$39 <= 191) {
            _tmp = 43;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 53: {
          const _bind$40 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$40 >= 128 && _bind$40 <= 159) {
            _tmp = 43;
          } else {
            if (_bind$40 === 160) {
              _tmp = 54;
            } else {
              if (_bind$40 >= 161 && _bind$40 <= 191) {
                _tmp = 43;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 54: {
          const _bind$41 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$41 >= 128 && _bind$41 <= 131) {
            _tmp = 42;
          } else {
            if (_bind$41 >= 132 && _bind$41 <= 135) {
              _tmp = 40;
            } else {
              if (_bind$41 >= 136 && _bind$41 <= 191) {
                _tmp = 42;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 55: {
          const _bind$42 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$42 >= 128 && _bind$42 <= 175) {
            _tmp = 40;
          } else {
            if (_bind$42 >= 176 && _bind$42 <= 191) {
              _tmp = 42;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 56: {
          const _bind$43 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$43 >= 128 && _bind$43 <= 159) {
            _tmp = 42;
          } else {
            if (_bind$43 >= 160 && _bind$43 <= 168) {
              _tmp = 40;
            } else {
              if (_bind$43 >= 169 && _bind$43 <= 191) {
                _tmp = 42;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 57: {
          _match_pattern = 68;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end + -1 | 0;
          break _L$2;
        }
        case 58: {
          const _bind$44 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$44 >= 161 && _bind$44 <= 172) {
            _tmp = 34;
          } else {
            if (_bind$44 >= 174 && _bind$44 <= 191) {
              _tmp = 34;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 59: {
          const _bind$45 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$45 >= 128 && _bind$45 <= 175) {
            _tmp = 34;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 60: {
          const _bind$46 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$46 >= 132 && _bind$46 <= 135) {
            _tmp = 40;
          } else {
            if (_bind$46 >= 184 && _bind$46 <= 187) {
              _tmp = 40;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 61: {
          const _bind$47 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$47 >= 129 && _bind$47 <= 130) {
            _tmp = 40;
          } else {
            if (_bind$47 >= 133 && _bind$47 <= 134) {
              _tmp = 40;
            } else {
              if (_bind$47 >= 186 && _bind$47 <= 187) {
                _tmp = 40;
              } else {
                if (_bind$47 === 191) {
                  _tmp = 143;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 62: {
          const _bind$48 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$48 >= 128 && _bind$48 <= 131) {
            _tmp = 40;
          } else {
            if (_bind$48 >= 135 && _bind$48 <= 191) {
              _tmp = 40;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 63: {
          const _bind$49 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$49 >= 176 && _bind$49 <= 191) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 64: {
          const _bind$50 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$50 >= 128 && _bind$50 <= 159) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 65: {
          const _bind$51 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$51 >= 164 && _bind$51 <= 171) {
            _tmp = 40;
          } else {
            if (_bind$51 >= 184 && _bind$51 <= 185) {
              _tmp = 40;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 66: {
          const _bind$52 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$52 === 159) {
            _tmp = 141;
          } else {
            if (_bind$52 >= 160 && _bind$52 <= 174) {
              _tmp = 47;
            } else {
              if (_bind$52 === 175) {
                _tmp = 142;
              } else {
                if (_bind$52 >= 176 && _bind$52 <= 178) {
                  _tmp = 47;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 67: {
          const _bind$53 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$53 === 160) {
            _tmp = 140;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 68: {
          const _bind$54 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$54 >= 161 && _bind$54 <= 172) {
            _tmp = 30;
          } else {
            if (_bind$54 >= 174 && _bind$54 <= 191) {
              _tmp = 30;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 69: {
          const _bind$55 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$55 >= 128 && _bind$55 <= 191) {
            _tmp = 30;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 70: {
          const _bind$56 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$56 >= 128 && _bind$56 <= 175) {
            _tmp = 30;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 71: {
          const _bind$57 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$57 >= 132 && _bind$57 <= 135) {
            _tmp = 69;
          } else {
            if (_bind$57 >= 184 && _bind$57 <= 187) {
              _tmp = 69;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 72: {
          const _bind$58 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$58 >= 129 && _bind$58 <= 130) {
            _tmp = 69;
          } else {
            if (_bind$58 >= 133 && _bind$58 <= 134) {
              _tmp = 69;
            } else {
              if (_bind$58 >= 186 && _bind$58 <= 187) {
                _tmp = 69;
              } else {
                if (_bind$58 === 191) {
                  _tmp = 147;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 73: {
          const _bind$59 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$59 >= 128 && _bind$59 <= 131) {
            _tmp = 69;
          } else {
            if (_bind$59 >= 135 && _bind$59 <= 191) {
              _tmp = 69;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 74: {
          const _bind$60 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$60 >= 128 && _bind$60 <= 191) {
            _tmp = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 75: {
          const _bind$61 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$61 >= 176 && _bind$61 <= 191) {
            _tmp = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 76: {
          const _bind$62 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$62 >= 128 && _bind$62 <= 159) {
            _tmp = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 77: {
          const _bind$63 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$63 >= 164 && _bind$63 <= 171) {
            _tmp = 69;
          } else {
            if (_bind$63 >= 184 && _bind$63 <= 185) {
              _tmp = 69;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 78: {
          const _bind$64 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$64 === 159) {
            _tmp = 145;
          } else {
            if (_bind$64 >= 160 && _bind$64 <= 174) {
              _tmp = 74;
            } else {
              if (_bind$64 === 175) {
                _tmp = 146;
              } else {
                if (_bind$64 >= 176 && _bind$64 <= 178) {
                  _tmp = 74;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 79: {
          const _bind$65 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$65 === 160) {
            _tmp = 144;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 80: {
          _match_pattern = 64;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$66 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$66 === 46) {
            _tmp = 148;
          } else {
            if (_bind$66 >= 48 && _bind$66 <= 57) {
              _tmp = 149;
            } else {
              if (_bind$66 === 69) {
                _tmp = 150;
              } else {
                if (_bind$66 === 95) {
                  _tmp = 149;
                } else {
                  if (_bind$66 === 101) {
                    _tmp = 150;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 81: {
          const _bind$67 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$67 >= 48 && _bind$67 <= 49) {
            _tmp = 152;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 82: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$68 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$68 === 46) {
            _tmp = 151;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 83: {
          const _bind$69 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$69 >= 48 && _bind$69 <= 55) {
            _tmp = 153;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 84: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$70 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$70) {
            case 46: {
              _tmp = 151;
              break;
            }
            case 76: {
              _tmp = 82;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 85: {
          const _bind$71 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$71 >= 48 && _bind$71 <= 57) {
            _tmp = 154;
          } else {
            if (_bind$71 >= 65 && _bind$71 <= 70) {
              _tmp = 154;
            } else {
              if (_bind$71 >= 97 && _bind$71 <= 102) {
                _tmp = 154;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 86: {
          const _bind$72 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$72 === 39) {
            _tmp = 159;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 87: {
          const _bind$73 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$73) {
            case 32: {
              _tmp = 155;
              break;
            }
            case 34: {
              _tmp = 155;
              break;
            }
            case 39: {
              _tmp = 155;
              break;
            }
            case 92: {
              _tmp = 155;
              break;
            }
            case 98: {
              _tmp = 155;
              break;
            }
            case 110: {
              _tmp = 155;
              break;
            }
            case 111: {
              _tmp = 156;
              break;
            }
            case 114: {
              _tmp = 155;
              break;
            }
            case 116: {
              _tmp = 155;
              break;
            }
            case 117: {
              _tmp = 157;
              break;
            }
            case 120: {
              _tmp = 158;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 88: {
          const _bind$74 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$74 >= 128 && _bind$74 <= 191) {
            _tmp = 86;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 89: {
          const _bind$75 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$75 >= 128 && _bind$75 <= 191) {
            _tmp = 88;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 90: {
          const _bind$76 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$76 >= 144 && _bind$76 <= 191) {
            _tmp = 89;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 91: {
          const _bind$77 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$77 >= 128 && _bind$77 <= 191) {
            _tmp = 89;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 92: {
          const _bind$78 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$78 >= 128 && _bind$78 <= 190) {
            _tmp = 2;
          } else {
            if (_bind$78 === 191) {
              _tmp = 3;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 93: {
          const _bind$79 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$79 === 128) {
            _tmp = 160;
          } else {
            if (_bind$79 >= 129 && _bind$79 <= 191) {
              _tmp = 34;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 94: {
          const _bind$80 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$80 === 128) {
            _tmp = 3;
          } else {
            if (_bind$80 >= 129 && _bind$80 <= 191) {
              _tmp = 2;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 95: {
          const _bind$81 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$81 === 160) {
            _tmp = 3;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 96: {
          const _bind$82 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$82 === 154) {
            _tmp = 162;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 97: {
          const _bind$83 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$83) {
            case 128: {
              _tmp = 163;
              break;
            }
            case 129: {
              _tmp = 164;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 98: {
          const _bind$84 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$84 === 128) {
            _tmp = 162;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 99: {
          const _bind$85 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$85 === 187) {
            _tmp = 161;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 100: {
          _match_pattern = 61;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 101: {
          _match_pattern = 27;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_start + 1 | 0;
          _capture_1_start = _match_start;
          _capture_1_end = _match_start + 2 | 0;
          break _L$2;
        }
        case 102: {
          _match_pattern = 55;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 103: {
          _match_pattern = 56;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 104: {
          _match_pattern = 46;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 105: {
          _match_pattern = 47;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 106: {
          _match_pattern = 49;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 107: {
          _match_pattern = 45;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 108: {
          _match_pattern = 40;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 109: {
          _match_pattern = 32;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 110: {
          _match_pattern = 37;
          _match_end = lexbuf.pos;
          const _bind$86 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$86) {
            case 46: {
              _tmp = 181;
              break;
            }
            case 60: {
              _tmp = 182;
              break;
            }
            case 61: {
              _tmp = 183;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 111: {
          _match_pattern = 33;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          _capture_1_start = _match_start + 1 | 0;
          _capture_1_end = _match_end;
          const _bind$87 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$87 >= 48 && _bind$87 <= 57) {
            _tmp = 111;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 112: {
          _match_pattern = 38;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 1 | 0;
          _capture_0_end.val = _match_end;
          const _bind$88 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$88 >= 48 && _bind$88 <= 57) {
            _tmp = 112;
          } else {
            if (_bind$88 >= 65 && _bind$88 <= 90) {
              _tmp = 112;
            } else {
              if (_bind$88 === 95) {
                _tmp = 112;
              } else {
                if (_bind$88 >= 97 && _bind$88 <= 122) {
                  _tmp = 112;
                } else {
                  if (_bind$88 === 194) {
                    _tmp = 169;
                  } else {
                    if (_bind$88 >= 195 && _bind$88 <= 201) {
                      _tmp = 170;
                    } else {
                      if (_bind$88 === 202) {
                        _tmp = 171;
                      } else {
                        if (_bind$88 === 225) {
                          _tmp = 172;
                        } else {
                          if (_bind$88 === 226) {
                            _tmp = 173;
                          } else {
                            if (_bind$88 === 227) {
                              _tmp = 174;
                            } else {
                              if (_bind$88 >= 228 && _bind$88 <= 233) {
                                _tmp = 175;
                              } else {
                                if (_bind$88 === 234) {
                                  _tmp = 176;
                                } else {
                                  if (_bind$88 >= 235 && _bind$88 <= 236) {
                                    _tmp = 175;
                                  } else {
                                    if (_bind$88 === 237) {
                                      _tmp = 177;
                                    } else {
                                      if (_bind$88 === 239) {
                                        _tmp = 178;
                                      } else {
                                        if (_bind$88 === 240) {
                                          _tmp = 179;
                                        } else {
                                          if (_bind$88 === 243) {
                                            _tmp = 180;
                                          } else {
                                            break _L$2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 113: {
          _match_pattern = 39;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 1 | 0;
          _capture_0_end.val = _match_end;
          const _bind$89 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$89 >= 48 && _bind$89 <= 57) {
            _tmp = 113;
          } else {
            if (_bind$89 >= 65 && _bind$89 <= 90) {
              _tmp = 113;
            } else {
              if (_bind$89 === 95) {
                _tmp = 113;
              } else {
                if (_bind$89 >= 97 && _bind$89 <= 122) {
                  _tmp = 113;
                } else {
                  if (_bind$89 === 194) {
                    _tmp = 114;
                  } else {
                    if (_bind$89 >= 195 && _bind$89 <= 201) {
                      _tmp = 115;
                    } else {
                      if (_bind$89 === 202) {
                        _tmp = 116;
                      } else {
                        if (_bind$89 === 225) {
                          _tmp = 117;
                        } else {
                          if (_bind$89 === 226) {
                            _tmp = 118;
                          } else {
                            if (_bind$89 === 227) {
                              _tmp = 119;
                            } else {
                              if (_bind$89 >= 228 && _bind$89 <= 233) {
                                _tmp = 120;
                              } else {
                                if (_bind$89 === 234) {
                                  _tmp = 121;
                                } else {
                                  if (_bind$89 >= 235 && _bind$89 <= 236) {
                                    _tmp = 120;
                                  } else {
                                    if (_bind$89 === 237) {
                                      _tmp = 122;
                                    } else {
                                      if (_bind$89 === 239) {
                                        _tmp = 123;
                                      } else {
                                        if (_bind$89 === 240) {
                                          _tmp = 124;
                                        } else {
                                          if (_bind$89 === 243) {
                                            _tmp = 125;
                                          } else {
                                            break _L$2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 114: {
          const _bind$90 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$90 >= 161 && _bind$90 <= 172) {
            _tmp = 113;
          } else {
            if (_bind$90 >= 174 && _bind$90 <= 191) {
              _tmp = 113;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 115: {
          const _bind$91 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$91 >= 128 && _bind$91 <= 191) {
            _tmp = 113;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 116: {
          const _bind$92 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$92 >= 128 && _bind$92 <= 175) {
            _tmp = 113;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 117: {
          const _bind$93 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$93 >= 132 && _bind$93 <= 135) {
            _tmp = 115;
          } else {
            if (_bind$93 >= 184 && _bind$93 <= 187) {
              _tmp = 115;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 118: {
          const _bind$94 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$94 >= 129 && _bind$94 <= 130) {
            _tmp = 115;
          } else {
            if (_bind$94 >= 133 && _bind$94 <= 134) {
              _tmp = 115;
            } else {
              if (_bind$94 >= 186 && _bind$94 <= 187) {
                _tmp = 115;
              } else {
                if (_bind$94 === 191) {
                  _tmp = 168;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 119: {
          const _bind$95 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$95 >= 128 && _bind$95 <= 131) {
            _tmp = 115;
          } else {
            if (_bind$95 >= 135 && _bind$95 <= 191) {
              _tmp = 115;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 120: {
          const _bind$96 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$96 >= 128 && _bind$96 <= 191) {
            _tmp = 115;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 121: {
          const _bind$97 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$97 >= 176 && _bind$97 <= 191) {
            _tmp = 115;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 122: {
          const _bind$98 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$98 >= 128 && _bind$98 <= 159) {
            _tmp = 115;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 123: {
          const _bind$99 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$99 >= 164 && _bind$99 <= 171) {
            _tmp = 115;
          } else {
            if (_bind$99 >= 184 && _bind$99 <= 185) {
              _tmp = 115;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 124: {
          const _bind$100 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$100 === 159) {
            _tmp = 166;
          } else {
            if (_bind$100 >= 160 && _bind$100 <= 174) {
              _tmp = 120;
            } else {
              if (_bind$100 === 175) {
                _tmp = 167;
              } else {
                if (_bind$100 >= 176 && _bind$100 <= 178) {
                  _tmp = 120;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 125: {
          const _bind$101 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$101 === 160) {
            _tmp = 165;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 126: {
          _match_pattern = 4;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$102 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$102 >= 0 && _bind$102 <= 9) {
            _tmp = 126;
          } else {
            if (_bind$102 >= 11 && _bind$102 <= 12) {
              _tmp = 126;
            } else {
              if (_bind$102 >= 14 && _bind$102 <= 127) {
                _tmp = 126;
              } else {
                if (_bind$102 >= 194 && _bind$102 <= 223) {
                  _tmp = 184;
                } else {
                  if (_bind$102 >= 224 && _bind$102 <= 239) {
                    _tmp = 185;
                  } else {
                    if (_bind$102 === 240) {
                      _tmp = 186;
                    } else {
                      if (_bind$102 >= 241 && _bind$102 <= 244) {
                        _tmp = 187;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 127: {
          _match_pattern = 22;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 128: {
          _match_pattern = 16;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 1 | 0;
          _capture_0_end.val = _match_end;
          const _bind$103 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$103 === 47) {
            _tmp = 188;
          } else {
            if (_bind$103 >= 48 && _bind$103 <= 57) {
              _tmp = 128;
            } else {
              if (_bind$103 >= 65 && _bind$103 <= 90) {
                _tmp = 128;
              } else {
                if (_bind$103 === 95) {
                  _tmp = 128;
                } else {
                  if (_bind$103 >= 97 && _bind$103 <= 122) {
                    _tmp = 128;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 129: {
          _match_pattern = 15;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 1 | 0;
          _capture_0_end.val = _match_end;
          const _bind$104 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$104 >= 0 && _bind$104 <= 9) {
            _tmp = 129;
          } else {
            if (_bind$104 >= 11 && _bind$104 <= 12) {
              _tmp = 129;
            } else {
              if (_bind$104 >= 14 && _bind$104 <= 127) {
                _tmp = 129;
              } else {
                if (_bind$104 >= 194 && _bind$104 <= 223) {
                  _tmp = 189;
                } else {
                  if (_bind$104 >= 224 && _bind$104 <= 239) {
                    _tmp = 190;
                  } else {
                    if (_bind$104 === 240) {
                      _tmp = 191;
                    } else {
                      if (_bind$104 >= 241 && _bind$104 <= 244) {
                        _tmp = 192;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 130: {
          _match_pattern = 14;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 2 | 0;
          _capture_0_end.val = _match_end;
          const _bind$105 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$105 >= 0 && _bind$105 <= 9) {
            _tmp = 130;
          } else {
            if (_bind$105 >= 11 && _bind$105 <= 12) {
              _tmp = 130;
            } else {
              if (_bind$105 >= 14 && _bind$105 <= 127) {
                _tmp = 130;
              } else {
                if (_bind$105 >= 194 && _bind$105 <= 223) {
                  _tmp = 193;
                } else {
                  if (_bind$105 >= 224 && _bind$105 <= 239) {
                    _tmp = 194;
                  } else {
                    if (_bind$105 === 240) {
                      _tmp = 195;
                    } else {
                      if (_bind$105 >= 241 && _bind$105 <= 244) {
                        _tmp = 196;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 131: {
          _match_pattern = 13;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 132: {
          _match_pattern = 12;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 133: {
          _match_pattern = 21;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_start + 2 | 0;
          const _bind$106 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$106 >= 0 && _bind$106 <= 91) {
            _tmp = 197;
          } else {
            if (_bind$106 === 92) {
              _tmp = 198;
            } else {
              if (_bind$106 >= 93 && _bind$106 <= 127) {
                _tmp = 197;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 134: {
          _match_pattern = 3;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 135: {
          _match_pattern = 43;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 136: {
          _match_pattern = 2;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 137: {
          const _bind$107 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$107 >= 128 && _bind$107 <= 138) {
            _tmp = 3;
          } else {
            if (_bind$107 >= 139 && _bind$107 <= 167) {
              _tmp = 2;
            } else {
              if (_bind$107 >= 168 && _bind$107 <= 169) {
                _tmp = 4;
              } else {
                if (_bind$107 >= 170 && _bind$107 <= 174) {
                  _tmp = 2;
                } else {
                  if (_bind$107 === 175) {
                    _tmp = 3;
                  } else {
                    if (_bind$107 >= 176 && _bind$107 <= 191) {
                      _tmp = 2;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 138: {
          const _bind$108 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$108 >= 128 && _bind$108 <= 158) {
            _tmp = 34;
          } else {
            if (_bind$108 === 159) {
              _tmp = 160;
            } else {
              if (_bind$108 >= 160 && _bind$108 <= 191) {
                _tmp = 34;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 139: {
          const _bind$109 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$109 >= 128 && _bind$109 <= 175) {
            _tmp = 2;
          } else {
            if (_bind$109 >= 176 && _bind$109 <= 191) {
              _tmp = 34;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 140: {
          const _bind$110 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$110 >= 132 && _bind$110 <= 135) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 141: {
          const _bind$111 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$111 >= 128 && _bind$111 <= 175) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 142: {
          const _bind$112 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$112 >= 160 && _bind$112 <= 168) {
            _tmp = 40;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 143: {
          const _bind$113 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$113 >= 176 && _bind$113 <= 191) {
            _tmp = 34;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 144: {
          const _bind$114 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$114 >= 132 && _bind$114 <= 135) {
            _tmp = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 145: {
          const _bind$115 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$115 >= 128 && _bind$115 <= 175) {
            _tmp = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 146: {
          const _bind$116 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$116 >= 160 && _bind$116 <= 168) {
            _tmp = 69;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 147: {
          const _bind$117 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$117 >= 176 && _bind$117 <= 191) {
            _tmp = 30;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 148: {
          _match_pattern = 63;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end + -2 | 0;
          break _L$2;
        }
        case 149: {
          _match_pattern = 64;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$118 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$118 >= 48 && _bind$118 <= 57) {
            _tmp = 149;
          } else {
            if (_bind$118 === 69) {
              _tmp = 150;
            } else {
              if (_bind$118 === 95) {
                _tmp = 149;
              } else {
                if (_bind$118 === 101) {
                  _tmp = 150;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 150: {
          const _bind$119 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$119 === 43) {
            _tmp = 199;
          } else {
            if (_bind$119 === 45) {
              _tmp = 199;
            } else {
              if (_bind$119 >= 48 && _bind$119 <= 57) {
                _tmp = 200;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 151: {
          const _bind$120 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$120 === 46) {
            _tmp = 148;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 152: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$121 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$121 === 46) {
            _tmp = 151;
          } else {
            if (_bind$121 >= 48 && _bind$121 <= 49) {
              _tmp = 152;
            } else {
              if (_bind$121 === 76) {
                _tmp = 82;
              } else {
                if (_bind$121 === 78) {
                  _tmp = 82;
                } else {
                  if (_bind$121 === 85) {
                    _tmp = 84;
                  } else {
                    if (_bind$121 === 95) {
                      _tmp = 152;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 153: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$122 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$122 === 46) {
            _tmp = 151;
          } else {
            if (_bind$122 >= 48 && _bind$122 <= 55) {
              _tmp = 153;
            } else {
              if (_bind$122 === 76) {
                _tmp = 82;
              } else {
                if (_bind$122 === 78) {
                  _tmp = 82;
                } else {
                  if (_bind$122 === 85) {
                    _tmp = 84;
                  } else {
                    if (_bind$122 === 95) {
                      _tmp = 153;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 154: {
          _match_pattern = 65;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$123 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$123 === 46) {
            _tmp = 201;
          } else {
            if (_bind$123 >= 48 && _bind$123 <= 57) {
              _tmp = 154;
            } else {
              if (_bind$123 >= 65 && _bind$123 <= 70) {
                _tmp = 154;
              } else {
                if (_bind$123 === 76) {
                  _tmp = 82;
                } else {
                  if (_bind$123 === 78) {
                    _tmp = 82;
                  } else {
                    if (_bind$123 === 85) {
                      _tmp = 84;
                    } else {
                      if (_bind$123 === 95) {
                        _tmp = 154;
                      } else {
                        if (_bind$123 >= 97 && _bind$123 <= 102) {
                          _tmp = 154;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 155: {
          const _bind$124 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$124 === 39) {
            _tmp = 206;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 156: {
          const _bind$125 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$125 >= 48 && _bind$125 <= 51) {
            _tmp = 204;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 157: {
          const _bind$126 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$126 >= 48 && _bind$126 <= 57) {
            _tmp = 202;
          } else {
            if (_bind$126 >= 65 && _bind$126 <= 70) {
              _tmp = 202;
            } else {
              if (_bind$126 >= 97 && _bind$126 <= 102) {
                _tmp = 202;
              } else {
                if (_bind$126 === 123) {
                  _tmp = 203;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 158: {
          const _bind$127 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$127 >= 48 && _bind$127 <= 57) {
            _tmp = 205;
          } else {
            if (_bind$127 >= 65 && _bind$127 <= 70) {
              _tmp = 205;
            } else {
              if (_bind$127 >= 97 && _bind$127 <= 102) {
                _tmp = 205;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 159: {
          _match_pattern = 5;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          break _L$2;
        }
        case 160: {
          _match_pattern = 1;
          _match_end = lexbuf.pos;
          const _bind$128 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$128 === 9) {
            _tmp = 3;
          } else {
            if (_bind$128 >= 11 && _bind$128 <= 12) {
              _tmp = 3;
            } else {
              if (_bind$128 === 32) {
                _tmp = 3;
              } else {
                if (_bind$128 >= 48 && _bind$128 <= 57) {
                  _tmp = 34;
                } else {
                  if (_bind$128 >= 65 && _bind$128 <= 90) {
                    _tmp = 34;
                  } else {
                    if (_bind$128 === 95) {
                      _tmp = 34;
                    } else {
                      if (_bind$128 >= 97 && _bind$128 <= 122) {
                        _tmp = 34;
                      } else {
                        if (_bind$128 === 126) {
                          _tmp = 57;
                        } else {
                          if (_bind$128 === 194) {
                            _tmp = 207;
                          } else {
                            if (_bind$128 >= 195 && _bind$128 <= 201) {
                              _tmp = 40;
                            } else {
                              if (_bind$128 === 202) {
                                _tmp = 59;
                              } else {
                                if (_bind$128 === 225) {
                                  _tmp = 208;
                                } else {
                                  if (_bind$128 === 226) {
                                    _tmp = 209;
                                  } else {
                                    if (_bind$128 === 227) {
                                      _tmp = 210;
                                    } else {
                                      if (_bind$128 >= 228 && _bind$128 <= 233) {
                                        _tmp = 47;
                                      } else {
                                        if (_bind$128 === 234) {
                                          _tmp = 63;
                                        } else {
                                          if (_bind$128 >= 235 && _bind$128 <= 236) {
                                            _tmp = 47;
                                          } else {
                                            if (_bind$128 === 237) {
                                              _tmp = 64;
                                            } else {
                                              if (_bind$128 === 239) {
                                                _tmp = 211;
                                              } else {
                                                if (_bind$128 === 240) {
                                                  _tmp = 66;
                                                } else {
                                                  if (_bind$128 === 243) {
                                                    _tmp = 67;
                                                  } else {
                                                    break _L$2;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 161: {
          const _bind$129 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$129 === 191) {
            _tmp = 3;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 162: {
          const _bind$130 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$130 === 128) {
            _tmp = 3;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 163: {
          const _bind$131 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$131 >= 128 && _bind$131 <= 138) {
            _tmp = 3;
          } else {
            if (_bind$131 === 175) {
              _tmp = 3;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 164: {
          const _bind$132 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$132 === 159) {
            _tmp = 3;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 165: {
          const _bind$133 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$133 >= 132 && _bind$133 <= 135) {
            _tmp = 115;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 166: {
          const _bind$134 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$134 >= 128 && _bind$134 <= 175) {
            _tmp = 115;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 167: {
          const _bind$135 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$135 >= 160 && _bind$135 <= 168) {
            _tmp = 115;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 168: {
          const _bind$136 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$136 >= 176 && _bind$136 <= 191) {
            _tmp = 113;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 169: {
          const _bind$137 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$137 >= 161 && _bind$137 <= 172) {
            _tmp = 112;
          } else {
            if (_bind$137 >= 174 && _bind$137 <= 191) {
              _tmp = 112;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 170: {
          const _bind$138 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$138 >= 128 && _bind$138 <= 191) {
            _tmp = 112;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 171: {
          const _bind$139 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$139 >= 128 && _bind$139 <= 175) {
            _tmp = 112;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 172: {
          const _bind$140 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$140 >= 132 && _bind$140 <= 135) {
            _tmp = 170;
          } else {
            if (_bind$140 >= 184 && _bind$140 <= 187) {
              _tmp = 170;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 173: {
          const _bind$141 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$141 >= 129 && _bind$141 <= 130) {
            _tmp = 170;
          } else {
            if (_bind$141 >= 133 && _bind$141 <= 134) {
              _tmp = 170;
            } else {
              if (_bind$141 >= 186 && _bind$141 <= 187) {
                _tmp = 170;
              } else {
                if (_bind$141 === 191) {
                  _tmp = 215;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 174: {
          const _bind$142 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$142 >= 128 && _bind$142 <= 131) {
            _tmp = 170;
          } else {
            if (_bind$142 >= 135 && _bind$142 <= 191) {
              _tmp = 170;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 175: {
          const _bind$143 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$143 >= 128 && _bind$143 <= 191) {
            _tmp = 170;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 176: {
          const _bind$144 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$144 >= 176 && _bind$144 <= 191) {
            _tmp = 170;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 177: {
          const _bind$145 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$145 >= 128 && _bind$145 <= 159) {
            _tmp = 170;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 178: {
          const _bind$146 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$146 >= 164 && _bind$146 <= 171) {
            _tmp = 170;
          } else {
            if (_bind$146 >= 184 && _bind$146 <= 185) {
              _tmp = 170;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 179: {
          const _bind$147 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$147 === 159) {
            _tmp = 213;
          } else {
            if (_bind$147 >= 160 && _bind$147 <= 174) {
              _tmp = 175;
            } else {
              if (_bind$147 === 175) {
                _tmp = 214;
              } else {
                if (_bind$147 >= 176 && _bind$147 <= 178) {
                  _tmp = 175;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 180: {
          const _bind$148 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$148 === 160) {
            _tmp = 212;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 181: {
          _match_pattern = 34;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 182: {
          _match_pattern = 36;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 183: {
          _match_pattern = 35;
          _match_end = lexbuf.pos;
          break _L$2;
        }
        case 184: {
          const _bind$149 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$149 >= 128 && _bind$149 <= 191) {
            _tmp = 126;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 185: {
          const _bind$150 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$150 >= 128 && _bind$150 <= 191) {
            _tmp = 184;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 186: {
          const _bind$151 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$151 >= 144 && _bind$151 <= 191) {
            _tmp = 185;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 187: {
          const _bind$152 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$152 >= 128 && _bind$152 <= 191) {
            _tmp = 185;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 188: {
          const _bind$153 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$153 >= 65 && _bind$153 <= 90) {
            _tmp = 128;
          } else {
            if (_bind$153 === 95) {
              _tmp = 128;
            } else {
              if (_bind$153 >= 97 && _bind$153 <= 122) {
                _tmp = 128;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 189: {
          const _bind$154 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$154 >= 128 && _bind$154 <= 191) {
            _tmp = 129;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 190: {
          const _bind$155 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$155 >= 128 && _bind$155 <= 191) {
            _tmp = 189;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 191: {
          const _bind$156 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$156 >= 144 && _bind$156 <= 191) {
            _tmp = 190;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 192: {
          const _bind$157 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$157 >= 128 && _bind$157 <= 191) {
            _tmp = 190;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 193: {
          const _bind$158 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$158 >= 128 && _bind$158 <= 191) {
            _tmp = 130;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 194: {
          const _bind$159 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$159 >= 128 && _bind$159 <= 191) {
            _tmp = 193;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 195: {
          const _bind$160 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$160 >= 144 && _bind$160 <= 191) {
            _tmp = 194;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 196: {
          const _bind$161 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$161 >= 128 && _bind$161 <= 191) {
            _tmp = 194;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 197: {
          const _bind$162 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$162 === 39) {
            _tmp = 216;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 198: {
          const _bind$163 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          switch (_bind$163) {
            case 32: {
              _tmp = 217;
              break;
            }
            case 34: {
              _tmp = 217;
              break;
            }
            case 39: {
              _tmp = 218;
              break;
            }
            case 92: {
              _tmp = 217;
              break;
            }
            case 98: {
              _tmp = 217;
              break;
            }
            case 110: {
              _tmp = 217;
              break;
            }
            case 111: {
              _tmp = 219;
              break;
            }
            case 114: {
              _tmp = 217;
              break;
            }
            case 116: {
              _tmp = 217;
              break;
            }
            case 120: {
              _tmp = 220;
              break;
            }
            default: {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 199: {
          const _bind$164 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$164 >= 48 && _bind$164 <= 57) {
            _tmp = 200;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 200: {
          _match_pattern = 64;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$165 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$165 >= 48 && _bind$165 <= 57) {
            _tmp = 200;
          } else {
            if (_bind$165 === 95) {
              _tmp = 200;
            } else {
              break _L$2;
            }
          }
          continue _L$2;
        }
        case 201: {
          _match_pattern = 64;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$166 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$166 === 46) {
            _tmp = 148;
          } else {
            if (_bind$166 >= 48 && _bind$166 <= 57) {
              _tmp = 221;
            } else {
              if (_bind$166 >= 65 && _bind$166 <= 70) {
                _tmp = 221;
              } else {
                if (_bind$166 === 80) {
                  _tmp = 150;
                } else {
                  if (_bind$166 === 95) {
                    _tmp = 221;
                  } else {
                    if (_bind$166 >= 97 && _bind$166 <= 102) {
                      _tmp = 221;
                    } else {
                      if (_bind$166 === 112) {
                        _tmp = 150;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 202: {
          const _bind$167 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$167 >= 48 && _bind$167 <= 57) {
            _tmp = 223;
          } else {
            if (_bind$167 >= 65 && _bind$167 <= 70) {
              _tmp = 223;
            } else {
              if (_bind$167 >= 97 && _bind$167 <= 102) {
                _tmp = 223;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 203: {
          const _bind$168 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$168 >= 48 && _bind$168 <= 57) {
            _tmp = 203;
          } else {
            if (_bind$168 >= 65 && _bind$168 <= 70) {
              _tmp = 203;
            } else {
              if (_bind$168 >= 97 && _bind$168 <= 102) {
                _tmp = 203;
              } else {
                if (_bind$168 === 125) {
                  _tmp = 222;
                } else {
                  break _L$2;
                }
              }
            }
          }
          continue _L$2;
        }
        case 204: {
          const _bind$169 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$169 >= 48 && _bind$169 <= 55) {
            _tmp = 224;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 205: {
          const _bind$170 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$170 >= 48 && _bind$170 <= 57) {
            _tmp = 225;
          } else {
            if (_bind$170 >= 65 && _bind$170 <= 70) {
              _tmp = 225;
            } else {
              if (_bind$170 >= 97 && _bind$170 <= 102) {
                _tmp = 225;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 206: {
          _match_pattern = 6;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_start + 4 | 0;
          break _L$2;
        }
        case 207: {
          const _bind$171 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$171 === 160) {
            _tmp = 3;
          } else {
            if (_bind$171 >= 161 && _bind$171 <= 172) {
              _tmp = 34;
            } else {
              if (_bind$171 >= 174 && _bind$171 <= 191) {
                _tmp = 34;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 208: {
          const _bind$172 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$172 >= 132 && _bind$172 <= 135) {
            _tmp = 40;
          } else {
            if (_bind$172 === 154) {
              _tmp = 162;
            } else {
              if (_bind$172 >= 184 && _bind$172 <= 187) {
                _tmp = 40;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 209: {
          const _bind$173 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$173 === 128) {
            _tmp = 163;
          } else {
            if (_bind$173 === 129) {
              _tmp = 138;
            } else {
              if (_bind$173 === 130) {
                _tmp = 40;
              } else {
                if (_bind$173 >= 133 && _bind$173 <= 134) {
                  _tmp = 40;
                } else {
                  if (_bind$173 >= 186 && _bind$173 <= 187) {
                    _tmp = 40;
                  } else {
                    if (_bind$173 === 191) {
                      _tmp = 143;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 210: {
          const _bind$174 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$174 === 128) {
            _tmp = 93;
          } else {
            if (_bind$174 >= 129 && _bind$174 <= 131) {
              _tmp = 40;
            } else {
              if (_bind$174 >= 135 && _bind$174 <= 191) {
                _tmp = 40;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 211: {
          const _bind$175 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$175 >= 164 && _bind$175 <= 171) {
            _tmp = 40;
          } else {
            if (_bind$175 >= 184 && _bind$175 <= 185) {
              _tmp = 40;
            } else {
              if (_bind$175 === 187) {
                _tmp = 161;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 212: {
          const _bind$176 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$176 >= 132 && _bind$176 <= 135) {
            _tmp = 170;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 213: {
          const _bind$177 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$177 >= 128 && _bind$177 <= 175) {
            _tmp = 170;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 214: {
          const _bind$178 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$178 >= 160 && _bind$178 <= 168) {
            _tmp = 170;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 215: {
          const _bind$179 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$179 >= 176 && _bind$179 <= 191) {
            _tmp = 112;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 216: {
          _match_pattern = 19;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 2 | 0;
          _capture_0_end.val = _match_start + 3 | 0;
          break _L$2;
        }
        case 217: {
          const _bind$180 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$180 === 39) {
            _tmp = 226;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 218: {
          _match_pattern = 19;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 2 | 0;
          _capture_0_end.val = _match_start + 3 | 0;
          const _bind$181 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$181 === 39) {
            _tmp = 226;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 219: {
          const _bind$182 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$182 >= 48 && _bind$182 <= 51) {
            _tmp = 227;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 220: {
          const _bind$183 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$183 >= 48 && _bind$183 <= 57) {
            _tmp = 228;
          } else {
            if (_bind$183 >= 65 && _bind$183 <= 70) {
              _tmp = 228;
            } else {
              if (_bind$183 >= 97 && _bind$183 <= 102) {
                _tmp = 228;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 221: {
          _match_pattern = 64;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_end;
          const _bind$184 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$184 >= 48 && _bind$184 <= 57) {
            _tmp = 221;
          } else {
            if (_bind$184 >= 65 && _bind$184 <= 70) {
              _tmp = 221;
            } else {
              if (_bind$184 === 80) {
                _tmp = 150;
              } else {
                if (_bind$184 === 95) {
                  _tmp = 221;
                } else {
                  if (_bind$184 >= 97 && _bind$184 <= 102) {
                    _tmp = 221;
                  } else {
                    if (_bind$184 === 112) {
                      _tmp = 150;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          continue _L$2;
        }
        case 222: {
          const _bind$185 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$185 === 39) {
            _tmp = 229;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 223: {
          const _bind$186 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$186 >= 48 && _bind$186 <= 57) {
            _tmp = 230;
          } else {
            if (_bind$186 >= 65 && _bind$186 <= 70) {
              _tmp = 230;
            } else {
              if (_bind$186 >= 97 && _bind$186 <= 102) {
                _tmp = 230;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 224: {
          const _bind$187 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$187 >= 48 && _bind$187 <= 55) {
            _tmp = 231;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 225: {
          const _bind$188 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$188 === 39) {
            _tmp = 232;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 226: {
          _match_pattern = 20;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 3 | 0;
          _capture_0_end.val = _match_start + 4 | 0;
          break _L$2;
        }
        case 227: {
          const _bind$189 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$189 >= 48 && _bind$189 <= 55) {
            _tmp = 233;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 228: {
          const _bind$190 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$190 >= 48 && _bind$190 <= 57) {
            _tmp = 234;
          } else {
            if (_bind$190 >= 65 && _bind$190 <= 70) {
              _tmp = 234;
            } else {
              if (_bind$190 >= 97 && _bind$190 <= 102) {
                _tmp = 234;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 229: {
          _match_pattern = 10;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 4 | 0;
          _capture_0_end.val = _match_end + -2 | 0;
          _capture_1_start = _match_start;
          _capture_1_end = _match_end;
          break _L$2;
        }
        case 230: {
          const _bind$191 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$191 >= 48 && _bind$191 <= 57) {
            _tmp = 235;
          } else {
            if (_bind$191 >= 65 && _bind$191 <= 70) {
              _tmp = 235;
            } else {
              if (_bind$191 >= 97 && _bind$191 <= 102) {
                _tmp = 235;
              } else {
                break _L$2;
              }
            }
          }
          continue _L$2;
        }
        case 231: {
          const _bind$192 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$192 === 39) {
            _tmp = 236;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 232: {
          _match_pattern = 7;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_start + 6 | 0;
          break _L$2;
        }
        case 233: {
          const _bind$193 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$193 >= 48 && _bind$193 <= 55) {
            _tmp = 237;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 234: {
          const _bind$194 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$194 === 39) {
            _tmp = 238;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 235: {
          const _bind$195 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$195 === 39) {
            _tmp = 239;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 236: {
          _match_pattern = 8;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_start + 7 | 0;
          break _L$2;
        }
        case 237: {
          const _bind$196 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf);
          if (_bind$196 === 39) {
            _tmp = 240;
          } else {
            break _L$2;
          }
          continue _L$2;
        }
        case 238: {
          _match_pattern = 17;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 4 | 0;
          _capture_0_end.val = _match_start + 6 | 0;
          break _L$2;
        }
        case 239: {
          _match_pattern = 9;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start;
          _capture_0_end.val = _match_start + 8 | 0;
          break _L$2;
        }
        case 240: {
          _match_pattern = 18;
          _match_end = lexbuf.pos;
          _capture_0_start.val = _match_start + 4 | 0;
          _capture_0_end.val = _match_start + 7 | 0;
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 70) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$NEWLINE, _match_start, _match_end, 0);
          env.current_bol = _match_end;
          env.current_line = env.current_line + 1 | 0;
          continue _L;
        }
        case 1: {
          continue _L;
        }
        case 2: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FAT_ARROW, _match_start, _match_end, 0);
          continue _L;
        }
        case 3: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THIN_ARROW, _match_start, _match_end, 0);
          continue _L;
        }
        case 4: {
          const repr = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          if (env.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidComment);
          }
          if (env.comment) {
            const comment = { content: repr, kind: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$InlineTrailing, consumed_by_docstring: moonbitlang$core$ref$$new$35$(false) };
            preserve_comment(comment, _match_start, _match_end);
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT(comment), _match_start, _match_end, 0);
          }
          continue _L;
        }
        case 5: {
          const repr$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 6: {
          const repr$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$3), _match_start, _match_end, 0);
          continue _L;
        }
        case 7: {
          const repr$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$4), _match_start, _match_end, 0);
          continue _L;
        }
        case 8: {
          const repr$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$5), _match_start, _match_end, 0);
          continue _L;
        }
        case 9: {
          const repr$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$6), _match_start, _match_end, 0);
          continue _L;
        }
        case 10: {
          const hex = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          const repr$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$char_for_hex_escape(hex);
          if (_bind$2 === undefined) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _capture_1_start, _capture_1_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$7));
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$7), _match_start, _match_end, 0);
          continue _L;
        }
        case 11: {
          const startpos = _match_start;
          let tok;
          let interps;
          _L$3: {
            _L$4: {
              const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf, env, false, true, startpos);
              if (_bind$3.length === 1) {
                const _x = _bind$3[0];
                if (_x.$tag === 0) {
                  const _InterpLit = _x;
                  const _repr = _InterpLit._0;
                  tok = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING(_repr);
                } else {
                  interps = _bind$3;
                  break _L$4;
                }
              } else {
                interps = _bind$3;
                break _L$4;
              }
              break _L$3;
            }
            tok = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INTERP(interps);
          }
          const endpos = lexbuf.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(env, tok, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, endpos));
          continue _L;
        }
        case 12: {
          const startpos$2 = _match_start;
          let tok$2;
          let _interps;
          _L$4: {
            _L$5: {
              const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf, env, false, false, startpos$2);
              if (_bind$3.length === 1) {
                const _x = _bind$3[0];
                if (_x.$tag === 0) {
                  const _InterpLit = _x;
                  const _repr = _InterpLit._0;
                  tok$2 = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING(_repr);
                } else {
                  _interps = _bind$3;
                  break _L$5;
                }
              } else {
                _interps = _bind$3;
                break _L$5;
              }
              break _L$4;
            }
            tok$2 = $panic();
          }
          const endpos$2 = lexbuf.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(env, tok$2, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos$2), moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, endpos$2));
          continue _L;
        }
        case 13: {
          if (env.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidMultilineString);
          }
          const startpos$3 = _match_start;
          const tok$3 = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_INTERP(moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf, env, true, true, startpos$3));
          const endpos$3 = lexbuf.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(env, tok$3, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos$3), moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, endpos$3));
          continue _L;
        }
        case 14: {
          const s = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          if (env.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidMultilineString);
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_STRING(s), _match_start, _match_end, 0);
          continue _L;
        }
        case 15: {
          const attr = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          if (env.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidAttribute);
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ATTRIBUTE(attr), _match_start, _match_end, 0);
          continue _L;
        }
        case 16: {
          const pkgname = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PACKAGE_NAME(pkgname), _match_start, _match_end, 0);
          continue _L;
        }
        case 17: {
          const hex$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          const literal = `\\x${hex$2}`;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(literal), _match_start, _match_end, 0);
          continue _L;
        }
        case 18: {
          const oct = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          const literal$2 = `\\o${oct}`;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(literal$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 19: {
          const ascii = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start.val, _capture_0_end.val);
          const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$38$(_self, ascii);
          const _p = _self;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(_p.val), _match_start, _match_end, 0);
          continue _L;
        }
        case 20: {
          const e = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start.val, _capture_0_end.val);
          const _self$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$38$(_self$2, e);
          const _p$2 = _self$2;
          const literal$3 = `\\${_p$2.val}`;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(literal$3), _match_start, _match_end, 0);
          continue _L;
        }
        case 21: {
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte(lexbuf, env, _capture_0_start.val);
          continue _L;
        }
        case 22: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPERAMPER, _match_start, _match_end, 0);
          continue _L;
        }
        case 23: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPER, _match_start, _match_end, 0);
          continue _L;
        }
        case 24: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CARET, _match_start, _match_end, 0);
          continue _L;
        }
        case 25: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LPAREN, _match_start, _match_end, 0);
          continue _L;
        }
        case 26: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RPAREN, _match_start, _match_end, 0);
          continue _L;
        }
        case 27: {
          const op = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
          const _self$3 = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$38$(_self$3, op);
          const _p$3 = _self$3;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AUGMENTED_ASSIGNMENT(_p$3.val), _capture_1_start, _capture_1_end, 0);
          continue _L;
        }
        case 28: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3("*"), _match_start, _match_end, 0);
          continue _L;
        }
        case 29: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3("/"), _match_start, _match_end, 0);
          continue _L;
        }
        case 30: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3("%"), _match_start, _match_end, 0);
          continue _L;
        }
        case 31: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMA, _match_start, _match_end, 0);
          continue _L;
        }
        case 32: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LPAREN, _match_start, _match_end, 0);
          continue _L;
        }
        case 33: {
          const repr$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          const digits = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
          let idx;
          let _try_err;
          _L$5: {
            _L$6: {
              const _bind$3 = moonbitlang$core$strconv$$parse_int({ str: digits, start: 0, end: digits.length }, 0);
              if (_bind$3.$tag === 1) {
                const _ok = _bind$3;
                idx = _ok._0;
              } else {
                const _err = _bind$3;
                const _tmp$2 = _err._0;
                _try_err = _tmp$2;
                break _L$6;
              }
              break _L$5;
            }
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _capture_0_start.val, _capture_0_end.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidDotInt(repr$8));
            idx = 0;
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_INT(idx), _capture_0_start.val, _capture_0_end.val, 1);
          continue _L;
        }
        case 34: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELLIPSIS, _match_start, _match_end, 0);
          continue _L;
        }
        case 35: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_INCLUSIVE, _match_start, _match_end, 0);
          continue _L;
        }
        case 36: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_EXCLUSIVE, _match_start, _match_end, 0);
          continue _L;
        }
        case 37: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOTDOT, _match_start, _match_end, 0);
          continue _L;
        }
        case 38: {
          const name = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_UIDENT(name), _capture_0_start.val, _capture_0_end.val, 0);
          continue _L;
        }
        case 39: {
          const name$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LIDENT(name$2), _capture_0_start.val, _capture_0_end.val, 0);
          continue _L;
        }
        case 40: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLONCOLON, _match_start, _match_end, 0);
          continue _L;
        }
        case 41: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLON, _match_start, _match_end, 0);
          continue _L;
        }
        case 42: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI(true), _match_start, _match_end, 0);
          continue _L;
        }
        case 43: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("=="), _match_start, _match_end, 0);
          continue _L;
        }
        case 44: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EQUAL, _match_start, _match_end, 0);
          continue _L;
        }
        case 45: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("<="), _match_start, _match_end, 0);
          continue _L;
        }
        case 46: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1(">="), _match_start, _match_end, 0);
          continue _L;
        }
        case 47: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2(">>"), _match_start, _match_end, 0);
          continue _L;
        }
        case 48: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1(">"), _match_start, _match_end, 0);
          continue _L;
        }
        case 49: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2("<<"), _match_start, _match_end, 0);
          continue _L;
        }
        case 50: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("<"), _match_start, _match_end, 0);
          continue _L;
        }
        case 51: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACKET, _match_start, _match_end, 0);
          continue _L;
        }
        case 52: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACKET, _match_start, _match_end, 0);
          continue _L;
        }
        case 53: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACE, _match_start, _match_end, 0);
          continue _L;
        }
        case 54: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACE, _match_start, _match_end, 0);
          continue _L;
        }
        case 55: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PIPE, _match_start, _match_end, 0);
          continue _L;
        }
        case 56: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BARBAR, _match_start, _match_end, 0);
          continue _L;
        }
        case 57: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BAR, _match_start, _match_end, 0);
          continue _L;
        }
        case 58: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PLUS, _match_start, _match_end, 0);
          continue _L;
        }
        case 59: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MINUS, _match_start, _match_end, 0);
          continue _L;
        }
        case 60: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$QUESTION, _match_start, _match_end, 0);
          continue _L;
        }
        case 61: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("!="), _match_start, _match_end, 0);
          continue _L;
        }
        case 62: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXCLAMATION, _match_start, _match_end, 0);
          continue _L;
        }
        case 63: {
          const integer = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT(integer), _capture_0_start.val, _capture_0_end.val, 0);
          continue _L;
        }
        case 64: {
          const float = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FLOAT(float), _match_start, _match_end, 0);
          continue _L;
        }
        case 65: {
          const integer$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT(integer$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 66: {
          const end = lexbuf.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EOF, end, end, 0);
          return;
        }
        case 67: {
          const raw = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          let token;
          if (raw === "Regex") {
            token = $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT_REGEX;
          } else {
            token = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT(raw);
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, token, _match_start, _match_end, 0);
          continue _L;
        }
        case 68: {
          const raw$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$POST_LABEL(raw$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 69: {
          const raw$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf, _capture_0_start.val, _capture_0_end.val);
          if (moonbitlang$core$hashset$$T$contains$0$(moonbitlang$ulex$lib$new_frontend$lexer$$reserved_keyword_table, raw$3)) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$Reserved_keyword(raw$3));
          }
          const _bind$3 = moonbitlang$core$hashmap$$T$get$1$(moonbitlang$ulex$lib$new_frontend$lexer$$keyword_table, raw$3);
          let _tmp$2;
          if (_bind$3 === undefined) {
            _tmp$2 = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT(raw$3);
          } else {
            const _Some = _bind$3;
            _tmp$2 = _Some;
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env, _tmp$2, _match_start, _match_end, 0);
          continue _L;
        }
        case 70: {
          const c = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter(c));
          continue _L;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$from_bytes(bytes, start, end) {
  const _p = bytes.length;
  let end$2;
  if (end === undefined) {
    end$2 = _p;
  } else {
    const _p$2 = end;
    end$2 = _p$2;
  }
  return { content: bytes, pos: start, end: end$2 };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$preserve_comment(self) {
  return self.comment ? ((comment, start, end) => {
    const docstrings = self.docstrings;
    const _bind = comment.content;
    if (moonbitlang$core$string$$String$char_length_ge(_bind, 3, 0, _bind.length)) {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_bind, moonbitlang$core$string$$String$offset_of_nth_char(_bind, 1, 0, _bind.length));
      if (_x === 47) {
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, start);
        const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, end);
        const loc = { start: _bind$2, end: _bind$3 };
        if (docstrings.length === 0) {
          const _p = { _0: loc, _1: comment };
          moonbitlang$core$array$$Array$push$42$(docstrings, new $64$moonbitlang$47$core$47$list$46$T$More$30$(_p, $64$moonbitlang$47$core$47$list$46$T$Empty$30$));
          return;
        } else {
          _L: {
            const _bind$4 = moonbitlang$core$array$$Array$last$42$(docstrings);
            if (_bind$4 === undefined) {
              break _L;
            } else {
              const _Some = _bind$4;
              const _x$2 = _Some;
              if (_x$2.$tag === 1) {
                const _More = _x$2;
                const _head = _More._0;
                const last_idx = docstrings.length - 1 | 0;
                if ((_bind$2.lnum - _head._0.start.lnum | 0) > 1) {
                  moonbitlang$core$array$$Array$op_set$42$(docstrings, last_idx, moonbitlang$core$list$$T$rev$180$(_More));
                  const _p = { _0: loc, _1: comment };
                  moonbitlang$core$array$$Array$push$42$(docstrings, new $64$moonbitlang$47$core$47$list$46$T$More$30$(_p, $64$moonbitlang$47$core$47$list$46$T$Empty$30$));
                  return;
                } else {
                  const _p = { _0: loc, _1: comment };
                  const _p$2 = moonbitlang$core$array$$Array$op_get$42$(docstrings, last_idx);
                  moonbitlang$core$array$$Array$op_set$42$(docstrings, last_idx, new $64$moonbitlang$47$core$47$list$46$T$More$30$(_p, _p$2));
                  return;
                }
              } else {
                break _L;
              }
            }
          }
          $panic();
          return;
        }
      } else {
        return;
      }
    } else {
      return;
    }
  }) : (_cmt, _start, _end) => {
  };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$new() {
  return { last_unhandled_newline: -1 };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes(name, start_pos, is_interpolation, comment, bytes) {
  const lexbuf = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$from_bytes(bytes, 0, undefined);
  const arr = moonbitlang$core$array$$Array$new$132$(100);
  const start_lnum = start_pos.lnum;
  const start_bol = start_pos.bol;
  const start_cnum = start_pos.cnum;
  const _bind = [];
  const _bind$2 = [];
  const _bind$3 = moonbitlang$core$ref$$new$34$(undefined);
  const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$new();
  const env = { errors: _bind, docstrings: _bind$2, comment: comment, file: name, tokens: arr, current_line: start_lnum, current_bol: start_bol, last_unhandled_comment: _bind$3, asi_context: _bind$4, start_cnum: start_cnum, is_interpolation: is_interpolation };
  moonbitlang$ulex$lib$new_frontend$lexer$$tokens(lexbuf, env, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$preserve_comment(env));
  const docstrings = env.docstrings;
  if (!(docstrings.length === 0)) {
    const last_idx = docstrings.length - 1 | 0;
    moonbitlang$core$array$$Array$op_set$42$(docstrings, last_idx, moonbitlang$core$list$$T$rev$180$(moonbitlang$core$array$$Array$op_get$42$(docstrings, last_idx)));
  }
  moonbitlang$core$array$$Array$rev_inplace$42$(docstrings);
  return { tokens: env.tokens, errors: env.errors, docstrings: docstrings };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes$46$start_pos$46$default() {
  return { fname: "", lnum: 1, bol: 0, cnum: 0 };
}
function moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(self) {
  switch (self.$tag) {
    case 0: {
      const _Code = self;
      return _Code._0;
    }
    case 1: {
      const _Nested = self;
      return _Nested._1;
    }
    case 2: {
      const _NamedRegex = self;
      return _NamedRegex._2;
    }
    case 3: {
      const _LexDef = self;
      return _LexDef._2;
    }
    default: {
      const _GeneratedCode = self;
      return _GeneratedCode._1;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$153$(_x_1395, _x_1396) {
  if (_x_1395.$tag === 3) {
    const _UnexpectedToken = _x_1395;
    const _$42$arg_1397 = _UnexpectedToken._0;
    const _$42$arg_1398 = _UnexpectedToken._1;
    const _$42$arg_1399 = _UnexpectedToken._2;
    _x_1396.method_0(_x_1396.self, "UnexpectedToken(");
    moonbitlang$core$builtin$$Logger$write_object$91$(_x_1396, _$42$arg_1397);
    _x_1396.method_0(_x_1396.self, ", ");
    const _$42$x0_1400 = _$42$arg_1398._0;
    const _$42$x1_1401 = _$42$arg_1398._1;
    _x_1396.method_0(_x_1396.self, "(");
    moonbitlang$core$builtin$$Logger$write_object$92$(_x_1396, _$42$x0_1400);
    _x_1396.method_0(_x_1396.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$92$(_x_1396, _$42$x1_1401);
    _x_1396.method_0(_x_1396.self, ")");
    const _self = _x_1396;
    _self.method_0(_self.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$93$(_self, _$42$arg_1399);
    _self.method_0(_self.self, ")");
    return;
  } else {
    const _UnexpectedEndOfInput = _x_1395;
    const _$42$arg_1402 = _UnexpectedEndOfInput._0;
    const _$42$arg_1403 = _UnexpectedEndOfInput._1;
    _x_1396.method_0(_x_1396.self, "UnexpectedEndOfInput(");
    moonbitlang$core$builtin$$Logger$write_object$92$(_x_1396, _$42$arg_1402);
    _x_1396.method_0(_x_1396.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$93$(_x_1396, _$42$arg_1403);
    _x_1396.method_0(_x_1396.self, ")");
    return;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$mkloc(loc) {
  return { start: loc._0, end: loc._1 };
}
function moonbitlang$ulex$lib$new_frontend$parser$$normalize(terms) {
  const _bind = moonbitlang$core$array$$Array$iter$40$(terms);
  const terms$2 = moonbitlang$core$builtin$$Iter$to_array$40$((_p) => _bind((_p$2) => {
    let _func;
    if (_p$2.$tag === 1) {
      const _Nested = _p$2;
      const _terms = _Nested._0;
      _func = moonbitlang$core$array$$Array$iter$40$(_terms);
    } else {
      _func = moonbitlang$core$builtin$$Iter$singleton$40$(_p$2);
    }
    return _func(_p);
  }));
  if (terms$2.length === 0) {
    return [];
  } else {
    if (terms$2.length === 1) {
      const _x = terms$2[0];
      return [_x];
    } else {
      const first_start = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(moonbitlang$core$array$$Array$op_get$40$(terms$2, 0)).start;
      const last_end = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(moonbitlang$core$array$$Array$op_get$40$(terms$2, terms$2.length - 1 | 0)).end;
      const last = { val: first_start };
      const new_terms = [];
      const _len = terms$2.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const term = terms$2[_i];
          _L: {
            _L$2: {
              switch (term.$tag) {
                case 1: {
                  break _L$2;
                }
                case 2: {
                  break _L$2;
                }
                case 3: {
                  break _L$2;
                }
              }
              break _L;
            }
            const term_start = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(term).start;
            const term_end = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(term).end;
            if (moonbitlang$core$builtin$$op_gt$92$(term_start, last.val)) {
              moonbitlang$core$array$$Array$push$40$(new_terms, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code({ start: last.val, end: term_start }));
            }
            moonbitlang$core$array$$Array$push$40$(new_terms, term);
            last.val = term_end;
          }
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (moonbitlang$core$builtin$$op_lt$92$(last.val, last_end)) {
        moonbitlang$core$array$$Array$push$40$(new_terms, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code({ start: last.val, end: last_end }));
      }
      return new_terms;
    }
  }
}
(() => {
})();
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_0(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_1(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(args, last_pos) {
  if (args.len === 0) {
    return last_pos;
  } else {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < args.len) {
        _L: {
          const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(args, i);
          const _start_pos = _bind._1;
          const _end_pos = _bind._2;
          if (_start_pos.fname === _end_pos.fname && _start_pos.cnum === _end_pos.cnum) {
            break _L;
          }
          return _start_pos;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return moonbitlang$core$array$$ArrayView$op_get$12$(args, args.len - 1 | 0)._2;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_3(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_2(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_3(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_4(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_5(_last_pos, _args) {
  moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1);
  const _sub_action_0_result = new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(undefined);
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar1 = _YYObj__ast_Ident_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: $64$moonbitlang$47$core$47$list$46$T$Empty$29$, _1: new Option$Some$41$(__dollar1) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_7(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_8(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_10(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_9(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_10(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_11(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_12(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_14(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_13(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_14(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_15(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_16(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_18(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_17(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_18(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_19(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_20(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_21(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar3 = _YYObj__ast_Ident._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(__dollar3);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_22(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_23(moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 1, 4));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar2 = _YYObj__ast_Ident_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern([], __dollar2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_25(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_24(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_25(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_26(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_27(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_29(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_28(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_29(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_30(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_31(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_32(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_33(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 25) {
    const _YYObj__list_T__ast_Term_ = _bind;
    const __dollar1 = _YYObj__list_T__ast_Term_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Array__ast_Term_$46$YYObj_Array__ast_Term_(moonbitlang$ulex$lib$new_frontend$parser$$normalize(moonbitlang$core$list$$T$to_array$40$(__dollar1)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_34(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_35(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_36(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_37(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_38(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_39(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_40(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar1 = _YYObj__ast_Ident._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Named(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_42(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_41(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_42(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_43(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_44(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_45(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_46(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
  if (_bind.$tag === 28) {
    const _YYObj__list_T__ast_LexPatternItem_ = _bind;
    const __dollar3 = _YYObj__list_T__ast_LexPatternItem_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
    if (_bind$2.$tag === 29) {
      const _YYObj__ast_LexPatternItem = _bind$2;
      const __dollar1 = _YYObj__ast_LexPatternItem._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_(new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_47(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_48(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_50(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar2 = _YYObj__ast_Ident._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_49(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_50(moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 1, 3));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar2 = _YYObj__ast_Ident_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern([], __dollar2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_51(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_52(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_53(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_54(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_55(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_57(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_56(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_57(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_58(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_59(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_60(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_61(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_63(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_62(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_63(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_64(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_65(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_67(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_66(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_67(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_68(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 30) {
    const _YYObj__ast_LexCase = _bind;
    const __dollar1 = _YYObj__ast_LexCase._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(new $64$moonbitlang$47$core$47$list$46$T$More$31$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$31$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_69(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_70(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_71(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_72(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_73(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_74(_last_pos, _args) {
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Code$46$YYObj__ast_Code({ loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_75(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_77(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_76(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_77(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_78(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_({ _0: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 }), _1: __dollar2, _2: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_80(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_79(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_80(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_81(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_82(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_83(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_34(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_85(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_84(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_85(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_87(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_86(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_87(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_88(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_89(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_90(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_91(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_92(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_93(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_94(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 32) {
    const _YYObj__ast_Code = _bind;
    const __dollar2 = _YYObj__ast_Code._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 3)._0;
    if (_bind$2.$tag === 31) {
      const _YYObj__list_T__ast_LexCase_ = _bind$2;
      const __dollar4 = _YYObj__list_T__ast_LexCase_._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$LexDef(__dollar2, moonbitlang$core$list$$T$to_array$170$(__dollar4), moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_95(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_96(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_97(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_LexPatternItem = _bind;
    const __dollar1 = _YYObj__ast_LexPatternItem._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_(new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$29$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_98(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_99(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_100(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_101(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 22) {
    const _YYObj___list_T__ast_LexPatternItem____ast_Ident___ = _bind;
    const __dollar2 = _YYObj___list_T__ast_LexPatternItem____ast_Ident___._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    const _items = __dollar2._0;
    const _rest = __dollar2._1;
    let _tmp;
    if (_rest.$tag === 0) {
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern(moonbitlang$core$list$$T$to_array$168$(_items), moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    } else {
      const _Some = _rest;
      const _rest$2 = _Some._0;
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern(moonbitlang$core$list$$T$to_array$168$(_items), _rest$2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    }
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(_tmp);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_102(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_103(_last_pos, _args) {
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern([], moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_104(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_106(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_105(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_106(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_107(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_19(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_108(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_109(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_110(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_111(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 24) {
    const _YYObj__ast_LexPattern = _bind;
    const __dollar1 = _YYObj__ast_LexPattern._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
    if (_bind$2.$tag === 20) {
      const _YYObj__ast_Term = _bind$2;
      const __dollar3 = _YYObj__ast_Term._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexCase$46$YYObj__ast_LexCase({ pattern: __dollar1, action: __dollar3, loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_112(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_114(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_113(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_114(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_115(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_60(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_117(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_116(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_117(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_118(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_119(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_120(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_121(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_122(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_118(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_123(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_38(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_124(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_125(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_126(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 25) {
    const _YYObj__list_T__ast_Term_ = _bind;
    const __dollar2 = _YYObj__list_T__ast_Term_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
    if (_bind$2.$tag === 20) {
      const _YYObj__ast_Term = _bind$2;
      const __dollar1 = _YYObj__ast_Term._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_(new $64$moonbitlang$47$core$47$list$46$T$More$25$(__dollar1, __dollar2));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_127(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_128(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_51(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_129(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_130(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_131(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_132(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar1 = _YYObj_Array__ast_Term_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Program$46$YYObj__ast_Program({ body: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(__dollar1, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })), loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_134(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_133(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_134(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_135(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_137(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_136(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_137(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_138(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_139(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
  if (_bind.$tag === 22) {
    const _YYObj___list_T__ast_LexPatternItem____ast_Ident___ = _bind;
    const __dollar3 = _YYObj___list_T__ast_LexPatternItem____ast_Ident___._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
    if (_bind$2.$tag === 29) {
      const _YYObj__ast_LexPatternItem = _bind$2;
      const __dollar1 = _YYObj__ast_LexPatternItem._0;
      const _items = __dollar3._0;
      const _rest = __dollar3._1;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, _items), _1: _rest });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_140(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_141(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_142(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_144(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_143(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_144(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_146(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_145(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_146(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_147(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_149(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_148(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_149(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_150(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_151(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_152(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_153(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_154(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_155(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_156(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_58(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_158(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_157(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_158(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_159(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_59(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_160(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_8(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_162(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_161(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_162(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_164(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_163(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_164(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_165(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_88(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_167(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_166(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_167(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_169(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_168(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_169(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_170(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_171(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_173(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_172(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_173(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_174(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_175(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_176(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_104(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_177(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_125(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_179(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_178(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_179(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_180(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 35) {
    const _YYObj_StringLiteral = _bind;
    const __dollar1 = _YYObj_StringLiteral._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Literal(__dollar1, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_181(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
  if (_bind.$tag === 31) {
    const _YYObj__list_T__ast_LexCase_ = _bind;
    const __dollar3 = _YYObj__list_T__ast_LexCase_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
    if (_bind$2.$tag === 30) {
      const _YYObj__ast_LexCase = _bind$2;
      const __dollar1 = _YYObj__ast_LexCase._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(new $64$moonbitlang$47$core$47$list$46$T$More$31$(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_182(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_4(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_183(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_184(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_185(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_135(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_186(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_188(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_187(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_188(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_189(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_190(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_171(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_191(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_192(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_193(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_26(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_195(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_194(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_195(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_196(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_197(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_198(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_199(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 27) {
    const _YYObj__ast_Regex = _bind;
    const __dollar1 = _YYObj__ast_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
    if (_bind$2.$tag === 23) {
      const _YYObj__ast_Ident = _bind$2;
      const __dollar3 = _YYObj__ast_Ident._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$RegexAs(__dollar1, __dollar3, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_200(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_201(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_202(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_203(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_204(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_205(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_206(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_207(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._2;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    let _tmp;
    let terms;
    _L: {
      _L$2: {
        const _self = [];
        moonbitlang$core$array$$Array$push$40$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 })));
        moonbitlang$core$array$$Array$push_iter$40$(_self, moonbitlang$core$array$$Array$iter$40$(__dollar2));
        moonbitlang$core$array$$Array$push$40$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 })));
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$parser$$normalize(_self);
        if (_bind$2.length === 1) {
          const _x = _bind$2[0];
          if (_x.$tag === 0) {
            _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
          } else {
            terms = _bind$2;
            break _L$2;
          }
        } else {
          terms = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(terms, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    }
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(_tmp);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_208(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar2 = _YYObj__ast_Ident._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 5)._0;
    if (_bind$2.$tag === 27) {
      const _YYObj__ast_Regex = _bind$2;
      const __dollar6 = _YYObj__ast_Regex._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$NamedRegex(__dollar2, __dollar6, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_209(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_170(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_210(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_211(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_212(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_138(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_213(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_27(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_214(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_216(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_215(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_216(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_217(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 36) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident({ name: __dollar1, loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_218(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_220(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_219(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_220(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_221(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_95(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_222(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 37) {
    const _YYObj_InterpLiteral = _bind;
    const __dollar1 = _YYObj_InterpLiteral._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Interp(__dollar1, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_223(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 27) {
    const _YYObj__ast_Regex = _bind;
    const __dollar1 = _YYObj__ast_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$Regex(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_224(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 28) {
    const _YYObj__list_T__ast_LexPatternItem_ = _bind;
    const __dollar1 = _YYObj__list_T__ast_LexPatternItem_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern(moonbitlang$core$list$$T$to_array$168$(__dollar1), undefined, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_225(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_147(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_226(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_227(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_229(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_228(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_229(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_230(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_({ _0: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 }), _1: __dollar2, _2: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_231(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_232(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_233(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_234(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_235(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_7(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_236(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_237(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_210(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_238(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_30(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_239(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_240(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_121(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_241(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 36) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident({ name: __dollar1, loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_242(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_35(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_243(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_130(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_244(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_245(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_12(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_246(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_($64$moonbitlang$47$core$47$list$46$T$Empty$25$);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_248(_last_pos, _args) {
  moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2;
  moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 1, 2);
  const _sub_action_0_result = new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(undefined);
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar2 = _YYObj__ast_Ident_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern([], __dollar2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_249(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_250(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_251(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_252(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_253(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_108(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_254(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_255(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_256(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_258(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_257(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_258(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_260(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_259(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_260(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_261(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_153(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_262(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_263(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_264(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_140(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_265(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_23(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 3));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar1 = _YYObj__ast_Ident_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: $64$moonbitlang$47$core$47$list$46$T$Empty$29$, _1: new Option$Some$41$(__dollar1) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_266(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_11(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_267(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_142(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_268(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_1(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_270(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_269(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_270(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_271(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_110(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_272(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_50(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 2));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar1 = _YYObj__ast_Ident_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: $64$moonbitlang$47$core$47$list$46$T$Empty$29$, _1: new Option$Some$41$(__dollar1) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_273(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_274(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_275(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_276(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_277(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_32(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_278(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_252(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_279(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_280(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_31(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_281(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_282(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_37(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_283(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_284(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_286(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_285(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_286(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_287(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 30) {
    const _YYObj__ast_LexCase = _bind;
    const __dollar1 = _YYObj__ast_LexCase._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(new $64$moonbitlang$47$core$47$list$46$T$More$31$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$31$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_288(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_100(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_289(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_15(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_290(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 33) {
    const _YYObj__Location__Array__ast_Term___Location_ = _bind;
    const __dollar1 = _YYObj__Location__Array__ast_Term___Location_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
    const _loc1 = __dollar1._0;
    const _terms = __dollar1._1;
    const _loc2 = __dollar1._2;
    let _tmp;
    let terms;
    _L: {
      _L$2: {
        const _self = [];
        moonbitlang$core$array$$Array$push$40$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(_loc1));
        moonbitlang$core$array$$Array$push_iter$40$(_self, moonbitlang$core$array$$Array$iter$40$(_terms));
        moonbitlang$core$array$$Array$push$40$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(_loc2));
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$parser$$normalize(_self);
        if (_bind$2.length === 1) {
          const _x = _bind$2[0];
          if (_x.$tag === 0) {
            _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
          } else {
            terms = _bind$2;
            break _L$2;
          }
        } else {
          terms = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(terms, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    }
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(_tmp);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_291(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_292(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_45(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_293(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_255(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_294(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_295(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_296(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_297(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_298(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_299(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_234(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_300(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_204(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_301(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_({ _0: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 }), _1: __dollar2, _2: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_302(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_54(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_303(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_304(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_305(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_189(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_306(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_307(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_LexPatternItem = _bind;
    const __dollar1 = _YYObj__ast_LexPatternItem._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$29$), _1: Option$None$41$ });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_308(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_120(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_309(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_227(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_310(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_174(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_311(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_263(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_312(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_313(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_314(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_312(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$12$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$12$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      const _CHAR = token;
      const _data = _CHAR._0;
      return { _0: 0, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral(_data) };
    }
    case 1: {
      const _INT = token;
      const _data$2 = _INT._0;
      return { _0: 1, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$2) };
    }
    case 2: {
      const _BYTE = token;
      const _data$3 = _BYTE._0;
      return { _0: 2, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral(_data$3) };
    }
    case 3: {
      const _BYTES = token;
      const _data$4 = _BYTES._0;
      return { _0: 3, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral(_data$4) };
    }
    case 4: {
      const _FLOAT = token;
      const _data$5 = _FLOAT._0;
      return { _0: 4, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$5) };
    }
    case 5: {
      const _STRING = token;
      const _data$6 = _STRING._0;
      return { _0: 5, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral(_data$6) };
    }
    case 6: {
      const _MULTILINE_STRING = token;
      const _data$7 = _MULTILINE_STRING._0;
      return { _0: 6, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$7) };
    }
    case 7: {
      const _MULTILINE_INTERP = token;
      const _data$8 = _MULTILINE_INTERP._0;
      return { _0: 7, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral(_data$8) };
    }
    case 8: {
      const _INTERP = token;
      const _data$9 = _INTERP._0;
      return { _0: 8, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral(_data$9) };
    }
    case 9: {
      const _ATTRIBUTE = token;
      const _data$10 = _ATTRIBUTE._0;
      return { _0: 9, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$10) };
    }
    case 10: {
      const _LIDENT = token;
      const _data$11 = _LIDENT._0;
      return { _0: 10, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$11) };
    }
    case 11: {
      const _UIDENT = token;
      const _data$12 = _UIDENT._0;
      return { _0: 11, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$12) };
    }
    case 12: {
      return { _0: 12, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      const _POST_LABEL = token;
      const _data$13 = _POST_LABEL._0;
      return { _0: 14, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$13) };
    }
    case 15: {
      const _COMMENT = token;
      const _data$14 = _COMMENT._0;
      return { _0: 15, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Comment$46$YYObj_Comment(_data$14) };
    }
    case 16: {
      return { _0: 16, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 17: {
      const _INFIX1 = token;
      const _data$15 = _INFIX1._0;
      return { _0: 17, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$15) };
    }
    case 18: {
      const _INFIX2 = token;
      const _data$16 = _INFIX2._0;
      return { _0: 18, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$16) };
    }
    case 19: {
      const _INFIX3 = token;
      const _data$17 = _INFIX3._0;
      return { _0: 19, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$17) };
    }
    case 20: {
      const _INFIX4 = token;
      const _data$18 = _INFIX4._0;
      return { _0: 20, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$18) };
    }
    case 21: {
      const _AUGMENTED_ASSIGNMENT = token;
      const _data$19 = _AUGMENTED_ASSIGNMENT._0;
      return { _0: 21, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$19) };
    }
    case 22: {
      return { _0: 22, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 23: {
      return { _0: 23, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 24: {
      return { _0: 24, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 25: {
      return { _0: 25, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 26: {
      return { _0: 26, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 27: {
      return { _0: 27, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 28: {
      return { _0: 28, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 29: {
      return { _0: 29, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 30: {
      return { _0: 30, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 31: {
      return { _0: 31, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 32: {
      return { _0: 32, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 33: {
      return { _0: 33, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 34: {
      return { _0: 34, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 35: {
      return { _0: 35, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 36: {
      return { _0: 36, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 37: {
      return { _0: 37, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 38: {
      return { _0: 38, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 39: {
      return { _0: 39, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 40: {
      return { _0: 40, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 41: {
      return { _0: 41, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 42: {
      return { _0: 42, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 43: {
      return { _0: 43, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 44: {
      return { _0: 44, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 45: {
      return { _0: 45, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 46: {
      return { _0: 46, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 47: {
      return { _0: 47, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 48: {
      return { _0: 48, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 49: {
      return { _0: 49, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 50: {
      return { _0: 50, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 51: {
      return { _0: 51, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 52: {
      return { _0: 52, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 53: {
      const _DOT_LIDENT = token;
      const _data$20 = _DOT_LIDENT._0;
      return { _0: 53, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$20) };
    }
    case 54: {
      const _DOT_UIDENT = token;
      const _data$21 = _DOT_UIDENT._0;
      return { _0: 54, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$21) };
    }
    case 55: {
      const _DOT_INT = token;
      const _data$22 = _DOT_INT._0;
      return { _0: 55, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Int$46$YYObj_Int(_data$22) };
    }
    case 56: {
      return { _0: 56, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 57: {
      return { _0: 57, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 58: {
      return { _0: 58, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 59: {
      const _SEMI = token;
      const _data$23 = _SEMI._0;
      return { _0: 59, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Bool$46$YYObj_Bool(_data$23) };
    }
    case 60: {
      return { _0: 60, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 61: {
      return { _0: 61, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 62: {
      return { _0: 62, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 63: {
      return { _0: 63, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 64: {
      return { _0: 64, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 65: {
      return { _0: 65, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 66: {
      return { _0: 66, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 67: {
      return { _0: 67, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 68: {
      return { _0: 68, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 69: {
      return { _0: 69, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 70: {
      return { _0: 70, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 71: {
      const _PACKAGE_NAME = token;
      const _data$24 = _PACKAGE_NAME._0;
      return { _0: 71, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$24) };
    }
    case 72: {
      return { _0: 72, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 73: {
      return { _0: 73, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 74: {
      return { _0: 74, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 75: {
      return { _0: 75, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 76: {
      return { _0: 76, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 77: {
      return { _0: 77, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 78: {
      return { _0: 78, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 79: {
      return { _0: 79, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 80: {
      return { _0: 80, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 81: {
      return { _0: 81, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 82: {
      return { _0: 82, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 83: {
      return { _0: 83, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 84: {
      return { _0: 84, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 85: {
      return { _0: 85, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 86: {
      return { _0: 86, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 87: {
      return { _0: 87, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 88: {
      return { _0: 88, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 89: {
      return { _0: 89, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 90: {
      return { _0: 90, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 91: {
      return { _0: 91, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 92: {
      return { _0: 92, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 93: {
      return { _0: 93, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 94: {
      return { _0: 94, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    default: {
      return { _0: 95, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Accept;
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_101(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_0);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_102(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_141);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_103(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_296);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_104(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_298);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_105(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_313);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_106(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_274);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_107(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_231);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_108(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_61);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_109(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_214);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_110(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_192);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_111(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_294);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_112(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_218);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_113(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_129);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_114(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_109);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_115(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_93);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_116(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_90);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_117(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_205);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_118(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_150);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_119(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_47);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_120(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_201);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_121(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_202);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_122(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_275);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_123(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_44);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_124(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_183);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_125(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_89);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_126(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_154);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_127(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_200);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_128(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_284);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_129(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_256);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_130(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_306);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_131(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_254);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_132(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_69);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_133(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_239);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_134(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_283);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_135(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_52);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_136(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_276);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_137(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_184);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_138(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_96);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_139(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_151);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_140(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_152);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_141(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_16);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_142(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_119);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_143(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_73);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_144(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_203);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_145(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_250);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_146(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_71);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_147(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_131);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_148(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_112);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_149(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_98);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_150(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_206);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_151(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_196);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_152(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_72);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_153(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_236);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_154(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_81);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_155(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_43);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_156(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_198);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_157(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_281);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_158(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_21);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_159(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_197);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_160(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_232);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_161(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_244);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_162(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_20);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_163(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_92);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_164(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_124);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_165(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_36);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_166(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_295);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_167(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_99);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_168(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_91);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_169(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_191);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_170(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_304);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_171(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_291);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_172(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_65);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_173(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_48);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_174(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_127);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_175(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_186);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_176(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_82);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_177(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_64);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_178(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_39);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_179(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_55);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_180(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_251);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_181(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_249);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_182(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_211);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_183(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_53);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_184(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_70);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_185(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_262);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_186(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_297);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_187(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_155);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_188(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_75);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_189(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_102);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_190(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_246);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_191(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_273);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_192(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_233);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_193(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_226);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_194(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_279);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_196(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 101, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_303);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_195(_lookahead) {
  switch (_lookahead) {
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_101);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_102);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_103);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_104);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_105);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_106);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_107);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_108);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_109);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_110);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_111);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_112);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_113);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_114);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_115);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_116);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_117);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_118);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_119);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_120);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_121);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_122);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_123);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_124);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_125);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_126);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_127);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_128);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_129);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_130);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_131);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_132);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_133);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_134);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_135);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_136);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_137);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_138);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_139);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_140);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_141);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_142);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_143);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_144);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_145);
    }
    case 48: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_146);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_147);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_148);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_149);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_150);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_151);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_152);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_153);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_154);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_155);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_156);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_157);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_158);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_159);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_160);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_161);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_162);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_163);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_164);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_165);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_166);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_167);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_168);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_169);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_170);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_171);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_172);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_173);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_174);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_175);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_176);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_177);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_178);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_179);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_180);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_181);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_182);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_183);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_184);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_185);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_186);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_187);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_188);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_189);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_190);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_191);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_192);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_193);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_194);
    }
    case 113: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_195);
    }
    case 101: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_196);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 101, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_175);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_197(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 100, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_74);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 111, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_217);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 108, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_40);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 108, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_222);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 108, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_180);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 112, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_241);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_207(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 107, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_199);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_205(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_207);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 72: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_205);
      }
      case 49: {
        break _L;
      }
      case 62: {
        break _L;
      }
      case 82: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 107, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_223);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_210(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 106, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_46);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208(_lookahead) {
  switch (_lookahead) {
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_209);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 106, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_97);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_209(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208);
    }
    case 106: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_210);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_214(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_139);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_217(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_265);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_216(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_217);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_218(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_272);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_215(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_216);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_218);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_5);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_212(_lookahead) {
  switch (_lookahead) {
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_213);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_307);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_213(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_212);
    }
    case 105: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_214);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_215);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_220(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_101);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_219(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_220);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_224(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(5, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_22);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_223(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_224);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_222(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_223);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_226(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(4, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_49);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_225(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_226);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_227(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_248);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_221(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_222);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_225);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_227);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_228(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_103);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_211(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_212);
    }
    case 105: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_219);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_221);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_228);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_229(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_224);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_290);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_56);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_288);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_9);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_182);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_145);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_143);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_269);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_116);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_277);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_292);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_28);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_178);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_241(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(7, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_208);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_240(_lookahead) {
  if (_lookahead === 59) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_241);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_239(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_240);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_238(_lookahead) {
  if (_lookahead === 46) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_239);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_237(_lookahead) {
  if (_lookahead === 13) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_238);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_236(_lookahead) {
  if (_lookahead === 58) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_237);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
      }
      case 111: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_236);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 3: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 17: {
        break _L;
      }
      case 18: {
        break _L;
      }
      case 19: {
        break _L;
      }
      case 20: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 25: {
        break _L;
      }
      case 26: {
        break _L;
      }
      case 27: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 29: {
        break _L;
      }
      case 30: {
        break _L;
      }
      case 31: {
        break _L;
      }
      case 32: {
        break _L;
      }
      case 33: {
        break _L;
      }
      case 34: {
        break _L;
      }
      case 35: {
        break _L;
      }
      case 36: {
        break _L;
      }
      case 37: {
        break _L;
      }
      case 38: {
        break _L;
      }
      case 39: {
        break _L;
      }
      case 40: {
        break _L;
      }
      case 41: {
        break _L;
      }
      case 42: {
        break _L;
      }
      case 43: {
        break _L;
      }
      case 44: {
        break _L;
      }
      case 45: {
        break _L;
      }
      case 46: {
        break _L;
      }
      case 47: {
        break _L;
      }
      case 48: {
        break _L;
      }
      case 49: {
        break _L;
      }
      case 50: {
        break _L;
      }
      case 51: {
        break _L;
      }
      case 52: {
        break _L;
      }
      case 53: {
        break _L;
      }
      case 54: {
        break _L;
      }
      case 55: {
        break _L;
      }
      case 56: {
        break _L;
      }
      case 57: {
        break _L;
      }
      case 58: {
        break _L;
      }
      case 59: {
        break _L;
      }
      case 60: {
        break _L;
      }
      case 61: {
        break _L;
      }
      case 62: {
        break _L;
      }
      case 63: {
        break _L;
      }
      case 64: {
        break _L;
      }
      case 65: {
        break _L;
      }
      case 66: {
        break _L;
      }
      case 67: {
        break _L;
      }
      case 68: {
        break _L;
      }
      case 69: {
        break _L;
      }
      case 70: {
        break _L;
      }
      case 71: {
        break _L;
      }
      case 72: {
        break _L;
      }
      case 73: {
        break _L;
      }
      case 74: {
        break _L;
      }
      case 75: {
        break _L;
      }
      case 76: {
        break _L;
      }
      case 77: {
        break _L;
      }
      case 78: {
        break _L;
      }
      case 79: {
        break _L;
      }
      case 80: {
        break _L;
      }
      case 81: {
        break _L;
      }
      case 82: {
        break _L;
      }
      case 83: {
        break _L;
      }
      case 84: {
        break _L;
      }
      case 85: {
        break _L;
      }
      case 86: {
        break _L;
      }
      case 87: {
        break _L;
      }
      case 88: {
        break _L;
      }
      case 89: {
        break _L;
      }
      case 90: {
        break _L;
      }
      case 91: {
        break _L;
      }
      case 92: {
        break _L;
      }
      case 93: {
        break _L;
      }
      case 94: {
        break _L;
      }
      case 95: {
        break _L;
      }
      case 114: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_311);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_24);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_243(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_126);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_190);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_235);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_257);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_238);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_105);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_166);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_83);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_308);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_221);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_163);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_79);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_133);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_156);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_310);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_115);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_242);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_84);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_278);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_266);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_165);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_267);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_261);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_240);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_76);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_66);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 97, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_33);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_122);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_160);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_176);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_299);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_225);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_187);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_13);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_107);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_148);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_264);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 110, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_78);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_6(_lookahead) {
  if (_lookahead === 66) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_7);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_259);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_213);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_253);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_219);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_314);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_309);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_305);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_280);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_302);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_300);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_245);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_159);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_215);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_193);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_271);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_185);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_282);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_289);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_136);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_113);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_177);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_268);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_168);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_237);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_2);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_123);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_228);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_41);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_17);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_62);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_10(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 110, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_301);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_9(_lookahead) {
  if (_lookahead === 48) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_10);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_212);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_209);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_194);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_285);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_157);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_293);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_243);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_86);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_172);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_128);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_4(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 110, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_230);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_3(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_4);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_234(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 109, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_207);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_233(_lookahead) {
  if (_lookahead === 66) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_234);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_245(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 103, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_111);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_248(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 102, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_181);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_250(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(5, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_94);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_249(_lookahead) {
  if (_lookahead === 66) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_250);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 95: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_101);
      }
      case 94: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_102);
      }
      case 93: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_103);
      }
      case 92: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_104);
      }
      case 91: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_105);
      }
      case 90: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_106);
      }
      case 89: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_107);
      }
      case 88: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_108);
      }
      case 87: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_109);
      }
      case 86: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_110);
      }
      case 85: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_111);
      }
      case 84: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_112);
      }
      case 83: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_113);
      }
      case 82: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_114);
      }
      case 81: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_115);
      }
      case 80: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_116);
      }
      case 79: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_117);
      }
      case 78: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_118);
      }
      case 77: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_119);
      }
      case 76: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_120);
      }
      case 75: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_121);
      }
      case 74: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_122);
      }
      case 73: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_123);
      }
      case 72: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_124);
      }
      case 71: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_125);
      }
      case 70: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_126);
      }
      case 69: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_127);
      }
      case 68: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_128);
      }
      case 67: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_129);
      }
      case 64: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_130);
      }
      case 63: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_131);
      }
      case 62: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_132);
      }
      case 61: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_133);
      }
      case 60: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_134);
      }
      case 59: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_135);
      }
      case 58: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_136);
      }
      case 57: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_137);
      }
      case 56: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_138);
      }
      case 55: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_139);
      }
      case 54: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_140);
      }
      case 53: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_141);
      }
      case 52: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_142);
      }
      case 51: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_143);
      }
      case 50: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_144);
      }
      case 49: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_145);
      }
      case 48: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_146);
      }
      case 47: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_147);
      }
      case 46: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_148);
      }
      case 45: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_149);
      }
      case 44: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_150);
      }
      case 43: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_151);
      }
      case 42: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_152);
      }
      case 41: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_153);
      }
      case 40: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_154);
      }
      case 39: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_155);
      }
      case 38: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_156);
      }
      case 37: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_157);
      }
      case 36: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_158);
      }
      case 35: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_159);
      }
      case 34: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_160);
      }
      case 33: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_161);
      }
      case 32: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_162);
      }
      case 31: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_163);
      }
      case 30: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_164);
      }
      case 29: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_165);
      }
      case 28: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_166);
      }
      case 27: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_167);
      }
      case 26: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_168);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_169);
      }
      case 24: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_170);
      }
      case 23: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_171);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_172);
      }
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_173);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_174);
      }
      case 19: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_175);
      }
      case 18: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_176);
      }
      case 17: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_177);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_178);
      }
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_179);
      }
      case 14: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_180);
      }
      case 13: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_181);
      }
      case 12: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_182);
      }
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_183);
      }
      case 10: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_184);
      }
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_185);
      }
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_186);
      }
      case 7: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_187);
      }
      case 6: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_188);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_189);
      }
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_190);
      }
      case 3: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_191);
      }
      case 2: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_192);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_193);
      }
      case 0: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_194);
      }
      case 113: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_195);
      }
      case 101: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_197);
      }
      case 100: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_198);
      }
      case 65: {
        break _L;
      }
      case 66: {
        break _L;
      }
      case 114: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_161);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_198(_lookahead) {
  if (_lookahead === 65) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_199);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_199(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_211);
    }
    case 106: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_229);
    }
    case 104: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_230);
    }
    case 103: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_246);
    }
    case 102: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_249);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_230(_lookahead) {
  if (_lookahead === 82) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_231);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_231(_lookahead) {
  switch (_lookahead) {
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_232);
    }
    case 109: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_245);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_232(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_233);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_3);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 60: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
      }
      case 65: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
      }
      case 47: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
      }
      case 110: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
      }
      case 95: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
      }
      case 94: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
      }
      case 93: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
      }
      case 92: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
      }
      case 91: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
      }
      case 90: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
      }
      case 89: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
      }
      case 88: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
      }
      case 87: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
      }
      case 86: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
      }
      case 85: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
      }
      case 84: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
      }
      case 83: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
      }
      case 82: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
      }
      case 81: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
      }
      case 80: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
      }
      case 79: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
      }
      case 77: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
      }
      case 76: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
      }
      case 75: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
      }
      case 74: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
      }
      case 73: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
      }
      case 72: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
      }
      case 71: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
      }
      case 70: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
      }
      case 69: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
      }
      case 68: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
      }
      case 67: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
      }
      case 64: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
      }
      case 63: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
      }
      case 61: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
      }
      case 59: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
      }
      case 58: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
      }
      case 57: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
      }
      case 56: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
      }
      case 55: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
      }
      case 54: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
      }
      case 53: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
      }
      case 52: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
      }
      case 51: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
      }
      case 50: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
      }
      case 49: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
      }
      case 46: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
      }
      case 45: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
      }
      case 44: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
      }
      case 43: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
      }
      case 42: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
      }
      case 41: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
      }
      case 40: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
      }
      case 39: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
      }
      case 38: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
      }
      case 37: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
      }
      case 36: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
      }
      case 35: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
      }
      case 34: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
      }
      case 33: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
      }
      case 32: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
      }
      case 31: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
      }
      case 30: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
      }
      case 29: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
      }
      case 28: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
      }
      case 27: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
      }
      case 26: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
      }
      case 24: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
      }
      case 23: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
      }
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
      }
      case 19: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
      }
      case 18: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
      }
      case 17: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
      }
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
      }
      case 14: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
      }
      case 13: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
      }
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
      }
      case 10: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
      }
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
      }
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
      }
      case 7: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
      }
      case 6: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
      }
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
      }
      case 3: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
      }
      case 2: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
      }
      case 0: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
      }
      case 12: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
      }
      case 78: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
      }
      case 99: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
      }
      case 98: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_243);
      }
      case 48: {
        break _L;
      }
      case 62: {
        break _L;
      }
      case 66: {
        break _L;
      }
      case 114: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_6);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_9);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 48: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_246(_lookahead) {
  switch (_lookahead) {
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_247);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 102, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_287);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_247(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_211);
    }
    case 106: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_229);
    }
    case 104: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_230);
    }
    case 103: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_246);
    }
    case 102: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_248);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(2, 102, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_68);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_251(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 96, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_132);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_0(_lookahead) {
  switch (_lookahead) {
    case 96: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_1);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_251);
    }
    case 114: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }, { _0: 17, _1: 17 }, { _0: 18, _1: 18 }, { _0: 19, _1: 19 }, { _0: 20, _1: 20 }, { _0: 21, _1: 21 }, { _0: 22, _1: 22 }, { _0: 23, _1: 23 }, { _0: 24, _1: 24 }, { _0: 25, _1: 25 }, { _0: 26, _1: 26 }, { _0: 27, _1: 27 }, { _0: 28, _1: 28 }, { _0: 29, _1: 29 }, { _0: 30, _1: 30 }, { _0: 31, _1: 31 }, { _0: 32, _1: 32 }, { _0: 33, _1: 33 }, { _0: 34, _1: 34 }, { _0: 35, _1: 35 }, { _0: 36, _1: 36 }, { _0: 37, _1: 37 }, { _0: 38, _1: 38 }, { _0: 39, _1: 39 }, { _0: 40, _1: 40 }, { _0: 41, _1: 41 }, { _0: 42, _1: 42 }, { _0: 43, _1: 43 }, { _0: 44, _1: 44 }, { _0: 45, _1: 45 }, { _0: 46, _1: 46 }, { _0: 47, _1: 47 }, { _0: 48, _1: 48 }, { _0: 49, _1: 49 }, { _0: 50, _1: 50 }, { _0: 51, _1: 51 }, { _0: 52, _1: 52 }, { _0: 53, _1: 53 }, { _0: 54, _1: 54 }, { _0: 55, _1: 55 }, { _0: 56, _1: 56 }, { _0: 57, _1: 57 }, { _0: 58, _1: 58 }, { _0: 59, _1: 59 }, { _0: 60, _1: 60 }, { _0: 61, _1: 61 }, { _0: 62, _1: 62 }, { _0: 63, _1: 63 }, { _0: 64, _1: 64 }, { _0: 65, _1: 65 }, { _0: 66, _1: 66 }, { _0: 67, _1: 67 }, { _0: 68, _1: 68 }, { _0: 69, _1: 69 }, { _0: 70, _1: 70 }, { _0: 71, _1: 71 }, { _0: 72, _1: 72 }, { _0: 73, _1: 73 }, { _0: 74, _1: 74 }, { _0: 75, _1: 75 }, { _0: 76, _1: 76 }, { _0: 77, _1: 77 }, { _0: 78, _1: 78 }, { _0: 79, _1: 79 }, { _0: 80, _1: 80 }, { _0: 81, _1: 81 }, { _0: 82, _1: 82 }, { _0: 83, _1: 83 }, { _0: 84, _1: 84 }, { _0: 85, _1: 85 }, { _0: 86, _1: 86 }, { _0: 87, _1: 87 }, { _0: 88, _1: 88 }, { _0: 89, _1: 89 }, { _0: 90, _1: 90 }, { _0: 91, _1: 91 }, { _0: 92, _1: 92 }, { _0: 93, _1: 93 }, { _0: 94, _1: 94 }, { _0: 95, _1: 95 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _More = stack$3;
          const _state = _More._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$97$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$list$$T$drop$11$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _More$2 = stack$6;
              const _state$2 = _More$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$list$46$T$More$23$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (token === undefined) {
    return new Result$Err$42$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedEndOfInput(loc._1, expected));
  } else {
    const _Some = token;
    const _token = _Some;
    return new Result$Err$42$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedToken(_token, loc, expected));
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_parse$191$(tokens, start, return_, initial_pos) {
  let cursor = 0;
  const _p = $64$moonbitlang$47$core$47$list$46$T$Empty$23$;
  const state_stack = { val: new $64$moonbitlang$47$core$47$list$46$T$More$23$(start, _p) };
  const data_stack = [];
  const _p$2 = moonbitlang$core$array$$Array$op_get$132$(tokens, 0)._1;
  let _tmp;
  if (initial_pos === undefined) {
    _tmp = _p$2;
  } else {
    const _p$3 = initial_pos;
    _tmp = _p$3;
  }
  const last_pos = { val: _tmp };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(114);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          if (cursor < tokens.length) {
            const _bind$3 = moonbitlang$core$array$$Array$op_get$132$(tokens, cursor);
            const _token = _bind$3._0;
            const _start_pos = _bind$3._1;
            const _end_pos = _bind$3._2;
            cursor = cursor + 1 | 0;
            const _bind$4 = moonbitlang$ulex$lib$new_frontend$parser$$yy_input(_token, _start_pos, _end_pos);
            const _symbol = _bind$4._0;
            const _data = _bind$4._1;
            lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
            const _func$2 = state.val;
            decision = _func$2(_symbol);
          } else {
            lookahead = { _0: 114, _1: { _0: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void, _1: last_pos.val, _2: last_pos.val }, _2: undefined };
            const _func$2 = state.val;
            decision = _func$2(114);
          }
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$43$(return_(moonbitlang$core$array$$Array$unsafe_pop$12$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$12$(data_stack, _la._1);
              const _p$3 = state_stack.val;
              state_stack.val = new $64$moonbitlang$47$core$47$list$46$T$More$23$(_next_state, _p$3);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _p$3 = lookahead;
            let _bind$4;
            if (_p$3 === undefined) {
              _bind$4 = $panic();
            } else {
              const _p$4 = _p$3;
              _bind$4 = _p$4;
            }
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$ulex$lib$new_frontend$parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp$2 = count;
      let _tmp$3 = symbol;
      let _tmp$4 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$12$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$5 = last_pos.val;
            const _tmp$6 = last_pos.val;
            start_pos = _tmp$5;
            end_pos = _tmp$6;
            break _L$4;
          } else {
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$12$(args, 0)._1;
            const _tmp$6 = moonbitlang$core$array$$ArrayView$op_get$12$(args, args.len - 1 | 0)._2;
            start_pos = _tmp$5;
            end_pos = _tmp$6;
            break _L$4;
          }
        }
        let _tmp$5 = 0;
        while (true) {
          const i = _tmp$5;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$12$(data_stack);
            state_stack.val = moonbitlang$core$list$$T$unsafe_tail$11$(state_stack.val);
            _tmp$5 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$list$$T$unsafe_head$11$(state_stack.val);
        moonbitlang$core$array$$Array$push$12$(data_stack, { _0: data, _1: start_pos, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$43$(return_(moonbitlang$core$array$$Array$unsafe_pop$12$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              const _p$3 = state_stack.val;
              state_stack.val = new $64$moonbitlang$47$core$47$list$46$T$More$23$(_next_state, _p$3);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp$2 = count$2;
        _tmp$3 = symbol$2;
        _tmp$4 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$start(tokens, initial_pos) {
  return moonbitlang$ulex$lib$new_frontend$parser$$yy_parse$191$(tokens, moonbitlang$ulex$lib$new_frontend$parser$$yy_state_0, (it) => {
    if (it.$tag === 34) {
      const _YYObj__ast_Program = it;
      return _YYObj__ast_Program._0;
    } else {
      return $panic();
    }
  }, initial_pos);
}
function moonbitlang$core$builtin$$Show$output$155$(_x_341, _x_342) {
  if (_x_341.$tag === 5) {
    const _UnexpectedToken = _x_341;
    const _$42$arg_343 = _UnexpectedToken._0;
    const _$42$arg_344 = _UnexpectedToken._1;
    const _$42$arg_345 = _UnexpectedToken._2;
    _x_342.method_0(_x_342.self, "UnexpectedToken(");
    moonbitlang$core$builtin$$Logger$write_object$98$(_x_342, _$42$arg_343);
    _x_342.method_0(_x_342.self, ", ");
    const _$42$x0_346 = _$42$arg_344._0;
    const _$42$x1_347 = _$42$arg_344._1;
    _x_342.method_0(_x_342.self, "(");
    moonbitlang$core$builtin$$Logger$write_object$92$(_x_342, _$42$x0_346);
    _x_342.method_0(_x_342.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$92$(_x_342, _$42$x1_347);
    _x_342.method_0(_x_342.self, ")");
    const _self = _x_342;
    _self.method_0(_self.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$99$(_self, _$42$arg_345);
    _self.method_0(_self.self, ")");
    return;
  } else {
    const _UnexpectedEndOfInput = _x_341;
    const _$42$arg_348 = _UnexpectedEndOfInput._0;
    const _$42$arg_349 = _UnexpectedEndOfInput._1;
    _x_342.method_0(_x_342.self, "UnexpectedEndOfInput(");
    moonbitlang$core$builtin$$Logger$write_object$92$(_x_342, _$42$arg_348);
    _x_342.method_0(_x_342.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$99$(_x_342, _$42$arg_349);
    _x_342.method_0(_x_342.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$98$(_x_321, _x_322) {
  switch (_x_321.$tag) {
    case 0: {
      _x_322.method_0(_x_322.self, "EOF");
      return;
    }
    case 1: {
      const _CHAR = _x_321;
      const _$42$arg_323 = _CHAR._0;
      _x_322.method_0(_x_322.self, "CHAR(");
      moonbitlang$core$builtin$$Logger$write_object$68$(_x_322, _$42$arg_323);
      _x_322.method_0(_x_322.self, ")");
      return;
    }
    case 2: {
      const _CHAR_ESCAPE = _x_321;
      const _$42$arg_324 = _CHAR_ESCAPE._0;
      _x_322.method_0(_x_322.self, "CHAR_ESCAPE(");
      const _$42$x0_325 = _$42$arg_324._0;
      const _$42$x1_326 = _$42$arg_324._1;
      _x_322.method_0(_x_322.self, "(");
      moonbitlang$core$builtin$$Logger$write_object$68$(_x_322, _$42$x0_325);
      _x_322.method_0(_x_322.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_322, _$42$x1_326);
      _x_322.method_0(_x_322.self, ")");
      _x_322.method_0(_x_322.self, ")");
      return;
    }
    case 3: {
      _x_322.method_0(_x_322.self, "DOT");
      return;
    }
    case 4: {
      _x_322.method_0(_x_322.self, "DOLLAR");
      return;
    }
    case 5: {
      _x_322.method_0(_x_322.self, "LBRACKET");
      return;
    }
    case 6: {
      _x_322.method_0(_x_322.self, "RBRACKET");
      return;
    }
    case 7: {
      _x_322.method_0(_x_322.self, "CARET");
      return;
    }
    case 8: {
      _x_322.method_0(_x_322.self, "MINUS");
      return;
    }
    case 9: {
      _x_322.method_0(_x_322.self, "STAR");
      return;
    }
    case 10: {
      _x_322.method_0(_x_322.self, "PLUS");
      return;
    }
    case 11: {
      _x_322.method_0(_x_322.self, "QUESTION");
      return;
    }
    case 12: {
      const _REPEAT = _x_321;
      const _$42$arg_327 = _REPEAT._0;
      _x_322.method_0(_x_322.self, "REPEAT(");
      const _$42$x0_328 = _$42$arg_327._0;
      const _$42$x1_329 = _$42$arg_327._1;
      _x_322.method_0(_x_322.self, "(");
      moonbitlang$core$builtin$$Logger$write_object$8$(_x_322, _$42$x0_328);
      _x_322.method_0(_x_322.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$18$(_x_322, _$42$x1_329);
      _x_322.method_0(_x_322.self, ")");
      _x_322.method_0(_x_322.self, ")");
      return;
    }
    case 13: {
      _x_322.method_0(_x_322.self, "LPAREN");
      return;
    }
    case 14: {
      _x_322.method_0(_x_322.self, "RPAREN");
      return;
    }
    case 15: {
      _x_322.method_0(_x_322.self, "BAR");
      return;
    }
    default: {
      const _TOKEN = _x_321;
      const _$42$arg_330 = _TOKEN._0;
      _x_322.method_0(_x_322.self, "TOKEN(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_322, _$42$arg_330);
      _x_322.method_0(_x_322.self, ")");
      return;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$106$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOF";
      break;
    }
    case 1: {
      _tmp = "CHAR";
      break;
    }
    case 2: {
      _tmp = "CHAR_ESCAPE";
      break;
    }
    case 3: {
      _tmp = "\".\"";
      break;
    }
    case 4: {
      _tmp = "\"$\"";
      break;
    }
    case 5: {
      _tmp = "\"[\"";
      break;
    }
    case 6: {
      _tmp = "\"]\"";
      break;
    }
    case 7: {
      _tmp = "\"^\"";
      break;
    }
    case 8: {
      _tmp = "\"-\"";
      break;
    }
    case 9: {
      _tmp = "\"*\"";
      break;
    }
    case 10: {
      _tmp = "\"+\"";
      break;
    }
    case 11: {
      _tmp = "\"?\"";
      break;
    }
    case 12: {
      _tmp = "REPEAT";
      break;
    }
    case 13: {
      _tmp = "\"(\"";
      break;
    }
    case 14: {
      _tmp = "\")\"";
      break;
    }
    case 15: {
      _tmp = "\"|\"";
      break;
    }
    default: {
      _tmp = "TOKEN";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_0(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 43) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 43) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
    if (_bind$2.$tag === 43) {
      const _YYObj_Char$2 = _bind$2;
      const __dollar3 = _YYObj_Char$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$range(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$star(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_3(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$any, undefined));
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar2 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => __dollar2(ctx));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
  if (_bind.$tag === 45) {
    const _YYObj__char_set_T = _bind;
    const __dollar3 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$CharSet$complement(__dollar3));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 43) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_7(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 46) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => {
      const _p = moonbitlang$core$immut$sorted_map$$T$get$71$(ctx.named_regexes, __dollar1);
      if (_p === undefined) {
        return $panic();
      } else {
        const _p$2 = _p;
        return _p$2;
      }
    });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$opt(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 43) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_10(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 47) {
    const _YYObj__Char__String_ = _bind;
    const __dollar1 = _YYObj__Char__String_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(__dollar1._0);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_11(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(45), undefined));
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
  if (_bind.$tag === 45) {
    const _YYObj__char_set_T = _bind;
    const __dollar2 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(__dollar1, undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_15(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
    if (_bind$2.$tag === 45) {
      const _YYObj__char_set_T$2 = _bind$2;
      const __dollar2 = _YYObj__char_set_T$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$CharSet$union(__dollar1, __dollar2));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$empty);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_17(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
    if (_bind$2.$tag === 48) {
      const _YYObj__Int__Int__ = _bind$2;
      const __dollar2 = _YYObj__Int__Int__._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$repeat(__dollar1(ctx), __dollar2._0, __dollar2._1));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_18(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 1)._0;
    if (_bind$2.$tag === 44) {
      const _YYObj__Context_____Regex$2 = _bind$2;
      const __dollar2 = _YYObj__Context_____Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$seq(__dollar1(ctx), __dollar2(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_19(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_20(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_21(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$plus(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_22(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$12$(_args, 2)._0;
    if (_bind$2.$tag === 44) {
      const _YYObj__Context_____Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context_____Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$alt(__dollar1(ctx), __dollar3(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_24(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$eof);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      const _CHAR = token;
      const _data = _CHAR._0;
      return { _0: 1, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(_data) };
    }
    case 2: {
      const _CHAR_ESCAPE = token;
      const _data$2 = _CHAR_ESCAPE._0;
      return { _0: 2, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Char__String_$46$YYObj__Char__String_(_data$2) };
    }
    case 3: {
      return { _0: 3, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 4: {
      return { _0: 4, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 5: {
      return { _0: 5, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 6: {
      return { _0: 6, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 7: {
      return { _0: 7, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 8: {
      return { _0: 8, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 9: {
      return { _0: 9, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 10: {
      return { _0: 10, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 11: {
      return { _0: 11, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 12: {
      const _REPEAT = token;
      const _data$3 = _REPEAT._0;
      return { _0: 12, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Int__Int__$46$YYObj__Int__Int__(_data$3) };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      return { _0: 14, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 15: {
      return { _0: 15, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    default: {
      const _TOKEN = token;
      const _data$4 = _TOKEN._0;
      return { _0: 16, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_String$46$YYObj_String(_data$4) };
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Accept;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_24);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_3);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_11);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_0);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_14);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 25, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_10);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_7);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_4);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_22(_lookahead) {
  if (_lookahead === 14) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_23);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_17);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_26(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_8);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_27(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_21);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_28(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_2);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 12: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_25);
      }
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_26);
      }
      case 10: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_27);
      }
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_28);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 3: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_12);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 25, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_6);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 19, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_18);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(4, 22, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_5);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_11(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_12);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 24, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_1);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_6(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_7);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_6);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 6: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 24, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_9);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_9(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_15);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_9);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(0, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_10(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_11);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(0, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_14(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 22, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_13);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_13(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_14);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_10);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_13);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(0, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_33(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 18, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_23);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_22);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
      }
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
      }
      case 3: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
      }
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
      }
      case 13: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
      }
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
      }
      case 19: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_30);
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 19, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_19);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_32);
      }
      case 14: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 18, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_20);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_32(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_33);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_34(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 17, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_22);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_0(_lookahead) {
  switch (_lookahead) {
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_1);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_34);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _More = stack$3;
          const _state = _More._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$106$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$list$$T$drop$24$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _More$2 = stack$6;
              const _state$2 = _More$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$list$46$T$More$26$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (token === undefined) {
    return new Result$Err$44$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedEndOfInput(loc._1, expected));
  } else {
    const _Some = token;
    const _token = _Some;
    return new Result$Err$44$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedToken(_token, loc, expected));
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_parse$192$(tokens, start, return_, initial_pos) {
  let cursor = 0;
  const _p = $64$moonbitlang$47$core$47$list$46$T$Empty$26$;
  const state_stack = { val: new $64$moonbitlang$47$core$47$list$46$T$More$26$(start, _p) };
  const data_stack = [];
  const _p$2 = moonbitlang$core$array$$Array$op_get$136$(tokens, 0)._1;
  let _tmp;
  if (initial_pos === undefined) {
    _tmp = _p$2;
  } else {
    const _p$3 = initial_pos;
    _tmp = _p$3;
  }
  const last_pos = { val: _tmp };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(26);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          if (cursor < tokens.length) {
            const _bind$3 = moonbitlang$core$array$$Array$op_get$136$(tokens, cursor);
            const _token = _bind$3._0;
            const _start_pos = _bind$3._1;
            const _end_pos = _bind$3._2;
            cursor = cursor + 1 | 0;
            const _bind$4 = moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_input(_token, _start_pos, _end_pos);
            const _symbol = _bind$4._0;
            const _data = _bind$4._1;
            lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
            const _func$2 = state.val;
            decision = _func$2(_symbol);
          } else {
            lookahead = { _0: 26, _1: { _0: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void, _1: last_pos.val, _2: last_pos.val }, _2: undefined };
            const _func$2 = state.val;
            decision = _func$2(26);
          }
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$45$(return_(moonbitlang$core$array$$Array$unsafe_pop$12$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$12$(data_stack, _la._1);
              const _p$3 = state_stack.val;
              state_stack.val = new $64$moonbitlang$47$core$47$list$46$T$More$26$(_next_state, _p$3);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _p$3 = lookahead;
            let _bind$4;
            if (_p$3 === undefined) {
              _bind$4 = $panic();
            } else {
              const _p$4 = _p$3;
              _bind$4 = _p$4;
            }
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$ulex$lib$new_frontend$regex_parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp$2 = count;
      let _tmp$3 = symbol;
      let _tmp$4 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$12$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$5 = last_pos.val;
            const _tmp$6 = last_pos.val;
            start_pos = _tmp$5;
            end_pos = _tmp$6;
            break _L$4;
          } else {
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$12$(args, 0)._1;
            const _tmp$6 = moonbitlang$core$array$$ArrayView$op_get$12$(args, args.len - 1 | 0)._2;
            start_pos = _tmp$5;
            end_pos = _tmp$6;
            break _L$4;
          }
        }
        let _tmp$5 = 0;
        while (true) {
          const i = _tmp$5;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$12$(data_stack);
            state_stack.val = moonbitlang$core$list$$T$unsafe_tail$24$(state_stack.val);
            _tmp$5 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$list$$T$unsafe_head$24$(state_stack.val);
        moonbitlang$core$array$$Array$push$12$(data_stack, { _0: data, _1: start_pos, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$45$(return_(moonbitlang$core$array$$Array$unsafe_pop$12$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              const _p$3 = state_stack.val;
              state_stack.val = new $64$moonbitlang$47$core$47$list$46$T$More$26$(_next_state, _p$3);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp$2 = count$2;
        _tmp$3 = symbol$2;
        _tmp$4 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_regex(tokens, initial_pos) {
  return moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_parse$192$(tokens, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_0, (it) => {
    if (it.$tag === 44) {
      const _YYObj__Context_____Regex = it;
      return _YYObj__Context_____Regex._0;
    } else {
      return $panic();
    }
  }, initial_pos);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_hex_integer(input) {
  let _tmp = 0;
  let _tmp$2 = { str: input, start: 0, end: input.length };
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (moonbitlang$core$string$$String$char_length_eq(_param_1.str, 0, _param_1.start, _param_1.end)) {
      return _param_0;
    } else {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_param_1.str, moonbitlang$core$string$$String$offset_of_nth_char(_param_1.str, 0, _param_1.start, _param_1.end));
      if (_x >= 48 && _x <= 57) {
        const _tmp$3 = _param_1.str;
        const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param_1.str, 1, _param_1.start, _param_1.end);
        let _tmp$4;
        if (_bind === undefined) {
          _tmp$4 = _param_1.end;
        } else {
          const _Some = _bind;
          _tmp$4 = _Some;
        }
        const _tmp$5 = _tmp$4;
        const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param_1.end };
        _tmp = (Math.imul(_param_0, 16) | 0) + (_x - 48 | 0) | 0;
        _tmp$2 = _x$2;
        continue;
      } else {
        if (_x >= 65 && _x <= 70) {
          const _tmp$3 = _param_1.str;
          const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param_1.str, 1, _param_1.start, _param_1.end);
          let _tmp$4;
          if (_bind === undefined) {
            _tmp$4 = _param_1.end;
          } else {
            const _Some = _bind;
            _tmp$4 = _Some;
          }
          const _tmp$5 = _tmp$4;
          const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param_1.end };
          _tmp = ((Math.imul(_param_0, 16) | 0) + 10 | 0) + (_x - 65 | 0) | 0;
          _tmp$2 = _x$2;
          continue;
        } else {
          if (_x >= 97 && _x <= 102) {
            const _tmp$3 = _param_1.str;
            const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param_1.str, 1, _param_1.start, _param_1.end);
            let _tmp$4;
            if (_bind === undefined) {
              _tmp$4 = _param_1.end;
            } else {
              const _Some = _bind;
              _tmp$4 = _Some;
            }
            const _tmp$5 = _tmp$4;
            const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param_1.end };
            _tmp = ((Math.imul(_param_0, 16) | 0) + 10 | 0) + (_x - 97 | 0) | 0;
            _tmp$2 = _x$2;
            continue;
          } else {
            return $panic();
          }
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(input) {
  let _tmp = 0;
  let _tmp$2 = { str: input, start: 0, end: input.length };
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (moonbitlang$core$string$$String$char_length_eq(_param_1.str, 0, _param_1.start, _param_1.end)) {
      return _param_0;
    } else {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_param_1.str, moonbitlang$core$string$$String$offset_of_nth_char(_param_1.str, 0, _param_1.start, _param_1.end));
      if (_x >= 48 && _x <= 57) {
        const _tmp$3 = _param_1.str;
        const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param_1.str, 1, _param_1.start, _param_1.end);
        let _tmp$4;
        if (_bind === undefined) {
          _tmp$4 = _param_1.end;
        } else {
          const _Some = _bind;
          _tmp$4 = _Some;
        }
        const _tmp$5 = _tmp$4;
        const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param_1.end };
        _tmp = (Math.imul(_param_0, 10) | 0) + (_x - 48 | 0) | 0;
        _tmp$2 = _x$2;
        continue;
      } else {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$decode_utf8(bytes) {
  const res = moonbitlang$core$builtin$$StringBuilder$new(0);
  const len = bytes.len;
  let i = 0;
  while (true) {
    if (i < len) {
      let c = moonbitlang$core$bytes$$View$op_get(bytes, i);
      if (c === 0) {
        break;
      } else {
        if (c < 128) {
          moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
          i = i + 1 | 0;
        } else {
          if (c < 224) {
            if ((i + 1 | 0) >= len) {
              break;
            }
            c = (c & 31) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63;
            moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
            i = i + 2 | 0;
          } else {
            if (c < 240) {
              if ((i + 2 | 0) >= len) {
                break;
              }
              c = (c & 15) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
              i = i + 3 | 0;
            } else {
              if ((i + 3 | 0) >= len) {
                break;
              }
              c = (c & 7) << 18 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 3 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
              i = i + 4 | 0;
            }
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return res.val;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_char(self, start, end) {
  const _p = moonbitlang$core$string$$String$get_char(moonbitlang$ulex$lib$new_frontend$regex_parser$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(self.data, start, end)), 0);
  return _p === -1 ? $panic() : _p;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(self, start, end) {
  return moonbitlang$ulex$lib$new_frontend$regex_parser$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(self.data, start, end));
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(self) {
  const cnum = self.pos;
  const end = self.end;
  if (cnum >= end) {
    return -1;
  }
  const _tmp = self.data;
  $bound_check(_tmp, cnum);
  const c = _tmp[cnum];
  if (c < 128) {
    self.pos = self.pos + 1 | 0;
    return c;
  }
  if (c < 224) {
    if ((cnum + 1 | 0) < end) {
      const _tmp$2 = self.data;
      const _tmp$3 = cnum + 1 | 0;
      $bound_check(_tmp$2, _tmp$3);
      const c2 = _tmp$2[_tmp$3];
      self.pos = self.pos + 2 | 0;
      return (c & 31) << 6 | c2 & 63;
    } else {
      $panic();
    }
  }
  if (c < 240) {
    if ((cnum + 2 | 0) < end) {
      const _tmp$2 = self.data;
      const _tmp$3 = cnum + 1 | 0;
      $bound_check(_tmp$2, _tmp$3);
      const c2 = _tmp$2[_tmp$3];
      const _tmp$4 = self.data;
      const _tmp$5 = cnum + 2 | 0;
      $bound_check(_tmp$4, _tmp$5);
      const c3 = _tmp$4[_tmp$5];
      self.pos = self.pos + 3 | 0;
      return (c & 15) << 12 | (c2 & 63) << 6 | c3 & 63;
    } else {
      $panic();
    }
  }
  if ((cnum + 3 | 0) < end) {
    const _tmp$2 = self.data;
    const _tmp$3 = cnum + 1 | 0;
    $bound_check(_tmp$2, _tmp$3);
    const c2 = _tmp$2[_tmp$3];
    const _tmp$4 = self.data;
    const _tmp$5 = cnum + 2 | 0;
    $bound_check(_tmp$4, _tmp$5);
    const c3 = _tmp$4[_tmp$5];
    const _tmp$6 = self.data;
    const _tmp$7 = cnum + 3 | 0;
    $bound_check(_tmp$6, _tmp$7);
    const c4 = _tmp$6[_tmp$7];
    self.pos = self.pos + 4 | 0;
    return (c & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$reset(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$token(lexbuf) {
  let _match_pattern = moonbitlang$core$int$$max_value;
  let _match_start = lexbuf.pos;
  let _match_end = -1;
  let _capture_0_start = -1;
  let _capture_0_end = -1;
  let _capture_1_start = -1;
  let _capture_1_end = -1;
  let _tag_0 = -1;
  let _tag_1 = -1;
  let _tmp = 0;
  _L: while (true) {
    const _param = _tmp;
    switch (_param) {
      case 0: {
        const _bind = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind === -1) {
          _tmp = 1;
        } else {
          if (_bind >= 0 && _bind <= 35) {
            _tmp = 2;
          } else {
            if (_bind === 36) {
              _tmp = 3;
            } else {
              if (_bind >= 37 && _bind <= 39) {
                _tmp = 2;
              } else {
                if (_bind === 40) {
                  _tmp = 4;
                } else {
                  if (_bind === 41) {
                    _tmp = 5;
                  } else {
                    if (_bind === 42) {
                      _tmp = 6;
                    } else {
                      if (_bind === 43) {
                        _tmp = 7;
                      } else {
                        if (_bind === 44) {
                          _tmp = 2;
                        } else {
                          if (_bind === 45) {
                            _tmp = 8;
                          } else {
                            if (_bind === 46) {
                              _tmp = 9;
                            } else {
                              if (_bind >= 47 && _bind <= 62) {
                                _tmp = 2;
                              } else {
                                if (_bind === 63) {
                                  _tmp = 10;
                                } else {
                                  if (_bind >= 64 && _bind <= 90) {
                                    _tmp = 2;
                                  } else {
                                    if (_bind === 91) {
                                      _tmp = 11;
                                    } else {
                                      if (_bind === 92) {
                                        _tmp = 12;
                                      } else {
                                        if (_bind === 93) {
                                          _tmp = 13;
                                        } else {
                                          if (_bind === 94) {
                                            _tmp = 14;
                                          } else {
                                            if (_bind >= 95 && _bind <= 122) {
                                              _tmp = 2;
                                            } else {
                                              if (_bind === 123) {
                                                _tmp = 15;
                                              } else {
                                                if (_bind === 124) {
                                                  _tmp = 16;
                                                } else {
                                                  if (_bind >= 125 && _bind <= 1114111) {
                                                    _tmp = 2;
                                                  } else {
                                                    break _L;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        continue _L;
      }
      case 1: {
        _match_pattern = 0;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 2: {
        _match_pattern = 30;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 1 | 0;
        break _L;
      }
      case 3: {
        _match_pattern = 2;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 4: {
        _match_pattern = 13;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 5: {
        _match_pattern = 14;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 6: {
        _match_pattern = 7;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 7: {
        _match_pattern = 8;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 8: {
        _match_pattern = 6;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 9: {
        _match_pattern = 1;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 10: {
        _match_pattern = 9;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 11: {
        _match_pattern = 3;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 12: {
        _match_pattern = 30;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 1 | 0;
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$2 === 92) {
          _tmp = 17;
        } else {
          break _L;
        }
        continue _L;
      }
      case 13: {
        _match_pattern = 4;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 14: {
        _match_pattern = 5;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 15: {
        _match_pattern = 30;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 1 | 0;
        const _bind$3 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$3 === 48) {
          _tmp = 18;
        } else {
          if (_bind$3 >= 49 && _bind$3 <= 57) {
            _tmp = 19;
          } else {
            break _L;
          }
        }
        continue _L;
      }
      case 16: {
        _match_pattern = 15;
        _match_end = lexbuf.pos;
        break _L;
      }
      case 17: {
        const _bind$4 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        switch (_bind$4) {
          case 36: {
            _tmp = 20;
            break;
          }
          case 40: {
            _tmp = 21;
            break;
          }
          case 41: {
            _tmp = 22;
            break;
          }
          case 42: {
            _tmp = 23;
            break;
          }
          case 43: {
            _tmp = 24;
            break;
          }
          case 46: {
            _tmp = 25;
            break;
          }
          case 63: {
            _tmp = 26;
            break;
          }
          case 91: {
            _tmp = 27;
            break;
          }
          case 92: {
            _tmp = 28;
            break;
          }
          case 93: {
            _tmp = 29;
            break;
          }
          case 94: {
            _tmp = 30;
            break;
          }
          case 117: {
            _tmp = 31;
            break;
          }
          case 124: {
            _tmp = 32;
            break;
          }
          default: {
            break _L;
          }
        }
        continue _L;
      }
      case 18: {
        _tag_0 = lexbuf.pos;
        const _bind$5 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        switch (_bind$5) {
          case 44: {
            _tmp = 33;
            break;
          }
          case 125: {
            _tmp = 34;
            break;
          }
          default: {
            break _L;
          }
        }
        continue _L;
      }
      case 19: {
        _tag_0 = lexbuf.pos;
        const _bind$6 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$6 === 44) {
          _tmp = 33;
        } else {
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp = 19;
          } else {
            if (_bind$6 === 125) {
              _tmp = 34;
            } else {
              break _L;
            }
          }
        }
        continue _L;
      }
      case 20: {
        _match_pattern = 22;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 21: {
        _match_pattern = 17;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 22: {
        _match_pattern = 18;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 23: {
        _match_pattern = 25;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 24: {
        _match_pattern = 24;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 25: {
        _match_pattern = 21;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 26: {
        _match_pattern = 26;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 27: {
        _match_pattern = 19;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 28: {
        const _bind$7 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$7 === 92) {
          _tmp = 37;
        } else {
          break _L;
        }
        continue _L;
      }
      case 29: {
        _match_pattern = 20;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 30: {
        _match_pattern = 23;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 31: {
        const _bind$8 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$8 >= 48 && _bind$8 <= 57) {
          _tmp = 35;
        } else {
          if (_bind$8 >= 65 && _bind$8 <= 70) {
            _tmp = 35;
          } else {
            if (_bind$8 >= 97 && _bind$8 <= 102) {
              _tmp = 35;
            } else {
              if (_bind$8 === 123) {
                _tmp = 36;
              } else {
                break _L;
              }
            }
          }
        }
        continue _L;
      }
      case 32: {
        _match_pattern = 27;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 3 | 0;
        break _L;
      }
      case 33: {
        _tag_1 = lexbuf.pos;
        const _bind$9 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$9 === 48) {
          _tmp = 38;
        } else {
          if (_bind$9 >= 49 && _bind$9 <= 57) {
            _tmp = 39;
          } else {
            if (_bind$9 === 125) {
              _tmp = 40;
            } else {
              break _L;
            }
          }
        }
        continue _L;
      }
      case 34: {
        _match_pattern = 12;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start + 1 | 0;
        _capture_0_end = _match_end + -1 | 0;
        break _L;
      }
      case 35: {
        const _bind$10 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$10 >= 48 && _bind$10 <= 57) {
          _tmp = 41;
        } else {
          if (_bind$10 >= 65 && _bind$10 <= 70) {
            _tmp = 41;
          } else {
            if (_bind$10 >= 97 && _bind$10 <= 102) {
              _tmp = 41;
            } else {
              break _L;
            }
          }
        }
        continue _L;
      }
      case 36: {
        const _bind$11 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$11 >= 48 && _bind$11 <= 57) {
          _tmp = 42;
        } else {
          if (_bind$11 >= 65 && _bind$11 <= 70) {
            _tmp = 42;
          } else {
            if (_bind$11 >= 97 && _bind$11 <= 102) {
              _tmp = 42;
            } else {
              break _L;
            }
          }
        }
        continue _L;
      }
      case 37: {
        _match_pattern = 16;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 4 | 0;
        break _L;
      }
      case 38: {
        const _bind$12 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$12 === 125) {
          _tmp = 43;
        } else {
          break _L;
        }
        continue _L;
      }
      case 39: {
        const _bind$13 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$13 >= 48 && _bind$13 <= 57) {
          _tmp = 39;
        } else {
          if (_bind$13 === 125) {
            _tmp = 43;
          } else {
            break _L;
          }
        }
        continue _L;
      }
      case 40: {
        _match_pattern = 11;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start + 1 | 0;
        _capture_0_end = _match_end + -2 | 0;
        break _L;
      }
      case 41: {
        const _bind$14 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$14 >= 48 && _bind$14 <= 57) {
          _tmp = 44;
        } else {
          if (_bind$14 >= 65 && _bind$14 <= 70) {
            _tmp = 44;
          } else {
            if (_bind$14 >= 97 && _bind$14 <= 102) {
              _tmp = 44;
            } else {
              break _L;
            }
          }
        }
        continue _L;
      }
      case 42: {
        const _bind$15 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$15 >= 48 && _bind$15 <= 57) {
          _tmp = 42;
        } else {
          if (_bind$15 >= 65 && _bind$15 <= 70) {
            _tmp = 42;
          } else {
            if (_bind$15 >= 97 && _bind$15 <= 102) {
              _tmp = 42;
            } else {
              if (_bind$15 === 125) {
                _tmp = 45;
              } else {
                break _L;
              }
            }
          }
        }
        continue _L;
      }
      case 43: {
        _match_pattern = 10;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start + 1 | 0;
        _capture_0_end = _tag_0;
        _capture_1_start = _tag_1;
        _capture_1_end = _match_end + -1 | 0;
        break _L;
      }
      case 44: {
        const _bind$16 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        if (_bind$16 >= 48 && _bind$16 <= 57) {
          _tmp = 46;
        } else {
          if (_bind$16 >= 65 && _bind$16 <= 70) {
            _tmp = 46;
          } else {
            if (_bind$16 >= 97 && _bind$16 <= 102) {
              _tmp = 46;
            } else {
              break _L;
            }
          }
        }
        continue _L;
      }
      case 45: {
        _match_pattern = 28;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_end;
        _capture_1_start = _match_start + 4 | 0;
        _capture_1_end = _match_end + -1 | 0;
        break _L;
      }
      case 46: {
        _match_pattern = 29;
        _match_end = lexbuf.pos;
        _capture_0_start = _match_start;
        _capture_0_end = _match_start + 7 | 0;
        _capture_1_start = _match_start + 3 | 0;
        _capture_1_end = _match_start + 7 | 0;
        break _L;
      }
      default: {
        $panic();
        break _L;
      }
    }
  }
  if (_match_pattern <= 30) {
    moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$reset(lexbuf, _match_end);
    const _bind = _match_pattern;
    switch (_bind) {
      case 0: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$EOF, _1: _match_start, _2: _match_end };
      }
      case 1: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOT, _1: _match_start, _2: _match_end };
      }
      case 2: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOLLAR, _1: _match_start, _2: _match_end };
      }
      case 3: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LBRACKET, _1: _match_start, _2: _match_end };
      }
      case 4: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RBRACKET, _1: _match_start, _2: _match_end };
      }
      case 5: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CARET, _1: _match_start, _2: _match_end };
      }
      case 6: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$MINUS, _1: _match_start, _2: _match_end };
      }
      case 7: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$STAR, _1: _match_start, _2: _match_end };
      }
      case 8: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$PLUS, _1: _match_start, _2: _match_end };
      }
      case 9: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$QUESTION, _1: _match_start, _2: _match_end };
      }
      case 10: {
        const t1 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const t2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t1), _1: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t2) }), _1: _match_start, _2: _match_end };
      }
      case 11: {
        const t = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t), _1: undefined }), _1: _match_start, _2: _match_end };
      }
      case 12: {
        const t$2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const n = moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t$2);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT({ _0: n, _1: n }), _1: _match_start, _2: _match_end };
      }
      case 13: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LPAREN, _1: _match_start, _2: _match_end };
      }
      case 14: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RPAREN, _1: _match_start, _2: _match_end };
      }
      case 15: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$BAR, _1: _match_start, _2: _match_end };
      }
      case 16: {
        const t$3 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 92, _1: t$3 }), _1: _match_start, _2: _match_end };
      }
      case 17: {
        const t$4 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 40, _1: t$4 }), _1: _match_start, _2: _match_end };
      }
      case 18: {
        const t$5 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 41, _1: t$5 }), _1: _match_start, _2: _match_end };
      }
      case 19: {
        const t$6 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 91, _1: t$6 }), _1: _match_start, _2: _match_end };
      }
      case 20: {
        const t$7 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 93, _1: t$7 }), _1: _match_start, _2: _match_end };
      }
      case 21: {
        const t$8 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 46, _1: t$8 }), _1: _match_start, _2: _match_end };
      }
      case 22: {
        const t$9 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 36, _1: t$9 }), _1: _match_start, _2: _match_end };
      }
      case 23: {
        const t$10 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 94, _1: t$10 }), _1: _match_start, _2: _match_end };
      }
      case 24: {
        const t$11 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 43, _1: t$11 }), _1: _match_start, _2: _match_end };
      }
      case 25: {
        const t$12 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 42, _1: t$12 }), _1: _match_start, _2: _match_end };
      }
      case 26: {
        const t$13 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 63, _1: t$13 }), _1: _match_start, _2: _match_end };
      }
      case 27: {
        const t$14 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 124, _1: t$14 }), _1: _match_start, _2: _match_end };
      }
      case 28: {
        const t$15 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const t1$2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_hex_integer(t1$2), _1: t$15 }), _1: _match_start, _2: _match_end };
      }
      case 29: {
        const t$16 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const t1$3 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_hex_integer(t1$3), _1: t$16 }), _1: _match_start, _2: _match_end };
      }
      case 30: {
        const t$17 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_char(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR(t$17), _1: _match_start, _2: _match_end };
      }
      default: {
        return $panic();
      }
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$from_string(string) {
  return { data: moonbitlang$x$encoding$$encode(0, string), end: string.length, pos: 0 };
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$tokenize_string_literal(lit, initial_pos) {
  const lexbuf = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$from_string(lit);
  const _p = (yield_) => {
    while (true) {
      const _bind = moonbitlang$ulex$lib$new_frontend$regex_parser$$token(lexbuf);
      const _tok = _bind._0;
      const _start = _bind._1;
      const _end = _bind._2;
      let _tmp;
      if (_tok.$tag === 0) {
        _tmp = true;
      } else {
        _tmp = false;
      }
      if (!_tmp) {
        const _bind$2 = yield_({ _0: _tok, _1: { fname: initial_pos.fname, lnum: initial_pos.lnum, bol: initial_pos.bol, cnum: _start }, _2: { fname: initial_pos.fname, lnum: initial_pos.lnum, bol: initial_pos.bol, cnum: _end } });
        if (_bind$2 === 0) {
          return 0;
        }
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(regex, named_regexes) {
  const _p = (yield_) => {
    switch (regex.$tag) {
      case 0: {
        const _Literal = regex;
        const _lit = _Literal._0;
        const _loc = _Literal._1;
        return moonbitlang$core$builtin$$Iter$run$136$(moonbitlang$ulex$lib$new_frontend$regex_parser$$tokenize_string_literal(_lit, _loc.start), yield_);
      }
      case 2: {
        const _Named = regex;
        const _id = _Named._0;
        return yield_({ _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN(_id.name), _1: _id.loc.start, _2: _id.loc.end });
      }
      default: {
        const _Interp = regex;
        const _interps = _Interp._0;
        const _len = _interps.length;
        let _tmp = 0;
        while (true) {
          const _i = _tmp;
          if (_i < _len) {
            const interp = _interps[_i];
            if (interp.$tag === 0) {
              const _InterpLit = interp;
              const _repr = _InterpLit._0;
              const _loc$2 = _InterpLit._1;
              const _bind = moonbitlang$core$builtin$$Iter$run$136$(moonbitlang$ulex$lib$new_frontend$regex_parser$$tokenize_string_literal(_repr, _loc$2.start), yield_);
              if (_bind === 0) {
                return 0;
              }
            } else {
              const _InterpSource = interp;
              const _x = _InterpSource._0;
              const _source = _x.source;
              const _loc$2 = _x.loc;
              const _bind = yield_({ _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN(_source), _1: _loc$2.start, _2: _loc$2.end });
              if (_bind === 0) {
                return 0;
              }
            }
            _tmp = _i + 1 | 0;
            continue;
          } else {
            return 1;
          }
        }
      }
    }
  };
  const tokens = moonbitlang$core$builtin$$Iter$to_array$136$(_p);
  let k_regex;
  let _try_err;
  _L: {
    _L$2: {
      const _bind = moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_regex(tokens, undefined);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        k_regex = _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L$2;
      }
      break _L;
    }
    moonbitlang$core$builtin$$println$155$(_try_err);
    k_regex = $panic();
  }
  return k_regex({ named_regexes: named_regexes });
}
function moonbitlang$ulex$lib$new_frontend$codegen$$group_trans$46$42$func$124$167(_env, _p) {
  const _state = _env._1;
  const _bind = _env._0;
  return _bind((_p$2) => {
    const _min = _p$2._0;
    const _max = _p$2._1;
    const _bind$2 = _min === -1 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof : new $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(_min);
    let _tmp;
    if (_bind$2.$tag === 0) {
      _tmp = -1;
    } else {
      const _Char = _bind$2;
      const _c = _Char._0;
      _tmp = _c;
    }
    const _tmp$2 = _tmp;
    const _bind$3 = _max === -1 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof : new $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(_max);
    let _tmp$3;
    if (_bind$3.$tag === 0) {
      _tmp$3 = -1;
    } else {
      const _Char = _bind$3;
      const _c = _Char._0;
      _tmp$3 = _c;
    }
    return _p({ _0: { _0: _tmp$2, _1: _tmp$3 }, _1: _state });
  });
}
function moonbitlang$ulex$lib$new_frontend$codegen$$group_trans(trans) {
  const char_set_by_state = moonbitlang$core$builtin$$Map$from_array$112$([]);
  const _len = trans.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tran = trans[_i];
      const _char_set = tran._0;
      const _next_state = tran._1;
      const _bind = moonbitlang$core$builtin$$Map$get$112$(char_set_by_state, _next_state);
      if (_bind === undefined) {
        moonbitlang$core$builtin$$Map$op_set$112$(char_set_by_state, _next_state, _char_set);
      } else {
        const _Some = _bind;
        const _existing_char_set = _Some;
        moonbitlang$core$builtin$$Map$op_set$112$(char_set_by_state, _next_state, moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(_char_set, _existing_char_set));
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$builtin$$Map$iter$112$(char_set_by_state);
  const result = moonbitlang$core$builtin$$Iter$to_array$26$((_p) => _bind((_p$2) => {
    const _state = _p$2._0;
    const _char_set = _p$2._1;
    const _bind$2 = moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$iter_ranges(_char_set);
    const _env = { _0: _bind$2, _1: _state };
    return moonbitlang$ulex$lib$new_frontend$codegen$$group_trans$46$42$func$124$167(_env, _p);
  }));
  moonbitlang$core$array$$Array$sort$26$(result);
  return result;
}
function moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock$46$index_of_name$124$22(captures, name) {
  const _p = captures.length;
  let _p$2;
  let _tmp = 0;
  while (true) {
    const _p$3 = _tmp;
    if (_p$3 < _p) {
      const _p$4 = captures[_p$3];
      const it = _p$4;
      const _n = it._0;
      if (_n === name) {
        _p$2 = _p$3;
        break;
      }
      _tmp = _p$3 + 1 | 0;
      continue;
    } else {
      _p$2 = undefined;
      break;
    }
  }
  if (_p$2 === undefined) {
    return $panic();
  } else {
    const _p$3 = _p$2;
    return _p$3;
  }
}
function moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock(codeblock, subst, captures) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  let last_index = 0;
  const _len = subst.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = subst[_i];
      moonbitlang$core$builtin$$Logger$write_substring$38$(buf, codeblock, last_index, item.start - last_index | 0);
      const _bind = item.desc;
      switch (_bind.$tag) {
        case 0: {
          const _StartPosOf = _bind;
          const _name = _StartPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock$46$index_of_name$124$22(captures, _name))}_start`);
          break;
        }
        case 1: {
          const _EndPosOf = _bind;
          const _name$2 = _EndPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock$46$index_of_name$124$22(captures, _name$2))}_end`);
          break;
        }
        case 2: {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, "_match_start");
          break;
        }
        default: {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, "_match_end");
        }
      }
      last_index = item.end;
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (last_index < codeblock.length) {
    moonbitlang$core$builtin$$Logger$write_substring$38$(buf, codeblock, last_index, codeblock.length - last_index | 0);
  }
  return buf.val;
}
function moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(tag_var) {
  return tag_var._1 === 0 ? `_tag_${moonbitlang$core$builtin$$Show$to_string$8$(tag_var._0)}` : `_tag_${moonbitlang$core$builtin$$Show$to_string$8$(tag_var._0)}_${moonbitlang$core$builtin$$Show$to_string$8$(tag_var._1)}`;
}
function moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax(rule, code_unit, default_encoding) {
  const out = moonbitlang$core$builtin$$StringBuilder$new(0);
  let encoding;
  _L: {
    _L$2: {
      switch (code_unit) {
        case 0: {
          encoding = default_encoding;
          break;
        }
        case 1: {
          break _L$2;
        }
        default: {
          break _L$2;
        }
      }
      break _L;
    }
    encoding = undefined;
  }
  const dfa = moonbitlang$ulex$lib$automaton$$DFA$from_patterns(rule.patterns, encoding);
  const _bind = moonbitlang$core$array$$Array$iter$133$(dfa.pattern_captures);
  const _p = moonbitlang$core$builtin$$Iter$maximum$8$((_p$2) => _bind((_p$3) => _p$2(_p$3._0.length)));
  const _p$2 = 0;
  let max_num_capture_vars;
  if (_p === undefined) {
    max_num_capture_vars = _p$2;
  } else {
    const _p$3 = _p;
    max_num_capture_vars = _p$3;
  }
  const max_pattern_id = dfa.pattern_captures.length - 1 | 0;
  moonbitlang$core$builtin$$Logger$write_string$38$(out, `loop ${rule.lexee} { _lexee => {\n  let _data = _lexee.data()\n  let mut _cursor = _lexee.start_offset()\n  let _end = _cursor + _lexee.length()\n  let mut _match_pattern = @int.max_value\n  let mut _match_start = _cursor\n  let mut _match_end = -1\n`);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i <= max_num_capture_vars) {
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$8$(i)}_start = -1\n  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$8$(i)}_end = -1\n`);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const all_tag_actions = moonbitlang$core$sorted_set$$new$44$();
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$118$(dfa.tag_actions);
  _bind$2((__, tag_action) => {
    moonbitlang$core$sorted_set$$T$add$44$(all_tag_actions, tag_action);
    return 1;
  });
  const all_tag_vars = moonbitlang$core$sorted_set$$new$46$();
  const _bind$3 = moonbitlang$core$sorted_set$$T$iter$44$(all_tag_actions);
  _bind$3((tag_action) => {
    const _arr = tag_action;
    const _len = _arr.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len) {
        const op = _arr[_i];
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          moonbitlang$core$sorted_set$$T$add$46$(all_tag_vars, _dest);
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          moonbitlang$core$sorted_set$$T$add$46$(all_tag_vars, _dest);
          moonbitlang$core$sorted_set$$T$add$46$(all_tag_vars, _src);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _bind$4 = moonbitlang$core$sorted_set$$T$iter$46$(all_tag_vars);
  _bind$4((tag_var) => {
    moonbitlang$core$builtin$$Logger$write_string$38$(out, `  let mut ${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(tag_var)} = -1\n`);
    return 1;
  });
  const start_tags = moonbitlang$core$sorted_set$$new$8$();
  const _bind$5 = moonbitlang$core$sorted_set$$T$iter$8$(start_tags);
  _bind$5((tag) => {
    moonbitlang$core$builtin$$Logger$write_string$38$(out, `  ${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59({ _0: tag, _1: 0 })} = _cursor\n`);
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$38$(out, `  loop ${moonbitlang$core$builtin$$Show$to_string$8$(dfa.start_node)} {\n`);
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const trans = _arr[_i];
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `    ${moonbitlang$core$builtin$$Show$to_string$8$(_i)} => {\n`);
      const tag_action = moonbitlang$core$option$$Option$unwrap$44$(moonbitlang$core$builtin$$Map$get$118$(dfa.tag_actions, _i));
      const buf = [];
      const _arr$2 = tag_action;
      const _len$2 = _arr$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const op = _arr$2[_i$2];
          if (op.$tag === 0) {
            const _Set = op;
            const _dest = _Set._0;
            moonbitlang$core$array$$Array$push$0$(buf, `${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(_dest)} = _cursor`);
          } else {
            const _Copy = op;
            const _dest = _Copy._0;
            const _src = _Copy._1;
            moonbitlang$core$array$$Array$push$0$(buf, `${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(_dest)} = ${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(_src)}`);
          }
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _bind$6;
      if (buf.length === 0) {
        _bind$6 = undefined;
      } else {
        const _bind$7 = moonbitlang$core$array$$Array$iter$0$(buf);
        _bind$6 = moonbitlang$core$builtin$$Iter$join((_p$3) => _bind$7((_p$4) => _p$3(`      ${_p$4}`)), "\n");
      }
      if (_bind$6 === undefined) {
      } else {
        const _Some = _bind$6;
        const _tag_action_code = _Some;
        moonbitlang$core$builtin$$Logger$write_string$38$(out, `${_tag_action_code}\n`);
      }
      const _bind$7 = moonbitlang$core$builtin$$Map$get$114$(dfa.end_nodes, _i);
      if (_bind$7 === undefined) {
      } else {
        const _Some = _bind$7;
        const _x = _Some;
        const _pattern_id = _x._0;
        const _captures = _x._1;
        moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _match_pattern = ${moonbitlang$core$builtin$$Show$to_string$8$(_pattern_id)}\n      _match_end = _cursor\n`);
        const _len$3 = _captures.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const capture = _captures[_i$2];
            const _begin = capture._0;
            const _end = capture._1;
            if (_begin.$tag === 0) {
              const _Dynamic_dfa = _begin;
              const _begin_tag_var = _Dynamic_dfa._0;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = ${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(_begin_tag_var)}\n`);
            } else {
              const _Static_dfa = _begin;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_start + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start = _match_end + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              }
            }
            if (_end.$tag === 0) {
              const _Dynamic_dfa = _end;
              const _end_tag_var = _Dynamic_dfa._0;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = ${moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$59(_end_tag_var)}\n`);
            } else {
              const _Static_dfa = _end;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_start + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `      _capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end = _match_end + ${moonbitlang$core$builtin$$Show$to_string$8$(_offset)}\n`);
                }
              }
            }
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "");
      }
      const grouped_trans = moonbitlang$ulex$lib$new_frontend$codegen$$group_trans(trans);
      if (grouped_trans.length === 0) {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "      break\n");
      } else {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "      continue match (\n        if _cursor < _end {\n          let c = _data[_cursor]\n          _cursor += 1\n          c.to_int()\n        } else {\n          -1 // EOF\n        }\n      ) {\n");
        const _len$3 = grouped_trans.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const tran = grouped_trans[_i$2];
            const _x = tran._0;
            const _first_char = _x._0;
            const _last_char = _x._1;
            const _next_state = tran._1;
            const pattern = _first_char === _last_char ? moonbitlang$core$builtin$$Show$to_string$8$(_first_char) : `${moonbitlang$core$builtin$$Show$to_string$8$(_first_char)}..=${moonbitlang$core$builtin$$Show$to_string$8$(_last_char)}`;
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `        ${pattern} => ${moonbitlang$core$builtin$$Show$to_string$8$(_next_state)}\n`);
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "        _ => break\n      }\n");
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(out, "    }\n");
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$38$(out, "    _ => panic()\n  }\n");
  moonbitlang$core$builtin$$Logger$write_string$38$(out, `\n  guard _match_pattern <= ${moonbitlang$core$builtin$$Show$to_string$8$(max_pattern_id)} else {\n    // No pattern matched\n    panic()\n  }\n\n  match _match_pattern {\n`);
  const _arr$2 = rule.actions;
  const _len$2 = _arr$2.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$2) {
      const action = _arr$2[_i];
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `    ${moonbitlang$core$builtin$$Show$to_string$8$(_i)} => {\n      ()\n`);
      const subst = moonbitlang$ulex$lib$codegen$codeblock_parser$$parse_codeblock(action);
      const captures = moonbitlang$core$array$$Array$op_get$133$(dfa.pattern_captures, _i);
      const _arr$3 = captures._0;
      const _len$3 = _arr$3.length;
      let _tmp$4 = 0;
      while (true) {
        const _i$2 = _tmp$4;
        if (_i$2 < _len$3) {
          const capture = _arr$3[_i$2];
          const _name = capture._0;
          const _var_type = capture._1;
          if (_var_type === 0) {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let ${_name} = _data[_capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start]\n`);
          } else {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let ${_name} = _data[_capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_start:_capture_${moonbitlang$core$builtin$$Show$to_string$8$(_i$2)}_end]\n`);
          }
          let _tmp$5;
          let _return_value;
          _L$2: {
            _L$3: {
              const _len$4 = subst.length;
              let _tmp$6 = 0;
              while (true) {
                const _i$3 = _tmp$6;
                if (_i$3 < _len$4) {
                  const item = subst[_i$3];
                  let n;
                  _L$4: {
                    _L$5: {
                      const _bind$6 = item.desc;
                      switch (_bind$6.$tag) {
                        case 0: {
                          const _StartPosOf = _bind$6;
                          const _n = _StartPosOf._0;
                          n = _n;
                          break _L$5;
                        }
                        case 1: {
                          const _EndPosOf = _bind$6;
                          const _n$2 = _EndPosOf._0;
                          n = _n$2;
                          break _L$5;
                        }
                        case 2: {
                          break;
                        }
                      }
                      break _L$4;
                    }
                    if (n === _name) {
                      _return_value = true;
                      break _L$3;
                    }
                  }
                  _tmp$6 = _i$3 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              _tmp$5 = false;
              break _L$2;
            }
            _tmp$5 = _return_value;
          }
          if (_tmp$5) {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let _ = ${_name}\n`);
          }
          _tmp$4 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _bind$6 = captures._1;
      if (_bind$6 === undefined) {
      } else {
        const _Some = _bind$6;
        const _rest_binder = _Some;
        moonbitlang$core$builtin$$Logger$write_string$38$(out, `      let ${_rest_binder} = _data[_match_end:]\n`);
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `${moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock(action, subst, captures._0)}\n`);
      moonbitlang$core$builtin$$Logger$write_string$38$(out, "    }\n");
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$38$(out, "    _ => panic()\n  }\n} }");
  return out.val;
}
function moonbitlang$ulex$lib$util$ext$$unzip_array$193$(arr) {
  const first = [];
  const second = [];
  const _len = arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const it = arr[_i];
      const _a = it._0;
      const _b = it._1;
      moonbitlang$core$array$$Array$push$160$(first, _a);
      moonbitlang$core$array$$Array$push$0$(second, _b);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: first, _1: second };
}
function moonbitlang$ulex$lib$new_frontend$driver$$decode_utf8(bytes) {
  const res = moonbitlang$core$builtin$$StringBuilder$new(0);
  const len = bytes.len;
  let i = 0;
  while (true) {
    if (i < len) {
      let c = moonbitlang$core$bytes$$View$op_get(bytes, i);
      if (c === 0) {
        break;
      } else {
        if (c < 128) {
          moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
          i = i + 1 | 0;
        } else {
          if (c < 224) {
            if ((i + 1 | 0) >= len) {
              break;
            }
            c = (c & 31) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63;
            moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
            i = i + 2 | 0;
          } else {
            if (c < 240) {
              if ((i + 2 | 0) >= len) {
                break;
              }
              c = (c & 15) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
              i = i + 3 | 0;
            } else {
              if ((i + 3 | 0) >= len) {
                break;
              }
              c = (c & 7) << 18 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 3 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$38$(res, c);
              i = i + 4 | 0;
            }
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return res.val;
}
function moonbitlang$ulex$lib$new_frontend$driver$$print_term(out, term, source) {
  switch (term.$tag) {
    case 0: {
      const _Code = term;
      const _loc = _Code._0;
      moonbitlang$core$builtin$$Logger$write_string$38$(out, moonbitlang$ulex$lib$new_frontend$driver$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(source, _loc.start.cnum, _loc.end.cnum)));
      return;
    }
    case 4: {
      const _GeneratedCode = term;
      const _code = _GeneratedCode._0;
      moonbitlang$core$builtin$$Logger$write_string$38$(out, _code);
      return;
    }
    case 1: {
      const _Nested = term;
      const _terms = _Nested._0;
      const _len = _terms.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const term$2 = _terms[_i];
          moonbitlang$ulex$lib$new_frontend$driver$$print_term(out, term$2, source);
          _tmp = _i + 1 | 0;
          continue;
        } else {
          return;
        }
      }
    }
    case 2: {
      return;
    }
    default: {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$driver$$generate(term, source) {
  const term$2 = moonbitlang$ulex$lib$new_frontend$driver$$expand_term(term, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$11$, source);
  const buffer = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$ulex$lib$new_frontend$driver$$print_term(buffer, term$2, source);
  return buffer.val;
}
function moonbitlang$ulex$lib$new_frontend$driver$$expand_term(term, named_regexes, source) {
  _L: {
    switch (term.$tag) {
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 1: {
        const _Nested = term;
        const _terms = _Nested._0;
        const _loc = _Nested._1;
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(moonbitlang$ulex$lib$new_frontend$driver$$expand_terms(_terms, named_regexes, source), _loc);
      }
      default: {
        const _LexDef = term;
        const _lexee = _LexDef._0;
        const _cases = _LexDef._1;
        const _loc$2 = _LexDef._2;
        const _p = new Array(_cases.length);
        const _p$2 = _cases.length;
        let _tmp = 0;
        while (true) {
          const _p$3 = _tmp;
          if (_p$3 < _p$2) {
            const _p$4 = _cases[_p$3];
            const case_ = _p$4;
            const _bind = case_.pattern;
            let _bind$2;
            if (_bind.$tag === 0) {
              const _OpenPattern = _bind;
              const _items = _OpenPattern._0;
              const _rest = _OpenPattern._1;
              _bind$2 = { _0: _items, _1: true, _2: _rest };
            } else {
              const _ClosedPattern = _bind;
              const _items = _ClosedPattern._0;
              _bind$2 = { _0: _items, _1: false, _2: undefined };
            }
            const _items = _bind$2._0;
            const _open = _bind$2._1;
            const _rest = _bind$2._2;
            let re;
            let _tmp$2 = moonbitlang$ulex$lib$regex$$epsilon;
            let _tmp$3 = { buf: _items, start: 0, len: _items.length };
            while (true) {
              const _param_0 = _tmp$2;
              const _param_1 = _tmp$3;
              if (_param_1.len === 0) {
                re = _param_0;
                break;
              } else {
                const _x = _param_1.buf[_param_1.start];
                if (_x.$tag === 0) {
                  const _Regex = _x;
                  const _re = _Regex._0;
                  const _tmp$4 = _param_1.buf;
                  const _tmp$5 = 1 + _param_1.start | 0;
                  const _some = _param_1.len;
                  const _x$2 = { buf: _tmp$4, start: _tmp$5, len: _some - 1 | 0 };
                  _tmp$2 = moonbitlang$ulex$lib$regex$$seq(_param_0, moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(_re, named_regexes));
                  _tmp$3 = _x$2;
                  continue;
                } else {
                  const _RegexAs = _x;
                  const _re = _RegexAs._0;
                  const _id = _RegexAs._1;
                  const _tmp$4 = _param_1.buf;
                  const _tmp$5 = 1 + _param_1.start | 0;
                  const _some = _param_1.len;
                  const _x$2 = { buf: _tmp$4, start: _tmp$5, len: _some - 1 | 0 };
                  _tmp$2 = moonbitlang$ulex$lib$regex$$seq(_param_0, moonbitlang$ulex$lib$regex$$bind(moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(_re, named_regexes), _id.name));
                  _tmp$3 = _x$2;
                  continue;
                }
              }
            }
            let _bind$3;
            if (_open === true) {
              _bind$3 = { _0: re, _1: _rest };
            } else {
              _bind$3 = _rest === undefined ? { _0: moonbitlang$ulex$lib$regex$$seq(re, moonbitlang$ulex$lib$regex$$eof), _1: undefined } : $panic();
            }
            const _re = _bind$3._0;
            const _rest_binder = _bind$3._1;
            let rest_binder;
            if (_rest_binder === undefined) {
              rest_binder = undefined;
            } else {
              const _Some = _rest_binder;
              const _id = _Some;
              rest_binder = _id.name;
            }
            _p[_p$3] = { _0: { _0: _re, _1: rest_binder }, _1: moonbitlang$ulex$lib$new_frontend$driver$$generate(case_.action, source) };
            _tmp = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const _bind = moonbitlang$ulex$lib$util$ext$$unzip_array$193$(_p);
        const _patterns = _bind._0;
        const _actions = _bind._1;
        const rule = { lexee: moonbitlang$ulex$lib$new_frontend$driver$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(source, _lexee.loc.start.cnum, _lexee.loc.end.cnum)), patterns: _patterns, actions: _actions };
        const code = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax(rule, 0, 2);
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$GeneratedCode(code, _loc$2);
      }
    }
  }
  return term;
}
function moonbitlang$ulex$lib$new_frontend$driver$$expand_terms(terms, named_regexes, source) {
  let named_regexes$2;
  let _tmp = 0;
  let _tmp$2 = named_regexes;
  while (true) {
    const _p = _tmp;
    const _p$2 = _tmp$2;
    if (_p < terms.length) {
      _tmp = _p + 1 | 0;
      const acc = _p$2;
      const term = moonbitlang$core$array$$Array$op_get$40$(terms, _p);
      if (term.$tag === 2) {
        const _NamedRegex = term;
        const _id = _NamedRegex._0;
        const _regex = _NamedRegex._1;
        _tmp$2 = moonbitlang$core$immut$sorted_map$$T$add$71$(acc, _id.name, moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(_regex, acc));
      } else {
        _tmp$2 = acc;
      }
      continue;
    } else {
      named_regexes$2 = _p$2;
      break;
    }
  }
  const _p = new Array(terms.length);
  const _p$2 = terms.length;
  let _tmp$3 = 0;
  while (true) {
    const _p$3 = _tmp$3;
    if (_p$3 < _p$2) {
      const _p$4 = terms[_p$3];
      const term = _p$4;
      _p[_p$3] = moonbitlang$ulex$lib$new_frontend$driver$$expand_term(term, named_regexes$2, source);
      _tmp$3 = _p$3 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return _p;
}
function moonbitlang$ulex$lib$new_frontend$driver$$compile(content, filename) {
  const lex_result = moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes(filename, moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes$46$start_pos$46$default(), false, false, content);
  let ast;
  let _try_err;
  _L: {
    _L$2: {
      const _p = lex_result.tokens;
      const _p$2 = [];
      const _p$3 = _p.length;
      let _tmp = 0;
      while (true) {
        const _p$4 = _tmp;
        if (_p$4 < _p$3) {
          const _p$5 = _p[_p$4];
          const triple = _p$5;
          const _bind = triple._0;
          let _tmp$2;
          switch (_bind.$tag) {
            case 16: {
              _tmp$2 = true;
              break;
            }
            case 15: {
              _tmp$2 = true;
              break;
            }
            default: {
              _tmp$2 = false;
            }
          }
          if (!_tmp$2) {
            moonbitlang$core$array$$Array$push$132$(_p$2, _p$5);
          }
          _tmp = _p$4 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _bind = moonbitlang$ulex$lib$new_frontend$parser$$start(_p$2, { fname: filename, lnum: 1, bol: 0, cnum: 0 });
      if (_bind.$tag === 1) {
        const _ok = _bind;
        ast = _ok._0;
      } else {
        const _err = _bind;
        const _tmp$2 = _err._0;
        _try_err = _tmp$2;
        break _L$2;
      }
      break _L;
    }
    moonbitlang$core$builtin$$println$153$(_try_err);
    ast = $panic();
  }
  return moonbitlang$ulex$lib$new_frontend$driver$$generate(ast.body, content);
}
function moonbitlang$ulex$main$$offset_to_line_column(content, offset) {
  let line = 1;
  let column = 1;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < offset) {
      $bound_check(content, i);
      if (content.charCodeAt(i) === 10) {
        line = line + 1 | 0;
        column = 1;
      } else {
        column = column + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: line, _1: column };
}
function moonbitlang$ulex$main$$array_to_or_list(arr) {
  if (arr.len === 0) {
    return $panic();
  } else {
    if (arr.len === 1) {
      return arr.buf[arr.start];
    } else {
      const _x = arr.buf[arr.start + (arr.len - 1 | 0) | 0];
      const _tmp = arr.buf;
      const _tmp$2 = arr.start;
      const _some = arr.len - 1 | 0;
      const _x$2 = { buf: _tmp, start: _tmp$2, len: _some };
      const _self = [];
      moonbitlang$core$array$$Array$push_iter$0$(_self, moonbitlang$core$array$$ArrayView$iter$0$(_x$2));
      const left = moonbitlang$core$array$$Array$join(_self, { str: moonbitlang$ulex$main$$array_to_or_list$46$42$bind$124$44, start: 0, end: moonbitlang$ulex$main$$array_to_or_list$46$42$bind$124$44.length });
      return `${left} or ${_x}`;
    }
  }
}
function moonbitlang$ulex$main$$loc_to_string(filename, content, loc) {
  const _bind = moonbitlang$ulex$main$$offset_to_line_column(content, loc._0);
  const _start_line = _bind._0;
  const _start_column = _bind._1;
  const _bind$2 = moonbitlang$ulex$main$$offset_to_line_column(content, loc._1);
  const _end_line = _bind$2._0;
  const _end_column = _bind$2._1;
  return _start_line === _end_line ? `${filename}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$8$(_end_column)}` : `${filename}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$8$(_end_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_end_column)}`;
}
(() => {
  const output_file = moonbitlang$core$ref$$new$0$("");
  const input_file = moonbitlang$core$ref$$new$0$("");
  const code_unit = { val: 2 };
  const default_encoding = { val: undefined };
  const new_syntax = { val: false };
  Yoorkin$ArgParser$$parse([{ _0: "--new-syntax", _1: "", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    new_syntax.val = true;
  }), _3: "Use new syntax" }, { _0: "--input-file", _1: "-i", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Set_string(input_file), _3: "Input file (lexer specification)" }, { _0: "--output-format", _1: "-f", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((format) => {
    let _tmp;
    switch (format) {
      case "rust": {
        _tmp = "out.rs";
        break;
      }
      case "c": {
        _tmp = "out.c";
        break;
      }
      default: {
        moonbitlang$core$abort$$abort$4$(`Invalid output format: ${format}`);
        return undefined;
      }
    }
    output_file.val = _tmp;
  }), _3: "Output format (rust or c)" }, { _0: "--output-file", _1: "-o", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Set_string(output_file), _3: "Output file" }, { _0: "--version", _1: "-v", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$0$("moonlex 0.1.0");
    moonbitlang$ulex$main$util$$exit$4$(0);
  }), _3: "Show version" }, { _0: "--code-unit", _1: "", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((code_unit_str) => {
    let _tmp;
    switch (code_unit_str) {
      case "1": {
        _tmp = 0;
        break;
      }
      case "2": {
        _tmp = 1;
        break;
      }
      case "4": {
        _tmp = 2;
        break;
      }
      default: {
        moonbitlang$core$abort$$abort$4$(`Invalid code unit: ${code_unit_str}`);
        return undefined;
      }
    }
    code_unit.val = _tmp;
  }), _3: "Set code unit (1, 2, or 4)" }, { _0: "--default-encoding", _1: "", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((encoding) => {
    let _tmp;
    switch (encoding) {
      case "ascii": {
        _tmp = 0;
        break;
      }
      case "latin1": {
        _tmp = 1;
        break;
      }
      case "utf8": {
        _tmp = 2;
        break;
      }
      case "utf16": {
        _tmp = 3;
        break;
      }
      default: {
        moonbitlang$core$abort$$abort$4$(`Invalid encoding: ${encoding}`);
        return undefined;
      }
    }
    default_encoding.val = _tmp;
  }), _3: "Set default encoding (ascii, latin1, utf8, or utf16). Only valid when code unit is 1" }], (rest) => {
    input_file.val = rest;
  }, moonbitlang$ulex$main$$_init$42$46$usage$124$1, moonbitlang$x$sys$$get_cli_args());
  const _p = input_file.val;
  const _p$2 = "";
  if (!(_p === _p$2)) {
    let output;
    if (new_syntax.val) {
      let _tmp;
      let _try_err;
      _L: {
        _L$2: {
          const _bind = moonbitlang$x$fs$$read_file_to_bytes(input_file.val);
          let _tmp$2;
          if (_bind.$tag === 1) {
            const _ok = _bind;
            _tmp$2 = _ok._0;
          } else {
            const _err = _bind;
            const _tmp$3 = _err._0;
            _try_err = _tmp$3;
            break _L$2;
          }
          _tmp = new Result$Ok$37$(_tmp$2);
          break _L;
        }
        _tmp = new Result$Err$37$(_try_err);
      }
      const lexer_spec_src = moonbitlang$core$result$$Result$unwrap$64$(_tmp);
      output = moonbitlang$ulex$lib$new_frontend$driver$$compile(lexer_spec_src, input_file.val);
    } else {
      let _tmp;
      let _try_err;
      _L: {
        _L$2: {
          const _bind = moonbitlang$x$fs$$read_file_to_string(input_file.val, "utf8");
          let _tmp$2;
          if (_bind.$tag === 1) {
            const _ok = _bind;
            _tmp$2 = _ok._0;
          } else {
            const _err = _bind;
            const _tmp$3 = _err._0;
            _try_err = _tmp$3;
            break _L$2;
          }
          _tmp = new Result$Ok$38$(_tmp$2);
          break _L;
        }
        _tmp = new Result$Err$38$(_try_err);
      }
      const lexer_spec_src = moonbitlang$core$result$$Result$unwrap$65$(_tmp);
      let lex;
      let _try_err$2;
      _L$2: {
        _L$3: {
          const _bind = moonbitlang$ulex$lib$parser$$parse_lex_from_string(lexer_spec_src);
          if (_bind.$tag === 1) {
            const _ok = _bind;
            lex = _ok._0;
          } else {
            const _err = _bind;
            const _tmp$2 = _err._0;
            _try_err$2 = _tmp$2;
            break _L$3;
          }
          break _L$2;
        }
        const _UnexpectedToken = _try_err$2;
        const _token = _UnexpectedToken._0;
        const _loc = _UnexpectedToken._1;
        const _expected = _UnexpectedToken._2;
        const loc_str = moonbitlang$ulex$main$$loc_to_string(input_file.val, lexer_spec_src, _loc);
        const _p$3 = new Array(_expected.length);
        const _p$4 = _expected.length;
        let _tmp$2 = 0;
        while (true) {
          const _p$5 = _tmp$2;
          if (_p$5 < _p$4) {
            const _p$6 = _expected[_p$5];
            _p$3[_p$5] = moonbitlang$core$builtin$$Show$to_string$150$(_p$6);
            _tmp$2 = _p$5 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const _bind = _p$3;
        const expected_str = moonbitlang$ulex$main$$array_to_or_list({ buf: _bind, start: 0, len: _bind.length });
        moonbitlang$ulex$main$util$$println_to_stderr(`SyntaxError: Unexpected token ${moonbitlang$core$builtin$$Show$to_string$150$(moonbitlang$ulex$lib$parser$$Token$kind(_token))}, expected ${expected_str}.\n  at ${loc_str}`);
        lex = moonbitlang$ulex$main$util$$exit$190$(1);
      }
      output = moonbitlang$ulex$lib$codegen$$codegen_lex(lex, code_unit.val, default_encoding.val);
    }
    if (output_file.val === "") {
      moonbitlang$core$builtin$$println$0$(output);
      return;
    } else {
      let _tmp;
      let _try_err;
      _L: {
        _L$2: {
          const _bind = moonbitlang$x$fs$$write_string_to_file(output_file.val, output, "utf8");
          if (_bind.$tag === 1) {
            const _ok = _bind;
            _ok._0;
          } else {
            const _err = _bind;
            const _tmp$2 = _err._0;
            _try_err = _tmp$2;
            break _L$2;
          }
          _tmp = new Result$Ok$39$(undefined);
          break _L;
        }
        _tmp = new Result$Err$39$(_try_err);
      }
      moonbitlang$core$result$$Result$unwrap$66$(_tmp);
      return;
    }
  } else {
    moonbitlang$core$abort$$abort$4$("Input file is required");
    return;
  }
})();
